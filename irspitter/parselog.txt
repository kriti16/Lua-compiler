   yacc.py:3288:Created by PLY version 3.8 (http://www.dabeaz.com/ply)
   yacc.py:3339:
   yacc.py:3340:Unused terminals:
   yacc.py:3341:
   yacc.py:3344:    NEWLINE
   yacc.py:3344:    TDASH
   yacc.py:3348:
   yacc.py:3349:Grammar
   yacc.py:3350:
   yacc.py:3352:Rule 0     S' -> sdash
   yacc.py:3352:Rule 1     sdash -> chunk M_chunk
   yacc.py:3352:Rule 2     sdash -> chunk laststat M_chunk
   yacc.py:3352:Rule 3     sdash -> laststat M_chunk
   yacc.py:3352:Rule 4     sdash -> chunk laststat M_chunk SEMI
   yacc.py:3352:Rule 5     chunk -> chunk M_chunk stat SEMI
   yacc.py:3352:Rule 6     chunk -> stat SEMI
   yacc.py:3352:Rule 7     chunk -> chunk M_chunk stat
   yacc.py:3352:Rule 8     chunk -> stat
   yacc.py:3352:Rule 9     M_chunk -> empty
   yacc.py:3352:Rule 10    block -> sdash
   yacc.py:3352:Rule 11    stat -> varlist EQUALS explist
   yacc.py:3352:Rule 12    stat -> for names EQUALS exp COMMA exp do block end
   yacc.py:3352:Rule 13    stat -> for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:3352:Rule 14    stat -> for namelist in explist do block end
   yacc.py:3352:Rule 15    stat -> while M_while1 exp do M_while2 block end
   yacc.py:3352:Rule 16    M_while1 -> empty
   yacc.py:3352:Rule 17    M_while2 -> empty
   yacc.py:3352:Rule 18    stat -> repeat block until exp
   yacc.py:3352:Rule 19    stat -> do block end
   yacc.py:3352:Rule 20    stat -> function funcname funcbody
   yacc.py:3352:Rule 21    stat -> local function names funcbody
   yacc.py:3352:Rule 22    stat -> local namelist
   yacc.py:3352:Rule 23    stat -> local namelist EQUALS explist
   yacc.py:3352:Rule 24    stat -> functioncall
   yacc.py:3352:Rule 25    funcbody -> LPAREN RPAREN block end
   yacc.py:3352:Rule 26    funcbody -> LPAREN parlist RPAREN block end
   yacc.py:3352:Rule 27    functioncall -> prefixexp args
   yacc.py:3352:Rule 28    args -> LPAREN RPAREN
   yacc.py:3352:Rule 29    args -> LPAREN explist RPAREN
   yacc.py:3352:Rule 30    args -> tableconstructor
   yacc.py:3352:Rule 31    args -> STRING
   yacc.py:3352:Rule 32    parlist -> namelist
   yacc.py:3352:Rule 33    parlist -> namelist comtrp
   yacc.py:3352:Rule 34    parlist -> TRPLDOTS
   yacc.py:3352:Rule 35    comtrp -> COMMA TRPLDOTS
   yacc.py:3352:Rule 36    laststat -> return retexplist
   yacc.py:3352:Rule 37    laststat -> return
   yacc.py:3352:Rule 38    laststat -> break
   yacc.py:3352:Rule 39    funcname -> names dotid COLON
   yacc.py:3352:Rule 40    funcname -> names
   yacc.py:3352:Rule 41    dotid -> SDOT names dotid
   yacc.py:3352:Rule 42    dotid -> empty
   yacc.py:3352:Rule 43    comvar -> COMMA var comvar
   yacc.py:3352:Rule 44    comvar -> empty
   yacc.py:3352:Rule 45    comid -> COMMA names comid
   yacc.py:3352:Rule 46    comid -> empty
   yacc.py:3352:Rule 47    stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:3352:Rule 48    M_bool -> empty
   yacc.py:3352:Rule 49    M_if1 -> empty
   yacc.py:3352:Rule 50    M_if_block_end -> empty
   yacc.py:3352:Rule 51    M_if_tail -> empty
   yacc.py:3352:Rule 52    opt_else -> else M_else block M_else_block
   yacc.py:3352:Rule 53    opt_else -> empty
   yacc.py:3352:Rule 54    M_else -> empty
   yacc.py:3352:Rule 55    M_else_block -> empty
   yacc.py:3352:Rule 56    ifblock -> elseif exp M_bool then M_else_block1 block M_else_block_end ifblock M_ifblock_end
   yacc.py:3352:Rule 57    ifblock -> opt_else
   yacc.py:3352:Rule 58    M_else_block1 -> empty
   yacc.py:3352:Rule 59    M_else_block_end -> empty
   yacc.py:3352:Rule 60    M_ifblock_end -> empty
   yacc.py:3352:Rule 61    varlist -> var comvar
   yacc.py:3352:Rule 62    var -> names
   yacc.py:3352:Rule 63    var -> prefixexp LSQUARE exp RSQUARE
   yacc.py:3352:Rule 64    var -> prefixexp SDOT names
   yacc.py:3352:Rule 65    namelist -> names comid
   yacc.py:3352:Rule 66    explist -> exp COMMA explist
   yacc.py:3352:Rule 67    explist -> exp
   yacc.py:3352:Rule 68    exp -> nil
   yacc.py:3352:Rule 69    exp -> Number
   yacc.py:3352:Rule 70    exp -> STRING
   yacc.py:3352:Rule 71    exp -> true
   yacc.py:3352:Rule 72    exp -> false
   yacc.py:3352:Rule 73    exp -> TRPLDOTS
   yacc.py:3352:Rule 74    exp -> function
   yacc.py:3352:Rule 75    exp -> prefixexp
   yacc.py:3352:Rule 76    exp -> exp PLUS exp
   yacc.py:3352:Rule 77    exp -> exp MINUS exp
   yacc.py:3352:Rule 78    exp -> exp TIMES exp
   yacc.py:3352:Rule 79    exp -> exp DIVIDE exp
   yacc.py:3352:Rule 80    exp -> exp POWER exp
   yacc.py:3352:Rule 81    exp -> exp LT exp
   yacc.py:3352:Rule 82    exp -> exp LE exp
   yacc.py:3352:Rule 83    exp -> exp GT exp
   yacc.py:3352:Rule 84    exp -> exp GE exp
   yacc.py:3352:Rule 85    exp -> exp NE exp
   yacc.py:3352:Rule 86    exp -> exp CHECKEQ exp
   yacc.py:3352:Rule 87    exp -> exp or M_andor exp
   yacc.py:3352:Rule 88    exp -> exp and M_andor exp
   yacc.py:3352:Rule 89    M_andor -> empty
   yacc.py:3352:Rule 90    exp -> exp MODULO exp
   yacc.py:3352:Rule 91    exp -> exp DBLDOTS exp
   yacc.py:3352:Rule 92    exp -> tableconstructor
   yacc.py:3352:Rule 93    exp -> unop exp
   yacc.py:3352:Rule 94    retexplist -> retexplist COMMA retexp
   yacc.py:3352:Rule 95    retexplist -> retexp
   yacc.py:3352:Rule 96    retexp -> nil
   yacc.py:3352:Rule 97    retexp -> Number
   yacc.py:3352:Rule 98    retexp -> STRING
   yacc.py:3352:Rule 99    retexp -> true
   yacc.py:3352:Rule 100   retexp -> false
   yacc.py:3352:Rule 101   retexp -> TRPLDOTS
   yacc.py:3352:Rule 102   retexp -> prefixexp
   yacc.py:3352:Rule 103   retexp -> exp PLUS exp
   yacc.py:3352:Rule 104   retexp -> exp MINUS exp
   yacc.py:3352:Rule 105   retexp -> exp TIMES exp
   yacc.py:3352:Rule 106   retexp -> exp DIVIDE exp
   yacc.py:3352:Rule 107   retexp -> exp POWER exp
   yacc.py:3352:Rule 108   retexp -> exp LT exp
   yacc.py:3352:Rule 109   retexp -> exp LE exp
   yacc.py:3352:Rule 110   retexp -> exp GT exp
   yacc.py:3352:Rule 111   retexp -> exp GE exp
   yacc.py:3352:Rule 112   retexp -> exp NE exp
   yacc.py:3352:Rule 113   retexp -> exp CHECKEQ exp
   yacc.py:3352:Rule 114   retexp -> exp and M_andor exp
   yacc.py:3352:Rule 115   retexp -> exp or M_andor exp
   yacc.py:3352:Rule 116   retexp -> exp MODULO exp
   yacc.py:3352:Rule 117   retexp -> exp DBLDOTS exp
   yacc.py:3352:Rule 118   retexp -> tableconstructor
   yacc.py:3352:Rule 119   retexp -> unop exp
   yacc.py:3352:Rule 120   Number -> INTEGER
   yacc.py:3352:Rule 121   Number -> FLOAT
   yacc.py:3352:Rule 122   Number -> HEX
   yacc.py:3352:Rule 123   empty -> <empty>
   yacc.py:3352:Rule 124   prefixexp -> var
   yacc.py:3352:Rule 125   prefixexp -> LPAREN exp RPAREN
   yacc.py:3352:Rule 126   prefixexp -> functioncall
   yacc.py:3352:Rule 127   unop -> not
   yacc.py:3352:Rule 128   unop -> MINUS
   yacc.py:3352:Rule 129   unop -> HASH
   yacc.py:3352:Rule 130   tableconstructor -> LCURLY fieldlist RCURLY
   yacc.py:3352:Rule 131   tableconstructor -> LCURLY RCURLY
   yacc.py:3352:Rule 132   fieldlist -> field fieldseplist fieldsep
   yacc.py:3352:Rule 133   fieldlist -> field fieldseplist
   yacc.py:3352:Rule 134   fieldseplist -> fieldseplist fieldsep field
   yacc.py:3352:Rule 135   fieldseplist -> empty
   yacc.py:3352:Rule 136   field -> LSQUARE exp RSQUARE EQUALS exp
   yacc.py:3352:Rule 137   field -> names EQUALS exp
   yacc.py:3352:Rule 138   field -> exp
   yacc.py:3352:Rule 139   fieldsep -> COMMA
   yacc.py:3352:Rule 140   fieldsep -> SEMI
   yacc.py:3352:Rule 141   names -> ID
   yacc.py:3352:Rule 142   names -> RESID
   yacc.py:3370:
   yacc.py:3371:Terminals, with rules where they appear
   yacc.py:3372:
   yacc.py:3376:CHECKEQ              : 86 113
   yacc.py:3376:COLON                : 39
   yacc.py:3376:COMMA                : 12 13 13 35 43 45 66 94 139
   yacc.py:3376:DBLDOTS              : 91 117
   yacc.py:3376:DIVIDE               : 79 106
   yacc.py:3376:EQUALS               : 11 12 13 23 136 137
   yacc.py:3376:FLOAT                : 121
   yacc.py:3376:GE                   : 84 111
   yacc.py:3376:GT                   : 83 110
   yacc.py:3376:HASH                 : 129
   yacc.py:3376:HEX                  : 122
   yacc.py:3376:ID                   : 141
   yacc.py:3376:INTEGER              : 120
   yacc.py:3376:LCURLY               : 130 131
   yacc.py:3376:LE                   : 82 109
   yacc.py:3376:LPAREN               : 25 26 28 29 125
   yacc.py:3376:LSQUARE              : 63 136
   yacc.py:3376:LT                   : 81 108
   yacc.py:3376:MINUS                : 77 104 128
   yacc.py:3376:MODULO               : 90 116
   yacc.py:3376:NE                   : 85 112
   yacc.py:3376:NEWLINE              : 
   yacc.py:3376:PLUS                 : 76 103
   yacc.py:3376:POWER                : 80 107
   yacc.py:3376:RCURLY               : 130 131
   yacc.py:3376:RESID                : 142
   yacc.py:3376:RPAREN               : 25 26 28 29 125
   yacc.py:3376:RSQUARE              : 63 136
   yacc.py:3376:SDOT                 : 41 64
   yacc.py:3376:SEMI                 : 4 5 6 140
   yacc.py:3376:STRING               : 31 70 98
   yacc.py:3376:TDASH                : 
   yacc.py:3376:TIMES                : 78 105
   yacc.py:3376:TRPLDOTS             : 34 35 73 101
   yacc.py:3376:and                  : 88 114
   yacc.py:3376:break                : 38
   yacc.py:3376:do                   : 12 13 14 15 19
   yacc.py:3376:else                 : 52
   yacc.py:3376:elseif               : 56
   yacc.py:3376:end                  : 12 13 14 15 19 25 26 47
   yacc.py:3376:error                : 
   yacc.py:3376:false                : 72 100
   yacc.py:3376:for                  : 12 13 14
   yacc.py:3376:function             : 20 21 74
   yacc.py:3376:if                   : 47
   yacc.py:3376:in                   : 14
   yacc.py:3376:local                : 21 22 23
   yacc.py:3376:nil                  : 68 96
   yacc.py:3376:not                  : 127
   yacc.py:3376:or                   : 87 115
   yacc.py:3376:repeat               : 18
   yacc.py:3376:return               : 36 37
   yacc.py:3376:then                 : 47 56
   yacc.py:3376:true                 : 71 99
   yacc.py:3376:until                : 18
   yacc.py:3376:while                : 15
   yacc.py:3378:
   yacc.py:3379:Nonterminals, with rules where they appear
   yacc.py:3380:
   yacc.py:3384:M_andor              : 87 88 114 115
   yacc.py:3384:M_bool               : 47 56
   yacc.py:3384:M_chunk              : 1 2 3 4 5 7
   yacc.py:3384:M_else               : 52
   yacc.py:3384:M_else_block         : 52
   yacc.py:3384:M_else_block1        : 56
   yacc.py:3384:M_else_block_end     : 56
   yacc.py:3384:M_if1                : 47
   yacc.py:3384:M_if_block_end       : 47
   yacc.py:3384:M_if_tail            : 47
   yacc.py:3384:M_ifblock_end        : 56
   yacc.py:3384:M_while1             : 15
   yacc.py:3384:M_while2             : 15
   yacc.py:3384:Number               : 69 97
   yacc.py:3384:args                 : 27
   yacc.py:3384:block                : 12 13 14 15 18 19 25 26 47 52 56
   yacc.py:3384:chunk                : 1 2 4 5 7
   yacc.py:3384:comid                : 45 65
   yacc.py:3384:comtrp               : 33
   yacc.py:3384:comvar               : 43 61
   yacc.py:3384:dotid                : 39 41
   yacc.py:3384:empty                : 9 16 17 42 44 46 48 49 50 51 53 54 55 58 59 60 89 135
   yacc.py:3384:exp                  : 12 12 13 13 13 15 18 47 56 63 66 67 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 90 90 91 91 93 103 103 104 104 105 105 106 106 107 107 108 108 109 109 110 110 111 111 112 112 113 113 114 114 115 115 116 116 117 117 119 125 136 136 137 138
   yacc.py:3384:explist              : 11 14 23 29 66
   yacc.py:3384:field                : 132 133 134
   yacc.py:3384:fieldlist            : 130
   yacc.py:3384:fieldsep             : 132 134
   yacc.py:3384:fieldseplist         : 132 133 134
   yacc.py:3384:funcbody             : 20 21
   yacc.py:3384:funcname             : 20
   yacc.py:3384:functioncall         : 24 126
   yacc.py:3384:ifblock              : 47 56
   yacc.py:3384:laststat             : 2 3 4
   yacc.py:3384:namelist             : 14 22 23 32 33
   yacc.py:3384:names                : 12 13 21 39 40 41 45 62 64 65 137
   yacc.py:3384:opt_else             : 57
   yacc.py:3384:parlist              : 26
   yacc.py:3384:prefixexp            : 27 63 64 75 102
   yacc.py:3384:retexp               : 94 95
   yacc.py:3384:retexplist           : 36 94
   yacc.py:3384:sdash                : 10 0
   yacc.py:3384:stat                 : 5 6 7 8
   yacc.py:3384:tableconstructor     : 30 92 118
   yacc.py:3384:unop                 : 93 119
   yacc.py:3384:var                  : 43 61 124
   yacc.py:3384:varlist              : 11
   yacc.py:3385:
   yacc.py:2524:Parsing method: LALR
   yacc.py:2542:
   yacc.py:2543:state 0
   yacc.py:2544:
   yacc.py:2546:    (0) S' -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (36) laststat -> . return retexplist
   yacc.py:2546:    (37) laststat -> . return
   yacc.py:2546:    (38) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat block until exp
   yacc.py:2546:    (19) stat -> . do block end
   yacc.py:2546:    (20) stat -> . function funcname funcbody
   yacc.py:2546:    (21) stat -> . local function names funcbody
   yacc.py:2546:    (22) stat -> . local namelist
   yacc.py:2546:    (23) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (24) stat -> . functioncall
   yacc.py:2546:    (47) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (61) varlist -> . var comvar
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 19
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 10
   yacc.py:2685:    var                            shift and go to state 11
   yacc.py:2685:    functioncall                   shift and go to state 12
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    sdash                          shift and go to state 21
   yacc.py:2542:
   yacc.py:2543:state 1
   yacc.py:2544:
   yacc.py:2546:    (20) stat -> function . funcname funcbody
   yacc.py:2546:    (39) funcname -> . names dotid COLON
   yacc.py:2546:    (40) funcname -> . names
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    names                          shift and go to state 23
   yacc.py:2685:    funcname                       shift and go to state 22
   yacc.py:2542:
   yacc.py:2543:state 2
   yacc.py:2544:
   yacc.py:2546:    (142) names -> RESID .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    SDOT            reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    LPAREN          reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    STRING          reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    LCURLY          reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    PLUS            reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    MINUS           reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    TIMES           reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    DIVIDE          reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    POWER           reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    LT              reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    LE              reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    GT              reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    GE              reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    NE              reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    CHECKEQ         reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    or              reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    and             reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    MODULO          reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    DBLDOTS         reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    RPAREN          reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    then            reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    COMMA           reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    SEMI            reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    RCURLY          reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    RSQUARE         reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    return          reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    break           reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    for             reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    while           reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    repeat          reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    do              reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    function        reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    local           reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    if              reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    ID              reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    RESID           reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    $end            reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    end             reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    until           reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    elseif          reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    else            reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    EQUALS          reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    in              reduce using rule 142 (names -> RESID .)
   yacc.py:2658:    COLON           reduce using rule 142 (names -> RESID .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 3
   yacc.py:2544:
   yacc.py:2546:    (125) prefixexp -> LPAREN . exp RPAREN
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 41
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 4
   yacc.py:2544:
   yacc.py:2546:    (1) sdash -> chunk . M_chunk
   yacc.py:2546:    (2) sdash -> chunk . laststat M_chunk
   yacc.py:2546:    (4) sdash -> chunk . laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> chunk . M_chunk stat SEMI
   yacc.py:2546:    (7) chunk -> chunk . M_chunk stat
   yacc.py:2546:    (9) M_chunk -> . empty
   yacc.py:2546:    (36) laststat -> . return retexplist
   yacc.py:2546:    (37) laststat -> . return
   yacc.py:2546:    (38) laststat -> . break
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    for             reduce using rule 123 (empty -> .)
   yacc.py:2658:    while           reduce using rule 123 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 123 (empty -> .)
   yacc.py:2658:    do              reduce using rule 123 (empty -> .)
   yacc.py:2658:    function        reduce using rule 123 (empty -> .)
   yacc.py:2658:    local           reduce using rule 123 (empty -> .)
   yacc.py:2658:    if              reduce using rule 123 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 123 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 123 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 123 (empty -> .)
   yacc.py:2658:    $end            reduce using rule 123 (empty -> .)
   yacc.py:2658:    end             reduce using rule 123 (empty -> .)
   yacc.py:2658:    until           reduce using rule 123 (empty -> .)
   yacc.py:2658:    elseif          reduce using rule 123 (empty -> .)
   yacc.py:2658:    else            reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    M_chunk                        shift and go to state 44
   yacc.py:2685:    laststat                       shift and go to state 45
   yacc.py:2685:    empty                          shift and go to state 46
   yacc.py:2542:
   yacc.py:2543:state 5
   yacc.py:2544:
   yacc.py:2546:    (62) var -> names .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 62 (var -> names .)
   yacc.py:2658:    SDOT            reduce using rule 62 (var -> names .)
   yacc.py:2658:    LPAREN          reduce using rule 62 (var -> names .)
   yacc.py:2658:    STRING          reduce using rule 62 (var -> names .)
   yacc.py:2658:    LCURLY          reduce using rule 62 (var -> names .)
   yacc.py:2658:    PLUS            reduce using rule 62 (var -> names .)
   yacc.py:2658:    MINUS           reduce using rule 62 (var -> names .)
   yacc.py:2658:    TIMES           reduce using rule 62 (var -> names .)
   yacc.py:2658:    DIVIDE          reduce using rule 62 (var -> names .)
   yacc.py:2658:    POWER           reduce using rule 62 (var -> names .)
   yacc.py:2658:    LT              reduce using rule 62 (var -> names .)
   yacc.py:2658:    LE              reduce using rule 62 (var -> names .)
   yacc.py:2658:    GT              reduce using rule 62 (var -> names .)
   yacc.py:2658:    GE              reduce using rule 62 (var -> names .)
   yacc.py:2658:    NE              reduce using rule 62 (var -> names .)
   yacc.py:2658:    CHECKEQ         reduce using rule 62 (var -> names .)
   yacc.py:2658:    or              reduce using rule 62 (var -> names .)
   yacc.py:2658:    and             reduce using rule 62 (var -> names .)
   yacc.py:2658:    MODULO          reduce using rule 62 (var -> names .)
   yacc.py:2658:    DBLDOTS         reduce using rule 62 (var -> names .)
   yacc.py:2658:    RPAREN          reduce using rule 62 (var -> names .)
   yacc.py:2658:    then            reduce using rule 62 (var -> names .)
   yacc.py:2658:    COMMA           reduce using rule 62 (var -> names .)
   yacc.py:2658:    SEMI            reduce using rule 62 (var -> names .)
   yacc.py:2658:    RCURLY          reduce using rule 62 (var -> names .)
   yacc.py:2658:    RSQUARE         reduce using rule 62 (var -> names .)
   yacc.py:2658:    return          reduce using rule 62 (var -> names .)
   yacc.py:2658:    break           reduce using rule 62 (var -> names .)
   yacc.py:2658:    for             reduce using rule 62 (var -> names .)
   yacc.py:2658:    while           reduce using rule 62 (var -> names .)
   yacc.py:2658:    repeat          reduce using rule 62 (var -> names .)
   yacc.py:2658:    do              reduce using rule 62 (var -> names .)
   yacc.py:2658:    function        reduce using rule 62 (var -> names .)
   yacc.py:2658:    local           reduce using rule 62 (var -> names .)
   yacc.py:2658:    if              reduce using rule 62 (var -> names .)
   yacc.py:2658:    ID              reduce using rule 62 (var -> names .)
   yacc.py:2658:    RESID           reduce using rule 62 (var -> names .)
   yacc.py:2658:    $end            reduce using rule 62 (var -> names .)
   yacc.py:2658:    end             reduce using rule 62 (var -> names .)
   yacc.py:2658:    until           reduce using rule 62 (var -> names .)
   yacc.py:2658:    elseif          reduce using rule 62 (var -> names .)
   yacc.py:2658:    else            reduce using rule 62 (var -> names .)
   yacc.py:2658:    EQUALS          reduce using rule 62 (var -> names .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 6
   yacc.py:2544:
   yacc.py:2546:    (47) stat -> if . exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 47
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2542:
   yacc.py:2543:state 7
   yacc.py:2544:
   yacc.py:2546:    (27) functioncall -> prefixexp . args
   yacc.py:2546:    (63) var -> prefixexp . LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> prefixexp . SDOT names
   yacc.py:2546:    (28) args -> . LPAREN RPAREN
   yacc.py:2546:    (29) args -> . LPAREN explist RPAREN
   yacc.py:2546:    (30) args -> . tableconstructor
   yacc.py:2546:    (31) args -> . STRING
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         shift and go to state 49
   yacc.py:2658:    SDOT            shift and go to state 52
   yacc.py:2658:    LPAREN          shift and go to state 51
   yacc.py:2658:    STRING          shift and go to state 53
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2660:
   yacc.py:2685:    tableconstructor               shift and go to state 48
   yacc.py:2685:    args                           shift and go to state 50
   yacc.py:2542:
   yacc.py:2543:state 8
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for . names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> for . names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> for . namelist in explist do block end
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2546:    (65) namelist -> . names comid
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    namelist                       shift and go to state 54
   yacc.py:2685:    names                          shift and go to state 55
   yacc.py:2542:
   yacc.py:2543:state 9
   yacc.py:2544:
   yacc.py:2546:    (11) stat -> varlist . EQUALS explist
   yacc.py:2547:
   yacc.py:2658:    EQUALS          shift and go to state 56
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 10
   yacc.py:2544:
   yacc.py:2546:    (3) sdash -> laststat . M_chunk
   yacc.py:2546:    (9) M_chunk -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    $end            reduce using rule 123 (empty -> .)
   yacc.py:2658:    end             reduce using rule 123 (empty -> .)
   yacc.py:2658:    until           reduce using rule 123 (empty -> .)
   yacc.py:2658:    elseif          reduce using rule 123 (empty -> .)
   yacc.py:2658:    else            reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    M_chunk                        shift and go to state 57
   yacc.py:2685:    empty                          shift and go to state 46
   yacc.py:2542:
   yacc.py:2543:state 11
   yacc.py:2544:
   yacc.py:2546:    (61) varlist -> var . comvar
   yacc.py:2546:    (124) prefixexp -> var .
   yacc.py:2546:    (43) comvar -> . COMMA var comvar
   yacc.py:2546:    (44) comvar -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    SDOT            reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    LPAREN          reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    STRING          reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    LCURLY          reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    COMMA           shift and go to state 58
   yacc.py:2658:    EQUALS          reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    comvar                         shift and go to state 59
   yacc.py:2685:    empty                          shift and go to state 60
   yacc.py:2542:
   yacc.py:2543:state 12
   yacc.py:2544:
   yacc.py:2546:    (24) stat -> functioncall .
   yacc.py:2546:    (126) prefixexp -> functioncall .
   yacc.py:2547:
   yacc.py:2602:  ! reduce/reduce conflict for LPAREN resolved using rule 24 (stat -> functioncall .)
   yacc.py:2658:    SEMI            reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    return          reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    break           reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    for             reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    while           reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    repeat          reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    do              reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    function        reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    local           reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    if              reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    LPAREN          reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    ID              reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    RESID           reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    end             reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    $end            reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    until           reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    elseif          reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    else            reduce using rule 24 (stat -> functioncall .)
   yacc.py:2658:    LSQUARE         reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    SDOT            reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    STRING          reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    LCURLY          reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2660:
   yacc.py:2667:  ! LPAREN          [ reduce using rule 126 (prefixexp -> functioncall .) ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 13
   yacc.py:2544:
   yacc.py:2546:    (19) stat -> do . block end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (36) laststat -> . return retexplist
   yacc.py:2546:    (37) laststat -> . return
   yacc.py:2546:    (38) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat block until exp
   yacc.py:2546:    (19) stat -> . do block end
   yacc.py:2546:    (20) stat -> . function funcname funcbody
   yacc.py:2546:    (21) stat -> . local function names funcbody
   yacc.py:2546:    (22) stat -> . local namelist
   yacc.py:2546:    (23) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (24) stat -> . functioncall
   yacc.py:2546:    (47) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (61) varlist -> . var comvar
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 19
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 10
   yacc.py:2685:    var                            shift and go to state 11
   yacc.py:2685:    functioncall                   shift and go to state 12
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    sdash                          shift and go to state 61
   yacc.py:2685:    block                          shift and go to state 62
   yacc.py:2542:
   yacc.py:2543:state 14
   yacc.py:2544:
   yacc.py:2546:    (6) chunk -> stat . SEMI
   yacc.py:2546:    (8) chunk -> stat .
   yacc.py:2547:
   yacc.py:2658:    SEMI            shift and go to state 63
   yacc.py:2658:    return          reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    break           reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    for             reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    while           reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    repeat          reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    do              reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    function        reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    local           reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    if              reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    LPAREN          reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    ID              reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    RESID           reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    end             reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    elseif          reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    else            reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    until           reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    $end            reduce using rule 8 (chunk -> stat .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 15
   yacc.py:2544:
   yacc.py:2546:    (18) stat -> repeat . block until exp
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (36) laststat -> . return retexplist
   yacc.py:2546:    (37) laststat -> . return
   yacc.py:2546:    (38) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat block until exp
   yacc.py:2546:    (19) stat -> . do block end
   yacc.py:2546:    (20) stat -> . function funcname funcbody
   yacc.py:2546:    (21) stat -> . local function names funcbody
   yacc.py:2546:    (22) stat -> . local namelist
   yacc.py:2546:    (23) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (24) stat -> . functioncall
   yacc.py:2546:    (47) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (61) varlist -> . var comvar
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 19
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 10
   yacc.py:2685:    var                            shift and go to state 11
   yacc.py:2685:    functioncall                   shift and go to state 12
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    block                          shift and go to state 64
   yacc.py:2685:    sdash                          shift and go to state 61
   yacc.py:2542:
   yacc.py:2543:state 16
   yacc.py:2544:
   yacc.py:2546:    (36) laststat -> return . retexplist
   yacc.py:2546:    (37) laststat -> return .
   yacc.py:2546:    (94) retexplist -> . retexplist COMMA retexp
   yacc.py:2546:    (95) retexplist -> . retexp
   yacc.py:2546:    (96) retexp -> . nil
   yacc.py:2546:    (97) retexp -> . Number
   yacc.py:2546:    (98) retexp -> . STRING
   yacc.py:2546:    (99) retexp -> . true
   yacc.py:2546:    (100) retexp -> . false
   yacc.py:2546:    (101) retexp -> . TRPLDOTS
   yacc.py:2546:    (102) retexp -> . prefixexp
   yacc.py:2546:    (103) retexp -> . exp PLUS exp
   yacc.py:2546:    (104) retexp -> . exp MINUS exp
   yacc.py:2546:    (105) retexp -> . exp TIMES exp
   yacc.py:2546:    (106) retexp -> . exp DIVIDE exp
   yacc.py:2546:    (107) retexp -> . exp POWER exp
   yacc.py:2546:    (108) retexp -> . exp LT exp
   yacc.py:2546:    (109) retexp -> . exp LE exp
   yacc.py:2546:    (110) retexp -> . exp GT exp
   yacc.py:2546:    (111) retexp -> . exp GE exp
   yacc.py:2546:    (112) retexp -> . exp NE exp
   yacc.py:2546:    (113) retexp -> . exp CHECKEQ exp
   yacc.py:2546:    (114) retexp -> . exp and M_andor exp
   yacc.py:2546:    (115) retexp -> . exp or M_andor exp
   yacc.py:2546:    (116) retexp -> . exp MODULO exp
   yacc.py:2546:    (117) retexp -> . exp DBLDOTS exp
   yacc.py:2546:    (118) retexp -> . tableconstructor
   yacc.py:2546:    (119) retexp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 37 (laststat -> return .)
   yacc.py:2658:    elseif          reduce using rule 37 (laststat -> return .)
   yacc.py:2658:    else            reduce using rule 37 (laststat -> return .)
   yacc.py:2658:    SEMI            reduce using rule 37 (laststat -> return .)
   yacc.py:2658:    $end            reduce using rule 37 (laststat -> return .)
   yacc.py:2658:    until           reduce using rule 37 (laststat -> return .)
   yacc.py:2658:    nil             shift and go to state 71
   yacc.py:2658:    STRING          shift and go to state 70
   yacc.py:2658:    true            shift and go to state 72
   yacc.py:2658:    false           shift and go to state 66
   yacc.py:2658:    TRPLDOTS        shift and go to state 67
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 68
   yacc.py:2685:    tableconstructor               shift and go to state 65
   yacc.py:2685:    retexp                         shift and go to state 69
   yacc.py:2685:    Number                         shift and go to state 73
   yacc.py:2685:    unop                           shift and go to state 76
   yacc.py:2685:    retexplist                     shift and go to state 74
   yacc.py:2685:    exp                            shift and go to state 75
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 17
   yacc.py:2544:
   yacc.py:2546:    (38) laststat -> break .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 38 (laststat -> break .)
   yacc.py:2658:    elseif          reduce using rule 38 (laststat -> break .)
   yacc.py:2658:    else            reduce using rule 38 (laststat -> break .)
   yacc.py:2658:    SEMI            reduce using rule 38 (laststat -> break .)
   yacc.py:2658:    $end            reduce using rule 38 (laststat -> break .)
   yacc.py:2658:    until           reduce using rule 38 (laststat -> break .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 18
   yacc.py:2544:
   yacc.py:2546:    (141) names -> ID .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 141 (names -> ID .)
   yacc.py:2658:    SDOT            reduce using rule 141 (names -> ID .)
   yacc.py:2658:    LPAREN          reduce using rule 141 (names -> ID .)
   yacc.py:2658:    STRING          reduce using rule 141 (names -> ID .)
   yacc.py:2658:    LCURLY          reduce using rule 141 (names -> ID .)
   yacc.py:2658:    PLUS            reduce using rule 141 (names -> ID .)
   yacc.py:2658:    MINUS           reduce using rule 141 (names -> ID .)
   yacc.py:2658:    TIMES           reduce using rule 141 (names -> ID .)
   yacc.py:2658:    DIVIDE          reduce using rule 141 (names -> ID .)
   yacc.py:2658:    POWER           reduce using rule 141 (names -> ID .)
   yacc.py:2658:    LT              reduce using rule 141 (names -> ID .)
   yacc.py:2658:    LE              reduce using rule 141 (names -> ID .)
   yacc.py:2658:    GT              reduce using rule 141 (names -> ID .)
   yacc.py:2658:    GE              reduce using rule 141 (names -> ID .)
   yacc.py:2658:    NE              reduce using rule 141 (names -> ID .)
   yacc.py:2658:    CHECKEQ         reduce using rule 141 (names -> ID .)
   yacc.py:2658:    or              reduce using rule 141 (names -> ID .)
   yacc.py:2658:    and             reduce using rule 141 (names -> ID .)
   yacc.py:2658:    MODULO          reduce using rule 141 (names -> ID .)
   yacc.py:2658:    DBLDOTS         reduce using rule 141 (names -> ID .)
   yacc.py:2658:    RPAREN          reduce using rule 141 (names -> ID .)
   yacc.py:2658:    then            reduce using rule 141 (names -> ID .)
   yacc.py:2658:    COMMA           reduce using rule 141 (names -> ID .)
   yacc.py:2658:    SEMI            reduce using rule 141 (names -> ID .)
   yacc.py:2658:    RCURLY          reduce using rule 141 (names -> ID .)
   yacc.py:2658:    RSQUARE         reduce using rule 141 (names -> ID .)
   yacc.py:2658:    return          reduce using rule 141 (names -> ID .)
   yacc.py:2658:    break           reduce using rule 141 (names -> ID .)
   yacc.py:2658:    for             reduce using rule 141 (names -> ID .)
   yacc.py:2658:    while           reduce using rule 141 (names -> ID .)
   yacc.py:2658:    repeat          reduce using rule 141 (names -> ID .)
   yacc.py:2658:    do              reduce using rule 141 (names -> ID .)
   yacc.py:2658:    function        reduce using rule 141 (names -> ID .)
   yacc.py:2658:    local           reduce using rule 141 (names -> ID .)
   yacc.py:2658:    if              reduce using rule 141 (names -> ID .)
   yacc.py:2658:    ID              reduce using rule 141 (names -> ID .)
   yacc.py:2658:    RESID           reduce using rule 141 (names -> ID .)
   yacc.py:2658:    $end            reduce using rule 141 (names -> ID .)
   yacc.py:2658:    end             reduce using rule 141 (names -> ID .)
   yacc.py:2658:    until           reduce using rule 141 (names -> ID .)
   yacc.py:2658:    elseif          reduce using rule 141 (names -> ID .)
   yacc.py:2658:    else            reduce using rule 141 (names -> ID .)
   yacc.py:2658:    EQUALS          reduce using rule 141 (names -> ID .)
   yacc.py:2658:    in              reduce using rule 141 (names -> ID .)
   yacc.py:2658:    COLON           reduce using rule 141 (names -> ID .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 19
   yacc.py:2544:
   yacc.py:2546:    (21) stat -> local . function names funcbody
   yacc.py:2546:    (22) stat -> local . namelist
   yacc.py:2546:    (23) stat -> local . namelist EQUALS explist
   yacc.py:2546:    (65) namelist -> . names comid
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    function        shift and go to state 77
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    namelist                       shift and go to state 78
   yacc.py:2685:    names                          shift and go to state 79
   yacc.py:2542:
   yacc.py:2543:state 20
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> while . M_while1 exp do M_while2 block end
   yacc.py:2546:    (16) M_while1 -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 123 (empty -> .)
   yacc.py:2658:    STRING          reduce using rule 123 (empty -> .)
   yacc.py:2658:    true            reduce using rule 123 (empty -> .)
   yacc.py:2658:    false           reduce using rule 123 (empty -> .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 123 (empty -> .)
   yacc.py:2658:    function        reduce using rule 123 (empty -> .)
   yacc.py:2658:    INTEGER         reduce using rule 123 (empty -> .)
   yacc.py:2658:    FLOAT           reduce using rule 123 (empty -> .)
   yacc.py:2658:    HEX             reduce using rule 123 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 123 (empty -> .)
   yacc.py:2658:    LCURLY          reduce using rule 123 (empty -> .)
   yacc.py:2658:    not             reduce using rule 123 (empty -> .)
   yacc.py:2658:    MINUS           reduce using rule 123 (empty -> .)
   yacc.py:2658:    HASH            reduce using rule 123 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 123 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 81
   yacc.py:2685:    M_while1                       shift and go to state 80
   yacc.py:2542:
   yacc.py:2543:state 21
   yacc.py:2544:
   yacc.py:2546:    (0) S' -> sdash .
   yacc.py:2547:
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 22
   yacc.py:2544:
   yacc.py:2546:    (20) stat -> function funcname . funcbody
   yacc.py:2546:    (25) funcbody -> . LPAREN RPAREN block end
   yacc.py:2546:    (26) funcbody -> . LPAREN parlist RPAREN block end
   yacc.py:2547:
   yacc.py:2658:    LPAREN          shift and go to state 83
   yacc.py:2660:
   yacc.py:2685:    funcbody                       shift and go to state 82
   yacc.py:2542:
   yacc.py:2543:state 23
   yacc.py:2544:
   yacc.py:2546:    (39) funcname -> names . dotid COLON
   yacc.py:2546:    (40) funcname -> names .
   yacc.py:2546:    (41) dotid -> . SDOT names dotid
   yacc.py:2546:    (42) dotid -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    LPAREN          reduce using rule 40 (funcname -> names .)
   yacc.py:2658:    SDOT            shift and go to state 84
   yacc.py:2658:    COLON           reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    dotid                          shift and go to state 85
   yacc.py:2685:    empty                          shift and go to state 86
   yacc.py:2542:
   yacc.py:2543:state 24
   yacc.py:2544:
   yacc.py:2546:    (92) exp -> tableconstructor .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    MINUS           reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    TIMES           reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    DIVIDE          reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    POWER           reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    LT              reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    LE              reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    GT              reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    GE              reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    NE              reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    CHECKEQ         reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    or              reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    and             reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    MODULO          reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    DBLDOTS         reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    RPAREN          reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    then            reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    COMMA           reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    SEMI            reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    RCURLY          reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    RSQUARE         reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    return          reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    break           reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    for             reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    while           reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    repeat          reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    do              reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    function        reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    local           reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    if              reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    LPAREN          reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    ID              reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    RESID           reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    $end            reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    end             reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    until           reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    elseif          reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    else            reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 25
   yacc.py:2544:
   yacc.py:2546:    (72) exp -> false .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 72 (exp -> false .)
   yacc.py:2658:    MINUS           reduce using rule 72 (exp -> false .)
   yacc.py:2658:    TIMES           reduce using rule 72 (exp -> false .)
   yacc.py:2658:    DIVIDE          reduce using rule 72 (exp -> false .)
   yacc.py:2658:    POWER           reduce using rule 72 (exp -> false .)
   yacc.py:2658:    LT              reduce using rule 72 (exp -> false .)
   yacc.py:2658:    LE              reduce using rule 72 (exp -> false .)
   yacc.py:2658:    GT              reduce using rule 72 (exp -> false .)
   yacc.py:2658:    GE              reduce using rule 72 (exp -> false .)
   yacc.py:2658:    NE              reduce using rule 72 (exp -> false .)
   yacc.py:2658:    CHECKEQ         reduce using rule 72 (exp -> false .)
   yacc.py:2658:    or              reduce using rule 72 (exp -> false .)
   yacc.py:2658:    and             reduce using rule 72 (exp -> false .)
   yacc.py:2658:    MODULO          reduce using rule 72 (exp -> false .)
   yacc.py:2658:    DBLDOTS         reduce using rule 72 (exp -> false .)
   yacc.py:2658:    RPAREN          reduce using rule 72 (exp -> false .)
   yacc.py:2658:    then            reduce using rule 72 (exp -> false .)
   yacc.py:2658:    COMMA           reduce using rule 72 (exp -> false .)
   yacc.py:2658:    SEMI            reduce using rule 72 (exp -> false .)
   yacc.py:2658:    RCURLY          reduce using rule 72 (exp -> false .)
   yacc.py:2658:    RSQUARE         reduce using rule 72 (exp -> false .)
   yacc.py:2658:    return          reduce using rule 72 (exp -> false .)
   yacc.py:2658:    break           reduce using rule 72 (exp -> false .)
   yacc.py:2658:    for             reduce using rule 72 (exp -> false .)
   yacc.py:2658:    while           reduce using rule 72 (exp -> false .)
   yacc.py:2658:    repeat          reduce using rule 72 (exp -> false .)
   yacc.py:2658:    do              reduce using rule 72 (exp -> false .)
   yacc.py:2658:    function        reduce using rule 72 (exp -> false .)
   yacc.py:2658:    local           reduce using rule 72 (exp -> false .)
   yacc.py:2658:    if              reduce using rule 72 (exp -> false .)
   yacc.py:2658:    LPAREN          reduce using rule 72 (exp -> false .)
   yacc.py:2658:    ID              reduce using rule 72 (exp -> false .)
   yacc.py:2658:    RESID           reduce using rule 72 (exp -> false .)
   yacc.py:2658:    $end            reduce using rule 72 (exp -> false .)
   yacc.py:2658:    end             reduce using rule 72 (exp -> false .)
   yacc.py:2658:    until           reduce using rule 72 (exp -> false .)
   yacc.py:2658:    elseif          reduce using rule 72 (exp -> false .)
   yacc.py:2658:    else            reduce using rule 72 (exp -> false .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 26
   yacc.py:2544:
   yacc.py:2546:    (130) tableconstructor -> LCURLY . fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> LCURLY . RCURLY
   yacc.py:2546:    (132) fieldlist -> . field fieldseplist fieldsep
   yacc.py:2546:    (133) fieldlist -> . field fieldseplist
   yacc.py:2546:    (136) field -> . LSQUARE exp RSQUARE EQUALS exp
   yacc.py:2546:    (137) field -> . names EQUALS exp
   yacc.py:2546:    (138) field -> . exp
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2547:
   yacc.py:2658:    RCURLY          shift and go to state 88
   yacc.py:2658:    LSQUARE         shift and go to state 92
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    field                          shift and go to state 89
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    fieldlist                      shift and go to state 90
   yacc.py:2685:    exp                            shift and go to state 91
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 87
   yacc.py:2542:
   yacc.py:2543:state 27
   yacc.py:2544:
   yacc.py:2546:    (129) unop -> HASH .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 129 (unop -> HASH .)
   yacc.py:2658:    STRING          reduce using rule 129 (unop -> HASH .)
   yacc.py:2658:    true            reduce using rule 129 (unop -> HASH .)
   yacc.py:2658:    false           reduce using rule 129 (unop -> HASH .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 129 (unop -> HASH .)
   yacc.py:2658:    function        reduce using rule 129 (unop -> HASH .)
   yacc.py:2658:    INTEGER         reduce using rule 129 (unop -> HASH .)
   yacc.py:2658:    FLOAT           reduce using rule 129 (unop -> HASH .)
   yacc.py:2658:    HEX             reduce using rule 129 (unop -> HASH .)
   yacc.py:2658:    LPAREN          reduce using rule 129 (unop -> HASH .)
   yacc.py:2658:    LCURLY          reduce using rule 129 (unop -> HASH .)
   yacc.py:2658:    not             reduce using rule 129 (unop -> HASH .)
   yacc.py:2658:    MINUS           reduce using rule 129 (unop -> HASH .)
   yacc.py:2658:    HASH            reduce using rule 129 (unop -> HASH .)
   yacc.py:2658:    ID              reduce using rule 129 (unop -> HASH .)
   yacc.py:2658:    RESID           reduce using rule 129 (unop -> HASH .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 28
   yacc.py:2544:
   yacc.py:2546:    (128) unop -> MINUS .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 128 (unop -> MINUS .)
   yacc.py:2658:    STRING          reduce using rule 128 (unop -> MINUS .)
   yacc.py:2658:    true            reduce using rule 128 (unop -> MINUS .)
   yacc.py:2658:    false           reduce using rule 128 (unop -> MINUS .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 128 (unop -> MINUS .)
   yacc.py:2658:    function        reduce using rule 128 (unop -> MINUS .)
   yacc.py:2658:    INTEGER         reduce using rule 128 (unop -> MINUS .)
   yacc.py:2658:    FLOAT           reduce using rule 128 (unop -> MINUS .)
   yacc.py:2658:    HEX             reduce using rule 128 (unop -> MINUS .)
   yacc.py:2658:    LPAREN          reduce using rule 128 (unop -> MINUS .)
   yacc.py:2658:    LCURLY          reduce using rule 128 (unop -> MINUS .)
   yacc.py:2658:    not             reduce using rule 128 (unop -> MINUS .)
   yacc.py:2658:    MINUS           reduce using rule 128 (unop -> MINUS .)
   yacc.py:2658:    HASH            reduce using rule 128 (unop -> MINUS .)
   yacc.py:2658:    ID              reduce using rule 128 (unop -> MINUS .)
   yacc.py:2658:    RESID           reduce using rule 128 (unop -> MINUS .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 29
   yacc.py:2544:
   yacc.py:2546:    (75) exp -> prefixexp .
   yacc.py:2546:    (63) var -> prefixexp . LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> prefixexp . SDOT names
   yacc.py:2546:    (27) functioncall -> prefixexp . args
   yacc.py:2546:    (28) args -> . LPAREN RPAREN
   yacc.py:2546:    (29) args -> . LPAREN explist RPAREN
   yacc.py:2546:    (30) args -> . tableconstructor
   yacc.py:2546:    (31) args -> . STRING
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2547:
   yacc.py:2637:  ! shift/reduce conflict for LPAREN resolved as shift
   yacc.py:2658:    PLUS            reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    MINUS           reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    TIMES           reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    DIVIDE          reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    POWER           reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    LT              reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    LE              reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    GT              reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    GE              reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    NE              reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    or              reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    and             reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    MODULO          reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    RPAREN          reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    then            reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    COMMA           reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    SEMI            reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    RCURLY          reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    RSQUARE         reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    return          reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    break           reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    for             reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    while           reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    repeat          reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    do              reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    function        reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    local           reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    if              reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    ID              reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    RESID           reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    $end            reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    end             reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    until           reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    elseif          reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    else            reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    LSQUARE         shift and go to state 49
   yacc.py:2658:    SDOT            shift and go to state 52
   yacc.py:2658:    LPAREN          shift and go to state 51
   yacc.py:2658:    STRING          shift and go to state 53
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2660:
   yacc.py:2667:  ! LPAREN          [ reduce using rule 75 (exp -> prefixexp .) ]
   yacc.py:2671:
   yacc.py:2685:    tableconstructor               shift and go to state 48
   yacc.py:2685:    args                           shift and go to state 50
   yacc.py:2542:
   yacc.py:2543:state 30
   yacc.py:2544:
   yacc.py:2546:    (124) prefixexp -> var .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    SDOT            reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    LPAREN          reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    STRING          reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    LCURLY          reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    do              reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    PLUS            reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    MINUS           reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    TIMES           reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    DIVIDE          reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    POWER           reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    LT              reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    LE              reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    GT              reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    GE              reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    NE              reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    CHECKEQ         reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    or              reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    and             reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    MODULO          reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    DBLDOTS         reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    COMMA           reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    $end            reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    SEMI            reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    end             reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    until           reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    elseif          reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    else            reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    RPAREN          reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    then            reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    RCURLY          reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    RSQUARE         reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    return          reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    break           reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    for             reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    while           reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    repeat          reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    function        reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    local           reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    if              reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    ID              reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    RESID           reduce using rule 124 (prefixexp -> var .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 31
   yacc.py:2544:
   yacc.py:2546:    (120) Number -> INTEGER .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    MINUS           reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    TIMES           reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    DIVIDE          reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    POWER           reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    LT              reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    LE              reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    GT              reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    GE              reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    NE              reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    CHECKEQ         reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    or              reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    and             reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    MODULO          reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    DBLDOTS         reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    COMMA           reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    $end            reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    SEMI            reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    end             reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    until           reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    elseif          reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    else            reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    RPAREN          reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    then            reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    RCURLY          reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    RSQUARE         reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    return          reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    break           reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    for             reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    while           reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    repeat          reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    do              reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    function        reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    local           reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    if              reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    LPAREN          reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    ID              reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2658:    RESID           reduce using rule 120 (Number -> INTEGER .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 32
   yacc.py:2544:
   yacc.py:2546:    (74) exp -> function .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 74 (exp -> function .)
   yacc.py:2658:    MINUS           reduce using rule 74 (exp -> function .)
   yacc.py:2658:    TIMES           reduce using rule 74 (exp -> function .)
   yacc.py:2658:    DIVIDE          reduce using rule 74 (exp -> function .)
   yacc.py:2658:    POWER           reduce using rule 74 (exp -> function .)
   yacc.py:2658:    LT              reduce using rule 74 (exp -> function .)
   yacc.py:2658:    LE              reduce using rule 74 (exp -> function .)
   yacc.py:2658:    GT              reduce using rule 74 (exp -> function .)
   yacc.py:2658:    GE              reduce using rule 74 (exp -> function .)
   yacc.py:2658:    NE              reduce using rule 74 (exp -> function .)
   yacc.py:2658:    CHECKEQ         reduce using rule 74 (exp -> function .)
   yacc.py:2658:    or              reduce using rule 74 (exp -> function .)
   yacc.py:2658:    and             reduce using rule 74 (exp -> function .)
   yacc.py:2658:    MODULO          reduce using rule 74 (exp -> function .)
   yacc.py:2658:    DBLDOTS         reduce using rule 74 (exp -> function .)
   yacc.py:2658:    RPAREN          reduce using rule 74 (exp -> function .)
   yacc.py:2658:    then            reduce using rule 74 (exp -> function .)
   yacc.py:2658:    COMMA           reduce using rule 74 (exp -> function .)
   yacc.py:2658:    SEMI            reduce using rule 74 (exp -> function .)
   yacc.py:2658:    RCURLY          reduce using rule 74 (exp -> function .)
   yacc.py:2658:    RSQUARE         reduce using rule 74 (exp -> function .)
   yacc.py:2658:    return          reduce using rule 74 (exp -> function .)
   yacc.py:2658:    break           reduce using rule 74 (exp -> function .)
   yacc.py:2658:    for             reduce using rule 74 (exp -> function .)
   yacc.py:2658:    while           reduce using rule 74 (exp -> function .)
   yacc.py:2658:    repeat          reduce using rule 74 (exp -> function .)
   yacc.py:2658:    do              reduce using rule 74 (exp -> function .)
   yacc.py:2658:    function        reduce using rule 74 (exp -> function .)
   yacc.py:2658:    local           reduce using rule 74 (exp -> function .)
   yacc.py:2658:    if              reduce using rule 74 (exp -> function .)
   yacc.py:2658:    LPAREN          reduce using rule 74 (exp -> function .)
   yacc.py:2658:    ID              reduce using rule 74 (exp -> function .)
   yacc.py:2658:    RESID           reduce using rule 74 (exp -> function .)
   yacc.py:2658:    $end            reduce using rule 74 (exp -> function .)
   yacc.py:2658:    end             reduce using rule 74 (exp -> function .)
   yacc.py:2658:    until           reduce using rule 74 (exp -> function .)
   yacc.py:2658:    elseif          reduce using rule 74 (exp -> function .)
   yacc.py:2658:    else            reduce using rule 74 (exp -> function .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 33
   yacc.py:2544:
   yacc.py:2546:    (70) exp -> STRING .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    MINUS           reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    TIMES           reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    DIVIDE          reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    POWER           reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    LT              reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    LE              reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    GT              reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    GE              reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    NE              reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    CHECKEQ         reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    or              reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    and             reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    MODULO          reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    DBLDOTS         reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    RPAREN          reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    then            reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    COMMA           reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    SEMI            reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    RCURLY          reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    RSQUARE         reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    return          reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    break           reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    for             reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    while           reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    repeat          reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    do              reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    function        reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    local           reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    if              reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    LPAREN          reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    ID              reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    RESID           reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    $end            reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    end             reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    until           reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    elseif          reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    else            reduce using rule 70 (exp -> STRING .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 34
   yacc.py:2544:
   yacc.py:2546:    (68) exp -> nil .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    MINUS           reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    TIMES           reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    DIVIDE          reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    POWER           reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    LT              reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    LE              reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    GT              reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    GE              reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    NE              reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    CHECKEQ         reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    or              reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    and             reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    MODULO          reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    DBLDOTS         reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    RPAREN          reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    then            reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    COMMA           reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    SEMI            reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    RCURLY          reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    RSQUARE         reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    return          reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    break           reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    for             reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    while           reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    repeat          reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    do              reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    function        reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    local           reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    if              reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    LPAREN          reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    ID              reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    RESID           reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    $end            reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    end             reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    until           reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    elseif          reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    else            reduce using rule 68 (exp -> nil .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 35
   yacc.py:2544:
   yacc.py:2546:    (122) Number -> HEX .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    MINUS           reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    TIMES           reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    DIVIDE          reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    POWER           reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    LT              reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    LE              reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    GT              reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    GE              reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    NE              reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    CHECKEQ         reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    or              reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    and             reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    MODULO          reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    DBLDOTS         reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    COMMA           reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    $end            reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    SEMI            reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    end             reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    until           reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    elseif          reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    else            reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    RPAREN          reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    then            reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    RCURLY          reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    RSQUARE         reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    return          reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    break           reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    for             reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    while           reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    repeat          reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    do              reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    function        reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    local           reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    if              reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    LPAREN          reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    ID              reduce using rule 122 (Number -> HEX .)
   yacc.py:2658:    RESID           reduce using rule 122 (Number -> HEX .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 36
   yacc.py:2544:
   yacc.py:2546:    (127) unop -> not .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 127 (unop -> not .)
   yacc.py:2658:    STRING          reduce using rule 127 (unop -> not .)
   yacc.py:2658:    true            reduce using rule 127 (unop -> not .)
   yacc.py:2658:    false           reduce using rule 127 (unop -> not .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 127 (unop -> not .)
   yacc.py:2658:    function        reduce using rule 127 (unop -> not .)
   yacc.py:2658:    INTEGER         reduce using rule 127 (unop -> not .)
   yacc.py:2658:    FLOAT           reduce using rule 127 (unop -> not .)
   yacc.py:2658:    HEX             reduce using rule 127 (unop -> not .)
   yacc.py:2658:    LPAREN          reduce using rule 127 (unop -> not .)
   yacc.py:2658:    LCURLY          reduce using rule 127 (unop -> not .)
   yacc.py:2658:    not             reduce using rule 127 (unop -> not .)
   yacc.py:2658:    MINUS           reduce using rule 127 (unop -> not .)
   yacc.py:2658:    HASH            reduce using rule 127 (unop -> not .)
   yacc.py:2658:    ID              reduce using rule 127 (unop -> not .)
   yacc.py:2658:    RESID           reduce using rule 127 (unop -> not .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 37
   yacc.py:2544:
   yacc.py:2546:    (71) exp -> true .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 71 (exp -> true .)
   yacc.py:2658:    MINUS           reduce using rule 71 (exp -> true .)
   yacc.py:2658:    TIMES           reduce using rule 71 (exp -> true .)
   yacc.py:2658:    DIVIDE          reduce using rule 71 (exp -> true .)
   yacc.py:2658:    POWER           reduce using rule 71 (exp -> true .)
   yacc.py:2658:    LT              reduce using rule 71 (exp -> true .)
   yacc.py:2658:    LE              reduce using rule 71 (exp -> true .)
   yacc.py:2658:    GT              reduce using rule 71 (exp -> true .)
   yacc.py:2658:    GE              reduce using rule 71 (exp -> true .)
   yacc.py:2658:    NE              reduce using rule 71 (exp -> true .)
   yacc.py:2658:    CHECKEQ         reduce using rule 71 (exp -> true .)
   yacc.py:2658:    or              reduce using rule 71 (exp -> true .)
   yacc.py:2658:    and             reduce using rule 71 (exp -> true .)
   yacc.py:2658:    MODULO          reduce using rule 71 (exp -> true .)
   yacc.py:2658:    DBLDOTS         reduce using rule 71 (exp -> true .)
   yacc.py:2658:    RPAREN          reduce using rule 71 (exp -> true .)
   yacc.py:2658:    then            reduce using rule 71 (exp -> true .)
   yacc.py:2658:    COMMA           reduce using rule 71 (exp -> true .)
   yacc.py:2658:    SEMI            reduce using rule 71 (exp -> true .)
   yacc.py:2658:    RCURLY          reduce using rule 71 (exp -> true .)
   yacc.py:2658:    RSQUARE         reduce using rule 71 (exp -> true .)
   yacc.py:2658:    return          reduce using rule 71 (exp -> true .)
   yacc.py:2658:    break           reduce using rule 71 (exp -> true .)
   yacc.py:2658:    for             reduce using rule 71 (exp -> true .)
   yacc.py:2658:    while           reduce using rule 71 (exp -> true .)
   yacc.py:2658:    repeat          reduce using rule 71 (exp -> true .)
   yacc.py:2658:    do              reduce using rule 71 (exp -> true .)
   yacc.py:2658:    function        reduce using rule 71 (exp -> true .)
   yacc.py:2658:    local           reduce using rule 71 (exp -> true .)
   yacc.py:2658:    if              reduce using rule 71 (exp -> true .)
   yacc.py:2658:    LPAREN          reduce using rule 71 (exp -> true .)
   yacc.py:2658:    ID              reduce using rule 71 (exp -> true .)
   yacc.py:2658:    RESID           reduce using rule 71 (exp -> true .)
   yacc.py:2658:    $end            reduce using rule 71 (exp -> true .)
   yacc.py:2658:    end             reduce using rule 71 (exp -> true .)
   yacc.py:2658:    until           reduce using rule 71 (exp -> true .)
   yacc.py:2658:    elseif          reduce using rule 71 (exp -> true .)
   yacc.py:2658:    else            reduce using rule 71 (exp -> true .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 38
   yacc.py:2544:
   yacc.py:2546:    (121) Number -> FLOAT .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    MINUS           reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    TIMES           reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    DIVIDE          reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    POWER           reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    LT              reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    LE              reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    GT              reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    GE              reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    NE              reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    CHECKEQ         reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    or              reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    and             reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    MODULO          reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    DBLDOTS         reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    COMMA           reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    $end            reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    SEMI            reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    end             reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    until           reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    elseif          reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    else            reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    RPAREN          reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    then            reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    RCURLY          reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    RSQUARE         reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    return          reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    break           reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    for             reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    while           reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    repeat          reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    do              reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    function        reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    local           reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    if              reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    LPAREN          reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    ID              reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2658:    RESID           reduce using rule 121 (Number -> FLOAT .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 39
   yacc.py:2544:
   yacc.py:2546:    (69) exp -> Number .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    MINUS           reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    TIMES           reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    DIVIDE          reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    POWER           reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    LT              reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    LE              reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    GT              reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    GE              reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    NE              reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    CHECKEQ         reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    or              reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    and             reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    MODULO          reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    DBLDOTS         reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    RPAREN          reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    then            reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    COMMA           reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    SEMI            reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    RCURLY          reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    RSQUARE         reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    return          reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    break           reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    for             reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    while           reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    repeat          reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    do              reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    function        reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    local           reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    if              reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    LPAREN          reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    ID              reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    RESID           reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    $end            reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    end             reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    until           reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    elseif          reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    else            reduce using rule 69 (exp -> Number .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 40
   yacc.py:2544:
   yacc.py:2546:    (126) prefixexp -> functioncall .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    SDOT            reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    LPAREN          reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    STRING          reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    LCURLY          reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    do              reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    PLUS            reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    MINUS           reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    TIMES           reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    DIVIDE          reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    POWER           reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    LT              reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    LE              reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    GT              reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    GE              reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    NE              reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    CHECKEQ         reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    or              reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    and             reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    MODULO          reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    DBLDOTS         reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    COMMA           reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    $end            reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    SEMI            reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    end             reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    until           reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    elseif          reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    else            reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    RPAREN          reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    then            reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    RCURLY          reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    RSQUARE         reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    return          reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    break           reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    for             reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    while           reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    repeat          reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    function        reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    local           reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    if              reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    ID              reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2658:    RESID           reduce using rule 126 (prefixexp -> functioncall .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 41
   yacc.py:2544:
   yacc.py:2546:    (125) prefixexp -> LPAREN exp . RPAREN
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    RPAREN          shift and go to state 95
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    or              shift and go to state 97
   yacc.py:2658:    and             shift and go to state 93
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 42
   yacc.py:2544:
   yacc.py:2546:    (93) exp -> unop . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 109
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 43
   yacc.py:2544:
   yacc.py:2546:    (73) exp -> TRPLDOTS .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    MINUS           reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    TIMES           reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    DIVIDE          reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    POWER           reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    LT              reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    LE              reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    GT              reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    GE              reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    NE              reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    CHECKEQ         reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    or              reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    and             reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    MODULO          reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    DBLDOTS         reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    RPAREN          reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    then            reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    COMMA           reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    SEMI            reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    RCURLY          reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    RSQUARE         reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    return          reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    break           reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    for             reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    while           reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    repeat          reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    do              reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    function        reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    local           reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    if              reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    LPAREN          reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    ID              reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    RESID           reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    $end            reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    end             reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    until           reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    elseif          reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    else            reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 44
   yacc.py:2544:
   yacc.py:2546:    (1) sdash -> chunk M_chunk .
   yacc.py:2546:    (5) chunk -> chunk M_chunk . stat SEMI
   yacc.py:2546:    (7) chunk -> chunk M_chunk . stat
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat block until exp
   yacc.py:2546:    (19) stat -> . do block end
   yacc.py:2546:    (20) stat -> . function funcname funcbody
   yacc.py:2546:    (21) stat -> . local function names funcbody
   yacc.py:2546:    (22) stat -> . local namelist
   yacc.py:2546:    (23) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (24) stat -> . functioncall
   yacc.py:2546:    (47) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (61) varlist -> . var comvar
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    elseif          reduce using rule 1 (sdash -> chunk M_chunk .)
   yacc.py:2658:    else            reduce using rule 1 (sdash -> chunk M_chunk .)
   yacc.py:2658:    end             reduce using rule 1 (sdash -> chunk M_chunk .)
   yacc.py:2658:    $end            reduce using rule 1 (sdash -> chunk M_chunk .)
   yacc.py:2658:    until           reduce using rule 1 (sdash -> chunk M_chunk .)
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 19
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    var                            shift and go to state 11
   yacc.py:2685:    stat                           shift and go to state 110
   yacc.py:2685:    functioncall                   shift and go to state 12
   yacc.py:2542:
   yacc.py:2543:state 45
   yacc.py:2544:
   yacc.py:2546:    (2) sdash -> chunk laststat . M_chunk
   yacc.py:2546:    (4) sdash -> chunk laststat . M_chunk SEMI
   yacc.py:2546:    (9) M_chunk -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 123 (empty -> .)
   yacc.py:2658:    $end            reduce using rule 123 (empty -> .)
   yacc.py:2658:    end             reduce using rule 123 (empty -> .)
   yacc.py:2658:    until           reduce using rule 123 (empty -> .)
   yacc.py:2658:    elseif          reduce using rule 123 (empty -> .)
   yacc.py:2658:    else            reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    M_chunk                        shift and go to state 111
   yacc.py:2685:    empty                          shift and go to state 46
   yacc.py:2542:
   yacc.py:2543:state 46
   yacc.py:2544:
   yacc.py:2546:    (9) M_chunk -> empty .
   yacc.py:2547:
   yacc.py:2658:    for             reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    while           reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    repeat          reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    do              reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    function        reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    local           reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    if              reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    ID              reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    RESID           reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    $end            reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    end             reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    until           reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    elseif          reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    else            reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    SEMI            reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 47
   yacc.py:2544:
   yacc.py:2546:    (47) stat -> if exp . M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2546:    (48) M_bool -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    or              shift and go to state 97
   yacc.py:2658:    and             shift and go to state 93
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2658:    then            reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 113
   yacc.py:2685:    M_bool                         shift and go to state 112
   yacc.py:2542:
   yacc.py:2543:state 48
   yacc.py:2544:
   yacc.py:2546:    (30) args -> tableconstructor .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    SDOT            reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    LPAREN          reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    STRING          reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    LCURLY          reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    SEMI            reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    return          reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    break           reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    for             reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    while           reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    repeat          reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    do              reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    function        reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    local           reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    if              reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    ID              reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    RESID           reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    $end            reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    end             reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    until           reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    elseif          reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    else            reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    RPAREN          reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    PLUS            reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    MINUS           reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    TIMES           reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    DIVIDE          reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    POWER           reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    LT              reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    LE              reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    GT              reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    GE              reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    NE              reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    CHECKEQ         reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    or              reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    and             reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    MODULO          reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    DBLDOTS         reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    then            reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    COMMA           reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    RCURLY          reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2658:    RSQUARE         reduce using rule 30 (args -> tableconstructor .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 49
   yacc.py:2544:
   yacc.py:2546:    (63) var -> prefixexp LSQUARE . exp RSQUARE
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 114
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 50
   yacc.py:2544:
   yacc.py:2546:    (27) functioncall -> prefixexp args .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    SDOT            reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    LPAREN          reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    STRING          reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    LCURLY          reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    COMMA           reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    $end            reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    SEMI            reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    end             reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    until           reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    elseif          reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    else            reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    PLUS            reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    MINUS           reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    TIMES           reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    DIVIDE          reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    POWER           reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    LT              reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    LE              reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    GT              reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    GE              reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    NE              reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    CHECKEQ         reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    and             reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    or              reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    MODULO          reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    DBLDOTS         reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    do              reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    then            reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    RPAREN          reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    RCURLY          reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    RSQUARE         reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    return          reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    break           reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    for             reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    while           reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    repeat          reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    function        reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    local           reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    if              reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    ID              reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2658:    RESID           reduce using rule 27 (functioncall -> prefixexp args .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 51
   yacc.py:2544:
   yacc.py:2546:    (28) args -> LPAREN . RPAREN
   yacc.py:2546:    (29) args -> LPAREN . explist RPAREN
   yacc.py:2546:    (66) explist -> . exp COMMA explist
   yacc.py:2546:    (67) explist -> . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    RPAREN          shift and go to state 115
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 117
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    explist                        shift and go to state 116
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 52
   yacc.py:2544:
   yacc.py:2546:    (64) var -> prefixexp SDOT . names
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    names                          shift and go to state 118
   yacc.py:2542:
   yacc.py:2543:state 53
   yacc.py:2544:
   yacc.py:2546:    (31) args -> STRING .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    SDOT            reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    LPAREN          reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    STRING          reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    LCURLY          reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    SEMI            reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    return          reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    break           reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    for             reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    while           reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    repeat          reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    do              reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    function        reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    local           reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    if              reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    ID              reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    RESID           reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    $end            reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    end             reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    until           reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    elseif          reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    else            reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    RPAREN          reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    PLUS            reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    MINUS           reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    TIMES           reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    DIVIDE          reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    POWER           reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    LT              reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    LE              reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    GT              reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    GE              reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    NE              reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    CHECKEQ         reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    or              reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    and             reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    MODULO          reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    DBLDOTS         reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    then            reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    COMMA           reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    RCURLY          reduce using rule 31 (args -> STRING .)
   yacc.py:2658:    RSQUARE         reduce using rule 31 (args -> STRING .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 54
   yacc.py:2544:
   yacc.py:2546:    (14) stat -> for namelist . in explist do block end
   yacc.py:2547:
   yacc.py:2658:    in              shift and go to state 119
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 55
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for names . EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> for names . EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (65) namelist -> names . comid
   yacc.py:2546:    (45) comid -> . COMMA names comid
   yacc.py:2546:    (46) comid -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    EQUALS          shift and go to state 120
   yacc.py:2658:    COMMA           shift and go to state 122
   yacc.py:2658:    in              reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 121
   yacc.py:2685:    comid                          shift and go to state 123
   yacc.py:2542:
   yacc.py:2543:state 56
   yacc.py:2544:
   yacc.py:2546:    (11) stat -> varlist EQUALS . explist
   yacc.py:2546:    (66) explist -> . exp COMMA explist
   yacc.py:2546:    (67) explist -> . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 117
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    explist                        shift and go to state 124
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 57
   yacc.py:2544:
   yacc.py:2546:    (3) sdash -> laststat M_chunk .
   yacc.py:2547:
   yacc.py:2658:    elseif          reduce using rule 3 (sdash -> laststat M_chunk .)
   yacc.py:2658:    else            reduce using rule 3 (sdash -> laststat M_chunk .)
   yacc.py:2658:    end             reduce using rule 3 (sdash -> laststat M_chunk .)
   yacc.py:2658:    $end            reduce using rule 3 (sdash -> laststat M_chunk .)
   yacc.py:2658:    until           reduce using rule 3 (sdash -> laststat M_chunk .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 58
   yacc.py:2544:
   yacc.py:2546:    (43) comvar -> COMMA . var comvar
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 125
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    var                            shift and go to state 126
   yacc.py:2542:
   yacc.py:2543:state 59
   yacc.py:2544:
   yacc.py:2546:    (61) varlist -> var comvar .
   yacc.py:2547:
   yacc.py:2658:    EQUALS          reduce using rule 61 (varlist -> var comvar .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 60
   yacc.py:2544:
   yacc.py:2546:    (44) comvar -> empty .
   yacc.py:2547:
   yacc.py:2658:    EQUALS          reduce using rule 44 (comvar -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 61
   yacc.py:2544:
   yacc.py:2546:    (10) block -> sdash .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 10 (block -> sdash .)
   yacc.py:2658:    elseif          reduce using rule 10 (block -> sdash .)
   yacc.py:2658:    else            reduce using rule 10 (block -> sdash .)
   yacc.py:2658:    until           reduce using rule 10 (block -> sdash .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 62
   yacc.py:2544:
   yacc.py:2546:    (19) stat -> do block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 127
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 63
   yacc.py:2544:
   yacc.py:2546:    (6) chunk -> stat SEMI .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    break           reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    for             reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    while           reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    repeat          reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    do              reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    function        reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    local           reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    if              reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    LPAREN          reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    ID              reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    RESID           reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    end             reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    elseif          reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    else            reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    until           reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    $end            reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 64
   yacc.py:2544:
   yacc.py:2546:    (18) stat -> repeat block . until exp
   yacc.py:2547:
   yacc.py:2658:    until           shift and go to state 128
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 65
   yacc.py:2544:
   yacc.py:2546:    (118) retexp -> tableconstructor .
   yacc.py:2546:    (92) exp -> tableconstructor .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 118 (retexp -> tableconstructor .)
   yacc.py:2658:    $end            reduce using rule 118 (retexp -> tableconstructor .)
   yacc.py:2658:    SEMI            reduce using rule 118 (retexp -> tableconstructor .)
   yacc.py:2658:    end             reduce using rule 118 (retexp -> tableconstructor .)
   yacc.py:2658:    until           reduce using rule 118 (retexp -> tableconstructor .)
   yacc.py:2658:    elseif          reduce using rule 118 (retexp -> tableconstructor .)
   yacc.py:2658:    else            reduce using rule 118 (retexp -> tableconstructor .)
   yacc.py:2658:    PLUS            reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    MINUS           reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    TIMES           reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    DIVIDE          reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    POWER           reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    LT              reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    LE              reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    GT              reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    GE              reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    NE              reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    CHECKEQ         reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    and             reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    or              reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    MODULO          reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2658:    DBLDOTS         reduce using rule 92 (exp -> tableconstructor .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 66
   yacc.py:2544:
   yacc.py:2546:    (100) retexp -> false .
   yacc.py:2546:    (72) exp -> false .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 100 (retexp -> false .)
   yacc.py:2658:    $end            reduce using rule 100 (retexp -> false .)
   yacc.py:2658:    SEMI            reduce using rule 100 (retexp -> false .)
   yacc.py:2658:    end             reduce using rule 100 (retexp -> false .)
   yacc.py:2658:    until           reduce using rule 100 (retexp -> false .)
   yacc.py:2658:    elseif          reduce using rule 100 (retexp -> false .)
   yacc.py:2658:    else            reduce using rule 100 (retexp -> false .)
   yacc.py:2658:    PLUS            reduce using rule 72 (exp -> false .)
   yacc.py:2658:    MINUS           reduce using rule 72 (exp -> false .)
   yacc.py:2658:    TIMES           reduce using rule 72 (exp -> false .)
   yacc.py:2658:    DIVIDE          reduce using rule 72 (exp -> false .)
   yacc.py:2658:    POWER           reduce using rule 72 (exp -> false .)
   yacc.py:2658:    LT              reduce using rule 72 (exp -> false .)
   yacc.py:2658:    LE              reduce using rule 72 (exp -> false .)
   yacc.py:2658:    GT              reduce using rule 72 (exp -> false .)
   yacc.py:2658:    GE              reduce using rule 72 (exp -> false .)
   yacc.py:2658:    NE              reduce using rule 72 (exp -> false .)
   yacc.py:2658:    CHECKEQ         reduce using rule 72 (exp -> false .)
   yacc.py:2658:    and             reduce using rule 72 (exp -> false .)
   yacc.py:2658:    or              reduce using rule 72 (exp -> false .)
   yacc.py:2658:    MODULO          reduce using rule 72 (exp -> false .)
   yacc.py:2658:    DBLDOTS         reduce using rule 72 (exp -> false .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 67
   yacc.py:2544:
   yacc.py:2546:    (101) retexp -> TRPLDOTS .
   yacc.py:2546:    (73) exp -> TRPLDOTS .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 101 (retexp -> TRPLDOTS .)
   yacc.py:2658:    $end            reduce using rule 101 (retexp -> TRPLDOTS .)
   yacc.py:2658:    SEMI            reduce using rule 101 (retexp -> TRPLDOTS .)
   yacc.py:2658:    end             reduce using rule 101 (retexp -> TRPLDOTS .)
   yacc.py:2658:    until           reduce using rule 101 (retexp -> TRPLDOTS .)
   yacc.py:2658:    elseif          reduce using rule 101 (retexp -> TRPLDOTS .)
   yacc.py:2658:    else            reduce using rule 101 (retexp -> TRPLDOTS .)
   yacc.py:2658:    PLUS            reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    MINUS           reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    TIMES           reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    DIVIDE          reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    POWER           reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    LT              reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    LE              reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    GT              reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    GE              reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    NE              reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    CHECKEQ         reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    and             reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    or              reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    MODULO          reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2658:    DBLDOTS         reduce using rule 73 (exp -> TRPLDOTS .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 68
   yacc.py:2544:
   yacc.py:2546:    (102) retexp -> prefixexp .
   yacc.py:2546:    (75) exp -> prefixexp .
   yacc.py:2546:    (63) var -> prefixexp . LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> prefixexp . SDOT names
   yacc.py:2546:    (27) functioncall -> prefixexp . args
   yacc.py:2546:    (28) args -> . LPAREN RPAREN
   yacc.py:2546:    (29) args -> . LPAREN explist RPAREN
   yacc.py:2546:    (30) args -> . tableconstructor
   yacc.py:2546:    (31) args -> . STRING
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 102 (retexp -> prefixexp .)
   yacc.py:2658:    $end            reduce using rule 102 (retexp -> prefixexp .)
   yacc.py:2658:    SEMI            reduce using rule 102 (retexp -> prefixexp .)
   yacc.py:2658:    end             reduce using rule 102 (retexp -> prefixexp .)
   yacc.py:2658:    until           reduce using rule 102 (retexp -> prefixexp .)
   yacc.py:2658:    elseif          reduce using rule 102 (retexp -> prefixexp .)
   yacc.py:2658:    else            reduce using rule 102 (retexp -> prefixexp .)
   yacc.py:2658:    PLUS            reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    MINUS           reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    TIMES           reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    DIVIDE          reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    POWER           reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    LT              reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    LE              reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    GT              reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    GE              reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    NE              reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    and             reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    or              reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    MODULO          reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 75 (exp -> prefixexp .)
   yacc.py:2658:    LSQUARE         shift and go to state 49
   yacc.py:2658:    SDOT            shift and go to state 52
   yacc.py:2658:    LPAREN          shift and go to state 51
   yacc.py:2658:    STRING          shift and go to state 53
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2660:
   yacc.py:2685:    tableconstructor               shift and go to state 48
   yacc.py:2685:    args                           shift and go to state 50
   yacc.py:2542:
   yacc.py:2543:state 69
   yacc.py:2544:
   yacc.py:2546:    (95) retexplist -> retexp .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 95 (retexplist -> retexp .)
   yacc.py:2658:    $end            reduce using rule 95 (retexplist -> retexp .)
   yacc.py:2658:    SEMI            reduce using rule 95 (retexplist -> retexp .)
   yacc.py:2658:    end             reduce using rule 95 (retexplist -> retexp .)
   yacc.py:2658:    until           reduce using rule 95 (retexplist -> retexp .)
   yacc.py:2658:    elseif          reduce using rule 95 (retexplist -> retexp .)
   yacc.py:2658:    else            reduce using rule 95 (retexplist -> retexp .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 70
   yacc.py:2544:
   yacc.py:2546:    (98) retexp -> STRING .
   yacc.py:2546:    (70) exp -> STRING .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 98 (retexp -> STRING .)
   yacc.py:2658:    $end            reduce using rule 98 (retexp -> STRING .)
   yacc.py:2658:    SEMI            reduce using rule 98 (retexp -> STRING .)
   yacc.py:2658:    end             reduce using rule 98 (retexp -> STRING .)
   yacc.py:2658:    until           reduce using rule 98 (retexp -> STRING .)
   yacc.py:2658:    elseif          reduce using rule 98 (retexp -> STRING .)
   yacc.py:2658:    else            reduce using rule 98 (retexp -> STRING .)
   yacc.py:2658:    PLUS            reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    MINUS           reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    TIMES           reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    DIVIDE          reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    POWER           reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    LT              reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    LE              reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    GT              reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    GE              reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    NE              reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    CHECKEQ         reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    and             reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    or              reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    MODULO          reduce using rule 70 (exp -> STRING .)
   yacc.py:2658:    DBLDOTS         reduce using rule 70 (exp -> STRING .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 71
   yacc.py:2544:
   yacc.py:2546:    (96) retexp -> nil .
   yacc.py:2546:    (68) exp -> nil .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 96 (retexp -> nil .)
   yacc.py:2658:    $end            reduce using rule 96 (retexp -> nil .)
   yacc.py:2658:    SEMI            reduce using rule 96 (retexp -> nil .)
   yacc.py:2658:    end             reduce using rule 96 (retexp -> nil .)
   yacc.py:2658:    until           reduce using rule 96 (retexp -> nil .)
   yacc.py:2658:    elseif          reduce using rule 96 (retexp -> nil .)
   yacc.py:2658:    else            reduce using rule 96 (retexp -> nil .)
   yacc.py:2658:    PLUS            reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    MINUS           reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    TIMES           reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    DIVIDE          reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    POWER           reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    LT              reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    LE              reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    GT              reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    GE              reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    NE              reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    CHECKEQ         reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    and             reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    or              reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    MODULO          reduce using rule 68 (exp -> nil .)
   yacc.py:2658:    DBLDOTS         reduce using rule 68 (exp -> nil .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 72
   yacc.py:2544:
   yacc.py:2546:    (99) retexp -> true .
   yacc.py:2546:    (71) exp -> true .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 99 (retexp -> true .)
   yacc.py:2658:    $end            reduce using rule 99 (retexp -> true .)
   yacc.py:2658:    SEMI            reduce using rule 99 (retexp -> true .)
   yacc.py:2658:    end             reduce using rule 99 (retexp -> true .)
   yacc.py:2658:    until           reduce using rule 99 (retexp -> true .)
   yacc.py:2658:    elseif          reduce using rule 99 (retexp -> true .)
   yacc.py:2658:    else            reduce using rule 99 (retexp -> true .)
   yacc.py:2658:    PLUS            reduce using rule 71 (exp -> true .)
   yacc.py:2658:    MINUS           reduce using rule 71 (exp -> true .)
   yacc.py:2658:    TIMES           reduce using rule 71 (exp -> true .)
   yacc.py:2658:    DIVIDE          reduce using rule 71 (exp -> true .)
   yacc.py:2658:    POWER           reduce using rule 71 (exp -> true .)
   yacc.py:2658:    LT              reduce using rule 71 (exp -> true .)
   yacc.py:2658:    LE              reduce using rule 71 (exp -> true .)
   yacc.py:2658:    GT              reduce using rule 71 (exp -> true .)
   yacc.py:2658:    GE              reduce using rule 71 (exp -> true .)
   yacc.py:2658:    NE              reduce using rule 71 (exp -> true .)
   yacc.py:2658:    CHECKEQ         reduce using rule 71 (exp -> true .)
   yacc.py:2658:    and             reduce using rule 71 (exp -> true .)
   yacc.py:2658:    or              reduce using rule 71 (exp -> true .)
   yacc.py:2658:    MODULO          reduce using rule 71 (exp -> true .)
   yacc.py:2658:    DBLDOTS         reduce using rule 71 (exp -> true .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 73
   yacc.py:2544:
   yacc.py:2546:    (97) retexp -> Number .
   yacc.py:2546:    (69) exp -> Number .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 97 (retexp -> Number .)
   yacc.py:2658:    $end            reduce using rule 97 (retexp -> Number .)
   yacc.py:2658:    SEMI            reduce using rule 97 (retexp -> Number .)
   yacc.py:2658:    end             reduce using rule 97 (retexp -> Number .)
   yacc.py:2658:    until           reduce using rule 97 (retexp -> Number .)
   yacc.py:2658:    elseif          reduce using rule 97 (retexp -> Number .)
   yacc.py:2658:    else            reduce using rule 97 (retexp -> Number .)
   yacc.py:2658:    PLUS            reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    MINUS           reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    TIMES           reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    DIVIDE          reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    POWER           reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    LT              reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    LE              reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    GT              reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    GE              reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    NE              reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    CHECKEQ         reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    and             reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    or              reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    MODULO          reduce using rule 69 (exp -> Number .)
   yacc.py:2658:    DBLDOTS         reduce using rule 69 (exp -> Number .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 74
   yacc.py:2544:
   yacc.py:2546:    (36) laststat -> return retexplist .
   yacc.py:2546:    (94) retexplist -> retexplist . COMMA retexp
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 36 (laststat -> return retexplist .)
   yacc.py:2658:    elseif          reduce using rule 36 (laststat -> return retexplist .)
   yacc.py:2658:    else            reduce using rule 36 (laststat -> return retexplist .)
   yacc.py:2658:    SEMI            reduce using rule 36 (laststat -> return retexplist .)
   yacc.py:2658:    $end            reduce using rule 36 (laststat -> return retexplist .)
   yacc.py:2658:    until           reduce using rule 36 (laststat -> return retexplist .)
   yacc.py:2658:    COMMA           shift and go to state 129
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 75
   yacc.py:2544:
   yacc.py:2546:    (103) retexp -> exp . PLUS exp
   yacc.py:2546:    (104) retexp -> exp . MINUS exp
   yacc.py:2546:    (105) retexp -> exp . TIMES exp
   yacc.py:2546:    (106) retexp -> exp . DIVIDE exp
   yacc.py:2546:    (107) retexp -> exp . POWER exp
   yacc.py:2546:    (108) retexp -> exp . LT exp
   yacc.py:2546:    (109) retexp -> exp . LE exp
   yacc.py:2546:    (110) retexp -> exp . GT exp
   yacc.py:2546:    (111) retexp -> exp . GE exp
   yacc.py:2546:    (112) retexp -> exp . NE exp
   yacc.py:2546:    (113) retexp -> exp . CHECKEQ exp
   yacc.py:2546:    (114) retexp -> exp . and M_andor exp
   yacc.py:2546:    (115) retexp -> exp . or M_andor exp
   yacc.py:2546:    (116) retexp -> exp . MODULO exp
   yacc.py:2546:    (117) retexp -> exp . DBLDOTS exp
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            shift and go to state 141
   yacc.py:2658:    MINUS           shift and go to state 143
   yacc.py:2658:    TIMES           shift and go to state 137
   yacc.py:2658:    DIVIDE          shift and go to state 133
   yacc.py:2658:    POWER           shift and go to state 134
   yacc.py:2658:    LT              shift and go to state 139
   yacc.py:2658:    LE              shift and go to state 131
   yacc.py:2658:    GT              shift and go to state 140
   yacc.py:2658:    GE              shift and go to state 136
   yacc.py:2658:    NE              shift and go to state 144
   yacc.py:2658:    CHECKEQ         shift and go to state 138
   yacc.py:2658:    and             shift and go to state 130
   yacc.py:2658:    or              shift and go to state 135
   yacc.py:2658:    MODULO          shift and go to state 132
   yacc.py:2658:    DBLDOTS         shift and go to state 142
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 76
   yacc.py:2544:
   yacc.py:2546:    (119) retexp -> unop . exp
   yacc.py:2546:    (93) exp -> unop . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 145
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 77
   yacc.py:2544:
   yacc.py:2546:    (21) stat -> local function . names funcbody
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    names                          shift and go to state 146
   yacc.py:2542:
   yacc.py:2543:state 78
   yacc.py:2544:
   yacc.py:2546:    (22) stat -> local namelist .
   yacc.py:2546:    (23) stat -> local namelist . EQUALS explist
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    return          reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    break           reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    for             reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    while           reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    repeat          reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    do              reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    function        reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    local           reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    if              reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    LPAREN          reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    ID              reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    RESID           reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    end             reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    $end            reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    until           reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    elseif          reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    else            reduce using rule 22 (stat -> local namelist .)
   yacc.py:2658:    EQUALS          shift and go to state 147
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 79
   yacc.py:2544:
   yacc.py:2546:    (65) namelist -> names . comid
   yacc.py:2546:    (45) comid -> . COMMA names comid
   yacc.py:2546:    (46) comid -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    COMMA           shift and go to state 122
   yacc.py:2658:    EQUALS          reduce using rule 123 (empty -> .)
   yacc.py:2658:    SEMI            reduce using rule 123 (empty -> .)
   yacc.py:2658:    return          reduce using rule 123 (empty -> .)
   yacc.py:2658:    break           reduce using rule 123 (empty -> .)
   yacc.py:2658:    for             reduce using rule 123 (empty -> .)
   yacc.py:2658:    while           reduce using rule 123 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 123 (empty -> .)
   yacc.py:2658:    do              reduce using rule 123 (empty -> .)
   yacc.py:2658:    function        reduce using rule 123 (empty -> .)
   yacc.py:2658:    local           reduce using rule 123 (empty -> .)
   yacc.py:2658:    if              reduce using rule 123 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 123 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 123 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 123 (empty -> .)
   yacc.py:2658:    $end            reduce using rule 123 (empty -> .)
   yacc.py:2658:    end             reduce using rule 123 (empty -> .)
   yacc.py:2658:    until           reduce using rule 123 (empty -> .)
   yacc.py:2658:    elseif          reduce using rule 123 (empty -> .)
   yacc.py:2658:    else            reduce using rule 123 (empty -> .)
   yacc.py:2658:    RPAREN          reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2667:  ! COMMA           [ reduce using rule 123 (empty -> .) ]
   yacc.py:2671:
   yacc.py:2685:    empty                          shift and go to state 121
   yacc.py:2685:    comid                          shift and go to state 123
   yacc.py:2542:
   yacc.py:2543:state 80
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> while M_while1 . exp do M_while2 block end
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 148
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 81
   yacc.py:2544:
   yacc.py:2546:    (16) M_while1 -> empty .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    STRING          reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    true            reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    false           reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    function        reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    INTEGER         reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    FLOAT           reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    HEX             reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    LCURLY          reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    not             reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    MINUS           reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    HASH            reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    ID              reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    RESID           reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 82
   yacc.py:2544:
   yacc.py:2546:    (20) stat -> function funcname funcbody .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2658:    return          reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2658:    break           reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2658:    for             reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2658:    while           reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2658:    repeat          reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2658:    do              reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2658:    function        reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2658:    local           reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2658:    if              reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2658:    LPAREN          reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2658:    ID              reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2658:    RESID           reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2658:    end             reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2658:    $end            reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2658:    until           reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2658:    elseif          reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2658:    else            reduce using rule 20 (stat -> function funcname funcbody .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 83
   yacc.py:2544:
   yacc.py:2546:    (25) funcbody -> LPAREN . RPAREN block end
   yacc.py:2546:    (26) funcbody -> LPAREN . parlist RPAREN block end
   yacc.py:2546:    (32) parlist -> . namelist
   yacc.py:2546:    (33) parlist -> . namelist comtrp
   yacc.py:2546:    (34) parlist -> . TRPLDOTS
   yacc.py:2546:    (65) namelist -> . names comid
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    RPAREN          shift and go to state 152
   yacc.py:2658:    TRPLDOTS        shift and go to state 150
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    namelist                       shift and go to state 149
   yacc.py:2685:    parlist                        shift and go to state 151
   yacc.py:2685:    names                          shift and go to state 79
   yacc.py:2542:
   yacc.py:2543:state 84
   yacc.py:2544:
   yacc.py:2546:    (41) dotid -> SDOT . names dotid
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    names                          shift and go to state 153
   yacc.py:2542:
   yacc.py:2543:state 85
   yacc.py:2544:
   yacc.py:2546:    (39) funcname -> names dotid . COLON
   yacc.py:2547:
   yacc.py:2658:    COLON           shift and go to state 154
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 86
   yacc.py:2544:
   yacc.py:2546:    (42) dotid -> empty .
   yacc.py:2547:
   yacc.py:2658:    COLON           reduce using rule 42 (dotid -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 87
   yacc.py:2544:
   yacc.py:2546:    (137) field -> names . EQUALS exp
   yacc.py:2546:    (62) var -> names .
   yacc.py:2547:
   yacc.py:2658:    EQUALS          shift and go to state 155
   yacc.py:2658:    LSQUARE         reduce using rule 62 (var -> names .)
   yacc.py:2658:    SDOT            reduce using rule 62 (var -> names .)
   yacc.py:2658:    LPAREN          reduce using rule 62 (var -> names .)
   yacc.py:2658:    STRING          reduce using rule 62 (var -> names .)
   yacc.py:2658:    LCURLY          reduce using rule 62 (var -> names .)
   yacc.py:2658:    PLUS            reduce using rule 62 (var -> names .)
   yacc.py:2658:    MINUS           reduce using rule 62 (var -> names .)
   yacc.py:2658:    TIMES           reduce using rule 62 (var -> names .)
   yacc.py:2658:    DIVIDE          reduce using rule 62 (var -> names .)
   yacc.py:2658:    POWER           reduce using rule 62 (var -> names .)
   yacc.py:2658:    LT              reduce using rule 62 (var -> names .)
   yacc.py:2658:    LE              reduce using rule 62 (var -> names .)
   yacc.py:2658:    GT              reduce using rule 62 (var -> names .)
   yacc.py:2658:    GE              reduce using rule 62 (var -> names .)
   yacc.py:2658:    NE              reduce using rule 62 (var -> names .)
   yacc.py:2658:    CHECKEQ         reduce using rule 62 (var -> names .)
   yacc.py:2658:    or              reduce using rule 62 (var -> names .)
   yacc.py:2658:    and             reduce using rule 62 (var -> names .)
   yacc.py:2658:    MODULO          reduce using rule 62 (var -> names .)
   yacc.py:2658:    DBLDOTS         reduce using rule 62 (var -> names .)
   yacc.py:2658:    COMMA           reduce using rule 62 (var -> names .)
   yacc.py:2658:    SEMI            reduce using rule 62 (var -> names .)
   yacc.py:2658:    RCURLY          reduce using rule 62 (var -> names .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 88
   yacc.py:2544:
   yacc.py:2546:    (131) tableconstructor -> LCURLY RCURLY .
   yacc.py:2547:
   yacc.py:2658:    RSQUARE         reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    PLUS            reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    MINUS           reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    TIMES           reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    DIVIDE          reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    POWER           reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    LT              reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    LE              reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    GT              reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    GE              reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    NE              reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    CHECKEQ         reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    or              reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    and             reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    MODULO          reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    DBLDOTS         reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    COMMA           reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    $end            reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    SEMI            reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    end             reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    until           reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    elseif          reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    else            reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    RPAREN          reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    then            reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    RCURLY          reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    return          reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    break           reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    for             reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    while           reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    repeat          reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    do              reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    function        reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    local           reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    if              reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    LPAREN          reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    ID              reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    RESID           reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    LSQUARE         reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    SDOT            reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    STRING          reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    LCURLY          reduce using rule 131 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 89
   yacc.py:2544:
   yacc.py:2546:    (132) fieldlist -> field . fieldseplist fieldsep
   yacc.py:2546:    (133) fieldlist -> field . fieldseplist
   yacc.py:2546:    (134) fieldseplist -> . fieldseplist fieldsep field
   yacc.py:2546:    (135) fieldseplist -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 123 (empty -> .)
   yacc.py:2658:    SEMI            reduce using rule 123 (empty -> .)
   yacc.py:2658:    RCURLY          reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    fieldseplist                   shift and go to state 156
   yacc.py:2685:    empty                          shift and go to state 157
   yacc.py:2542:
   yacc.py:2543:state 90
   yacc.py:2544:
   yacc.py:2546:    (130) tableconstructor -> LCURLY fieldlist . RCURLY
   yacc.py:2547:
   yacc.py:2658:    RCURLY          shift and go to state 158
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 91
   yacc.py:2544:
   yacc.py:2546:    (138) field -> exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 138 (field -> exp .)
   yacc.py:2658:    SEMI            reduce using rule 138 (field -> exp .)
   yacc.py:2658:    RCURLY          reduce using rule 138 (field -> exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    or              shift and go to state 97
   yacc.py:2658:    and             shift and go to state 93
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 92
   yacc.py:2544:
   yacc.py:2546:    (136) field -> LSQUARE . exp RSQUARE EQUALS exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 159
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 93
   yacc.py:2544:
   yacc.py:2546:    (88) exp -> exp and . M_andor exp
   yacc.py:2546:    (89) M_andor -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 123 (empty -> .)
   yacc.py:2658:    STRING          reduce using rule 123 (empty -> .)
   yacc.py:2658:    true            reduce using rule 123 (empty -> .)
   yacc.py:2658:    false           reduce using rule 123 (empty -> .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 123 (empty -> .)
   yacc.py:2658:    function        reduce using rule 123 (empty -> .)
   yacc.py:2658:    INTEGER         reduce using rule 123 (empty -> .)
   yacc.py:2658:    FLOAT           reduce using rule 123 (empty -> .)
   yacc.py:2658:    HEX             reduce using rule 123 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 123 (empty -> .)
   yacc.py:2658:    LCURLY          reduce using rule 123 (empty -> .)
   yacc.py:2658:    not             reduce using rule 123 (empty -> .)
   yacc.py:2658:    MINUS           reduce using rule 123 (empty -> .)
   yacc.py:2658:    HASH            reduce using rule 123 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 123 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 160
   yacc.py:2685:    M_andor                        shift and go to state 161
   yacc.py:2542:
   yacc.py:2543:state 94
   yacc.py:2544:
   yacc.py:2546:    (82) exp -> exp LE . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 162
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 95
   yacc.py:2544:
   yacc.py:2546:    (125) prefixexp -> LPAREN exp RPAREN .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    SDOT            reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    LPAREN          reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    STRING          reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    LCURLY          reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    do              reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    PLUS            reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    MINUS           reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    TIMES           reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    DIVIDE          reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    POWER           reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    LT              reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    LE              reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    GT              reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    GE              reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    NE              reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    CHECKEQ         reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    or              reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    and             reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    MODULO          reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    DBLDOTS         reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    COMMA           reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    $end            reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    SEMI            reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    end             reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    until           reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    elseif          reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    else            reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    RPAREN          reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    then            reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    RCURLY          reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    RSQUARE         reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    return          reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    break           reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    for             reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    while           reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    repeat          reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    function        reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    local           reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    if              reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    ID              reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    RESID           reduce using rule 125 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 96
   yacc.py:2544:
   yacc.py:2546:    (80) exp -> exp POWER . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 163
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 97
   yacc.py:2544:
   yacc.py:2546:    (87) exp -> exp or . M_andor exp
   yacc.py:2546:    (89) M_andor -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 123 (empty -> .)
   yacc.py:2658:    STRING          reduce using rule 123 (empty -> .)
   yacc.py:2658:    true            reduce using rule 123 (empty -> .)
   yacc.py:2658:    false           reduce using rule 123 (empty -> .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 123 (empty -> .)
   yacc.py:2658:    function        reduce using rule 123 (empty -> .)
   yacc.py:2658:    INTEGER         reduce using rule 123 (empty -> .)
   yacc.py:2658:    FLOAT           reduce using rule 123 (empty -> .)
   yacc.py:2658:    HEX             reduce using rule 123 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 123 (empty -> .)
   yacc.py:2658:    LCURLY          reduce using rule 123 (empty -> .)
   yacc.py:2658:    not             reduce using rule 123 (empty -> .)
   yacc.py:2658:    MINUS           reduce using rule 123 (empty -> .)
   yacc.py:2658:    HASH            reduce using rule 123 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 123 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 160
   yacc.py:2685:    M_andor                        shift and go to state 164
   yacc.py:2542:
   yacc.py:2543:state 98
   yacc.py:2544:
   yacc.py:2546:    (84) exp -> exp GE . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 165
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 99
   yacc.py:2544:
   yacc.py:2546:    (78) exp -> exp TIMES . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 166
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 100
   yacc.py:2544:
   yacc.py:2546:    (86) exp -> exp CHECKEQ . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 167
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 101
   yacc.py:2544:
   yacc.py:2546:    (81) exp -> exp LT . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 168
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 102
   yacc.py:2544:
   yacc.py:2546:    (83) exp -> exp GT . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 169
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 103
   yacc.py:2544:
   yacc.py:2546:    (76) exp -> exp PLUS . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 170
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 104
   yacc.py:2544:
   yacc.py:2546:    (90) exp -> exp MODULO . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 171
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 105
   yacc.py:2544:
   yacc.py:2546:    (91) exp -> exp DBLDOTS . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 172
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 106
   yacc.py:2544:
   yacc.py:2546:    (77) exp -> exp MINUS . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 173
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 107
   yacc.py:2544:
   yacc.py:2546:    (85) exp -> exp NE . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 174
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 108
   yacc.py:2544:
   yacc.py:2546:    (79) exp -> exp DIVIDE . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 175
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 109
   yacc.py:2544:
   yacc.py:2546:    (93) exp -> unop exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    MINUS           reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    TIMES           reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    LT              reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    LE              reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    GT              reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    GE              reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    NE              reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    or              reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    and             reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    MODULO          reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    RPAREN          reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    then            reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    COMMA           reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    SEMI            reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    RCURLY          reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    return          reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    break           reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    for             reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    while           reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    repeat          reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    do              reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    function        reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    local           reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    if              reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    LPAREN          reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    ID              reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    RESID           reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    $end            reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    end             reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    until           reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    elseif          reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    else            reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 93 (exp -> unop exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 103 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 106 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 99 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 108 ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 104 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 105 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 110
   yacc.py:2544:
   yacc.py:2546:    (5) chunk -> chunk M_chunk stat . SEMI
   yacc.py:2546:    (7) chunk -> chunk M_chunk stat .
   yacc.py:2547:
   yacc.py:2658:    SEMI            shift and go to state 176
   yacc.py:2658:    return          reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    break           reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    for             reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    while           reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    repeat          reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    do              reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    function        reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    local           reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    if              reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    LPAREN          reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    ID              reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    RESID           reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    end             reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    elseif          reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    else            reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    until           reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    $end            reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 111
   yacc.py:2544:
   yacc.py:2546:    (2) sdash -> chunk laststat M_chunk .
   yacc.py:2546:    (4) sdash -> chunk laststat M_chunk . SEMI
   yacc.py:2547:
   yacc.py:2658:    elseif          reduce using rule 2 (sdash -> chunk laststat M_chunk .)
   yacc.py:2658:    else            reduce using rule 2 (sdash -> chunk laststat M_chunk .)
   yacc.py:2658:    end             reduce using rule 2 (sdash -> chunk laststat M_chunk .)
   yacc.py:2658:    $end            reduce using rule 2 (sdash -> chunk laststat M_chunk .)
   yacc.py:2658:    until           reduce using rule 2 (sdash -> chunk laststat M_chunk .)
   yacc.py:2658:    SEMI            shift and go to state 177
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 112
   yacc.py:2544:
   yacc.py:2546:    (47) stat -> if exp M_bool . then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2547:
   yacc.py:2658:    then            shift and go to state 178
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 113
   yacc.py:2544:
   yacc.py:2546:    (48) M_bool -> empty .
   yacc.py:2547:
   yacc.py:2658:    then            reduce using rule 48 (M_bool -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 114
   yacc.py:2544:
   yacc.py:2546:    (63) var -> prefixexp LSQUARE exp . RSQUARE
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    RSQUARE         shift and go to state 179
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    or              shift and go to state 97
   yacc.py:2658:    and             shift and go to state 93
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 115
   yacc.py:2544:
   yacc.py:2546:    (28) args -> LPAREN RPAREN .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    SDOT            reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    LPAREN          reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    STRING          reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    LCURLY          reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    SEMI            reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    return          reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    break           reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    for             reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    while           reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    repeat          reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    do              reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    function        reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    local           reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    if              reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    ID              reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    RESID           reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    $end            reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    end             reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    until           reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    elseif          reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    else            reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    RPAREN          reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    PLUS            reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    MINUS           reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    TIMES           reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    DIVIDE          reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    POWER           reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    LT              reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    LE              reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    GT              reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    GE              reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    NE              reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    CHECKEQ         reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    or              reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    and             reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    MODULO          reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    DBLDOTS         reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    then            reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    COMMA           reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    RCURLY          reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2658:    RSQUARE         reduce using rule 28 (args -> LPAREN RPAREN .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 116
   yacc.py:2544:
   yacc.py:2546:    (29) args -> LPAREN explist . RPAREN
   yacc.py:2547:
   yacc.py:2658:    RPAREN          shift and go to state 180
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 117
   yacc.py:2544:
   yacc.py:2546:    (66) explist -> exp . COMMA explist
   yacc.py:2546:    (67) explist -> exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           shift and go to state 181
   yacc.py:2658:    SEMI            reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    return          reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    break           reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    for             reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    while           reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    repeat          reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    do              reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    function        reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    local           reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    if              reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    LPAREN          reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    ID              reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    RESID           reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    $end            reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    end             reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    until           reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    elseif          reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    else            reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    RPAREN          reduce using rule 67 (explist -> exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    or              shift and go to state 97
   yacc.py:2658:    and             shift and go to state 93
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 118
   yacc.py:2544:
   yacc.py:2546:    (64) var -> prefixexp SDOT names .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    SDOT            reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    LPAREN          reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    STRING          reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    LCURLY          reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    PLUS            reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    MINUS           reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    TIMES           reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    DIVIDE          reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    POWER           reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    LT              reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    LE              reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    GT              reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    GE              reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    NE              reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    CHECKEQ         reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    or              reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    and             reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    MODULO          reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    DBLDOTS         reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    RPAREN          reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    then            reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    COMMA           reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    SEMI            reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    RCURLY          reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    RSQUARE         reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    return          reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    break           reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    for             reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    while           reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    repeat          reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    do              reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    function        reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    local           reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    if              reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    ID              reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    RESID           reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    $end            reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    end             reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    until           reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    elseif          reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    else            reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2658:    EQUALS          reduce using rule 64 (var -> prefixexp SDOT names .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 119
   yacc.py:2544:
   yacc.py:2546:    (14) stat -> for namelist in . explist do block end
   yacc.py:2546:    (66) explist -> . exp COMMA explist
   yacc.py:2546:    (67) explist -> . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 117
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    explist                        shift and go to state 182
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 120
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for names EQUALS . exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> for names EQUALS . exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    exp                            shift and go to state 183
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2542:
   yacc.py:2543:state 121
   yacc.py:2544:
   yacc.py:2546:    (46) comid -> empty .
   yacc.py:2547:
   yacc.py:2658:    in              reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    EQUALS          reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    SEMI            reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    return          reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    break           reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    for             reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    while           reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    repeat          reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    do              reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    function        reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    local           reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    if              reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    ID              reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    RESID           reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    $end            reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    end             reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    until           reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    elseif          reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    else            reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    COMMA           reduce using rule 46 (comid -> empty .)
   yacc.py:2658:    RPAREN          reduce using rule 46 (comid -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 122
   yacc.py:2544:
   yacc.py:2546:    (45) comid -> COMMA . names comid
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    names                          shift and go to state 184
   yacc.py:2542:
   yacc.py:2543:state 123
   yacc.py:2544:
   yacc.py:2546:    (65) namelist -> names comid .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    RPAREN          reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    EQUALS          reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    SEMI            reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    return          reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    break           reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    for             reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    while           reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    repeat          reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    do              reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    function        reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    local           reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    if              reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    LPAREN          reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    ID              reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    RESID           reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    $end            reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    end             reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    until           reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    elseif          reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    else            reduce using rule 65 (namelist -> names comid .)
   yacc.py:2658:    in              reduce using rule 65 (namelist -> names comid .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 124
   yacc.py:2544:
   yacc.py:2546:    (11) stat -> varlist EQUALS explist .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    return          reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    break           reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    for             reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    while           reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    repeat          reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    do              reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    function        reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    local           reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    if              reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    LPAREN          reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    ID              reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    RESID           reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    end             reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    $end            reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    until           reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    elseif          reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    else            reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 125
   yacc.py:2544:
   yacc.py:2546:    (63) var -> prefixexp . LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> prefixexp . SDOT names
   yacc.py:2546:    (27) functioncall -> prefixexp . args
   yacc.py:2546:    (28) args -> . LPAREN RPAREN
   yacc.py:2546:    (29) args -> . LPAREN explist RPAREN
   yacc.py:2546:    (30) args -> . tableconstructor
   yacc.py:2546:    (31) args -> . STRING
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         shift and go to state 49
   yacc.py:2658:    SDOT            shift and go to state 52
   yacc.py:2658:    LPAREN          shift and go to state 51
   yacc.py:2658:    STRING          shift and go to state 53
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2660:
   yacc.py:2685:    tableconstructor               shift and go to state 48
   yacc.py:2685:    args                           shift and go to state 50
   yacc.py:2542:
   yacc.py:2543:state 126
   yacc.py:2544:
   yacc.py:2546:    (43) comvar -> COMMA var . comvar
   yacc.py:2546:    (124) prefixexp -> var .
   yacc.py:2546:    (43) comvar -> . COMMA var comvar
   yacc.py:2546:    (44) comvar -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    SDOT            reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    LPAREN          reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    STRING          reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    LCURLY          reduce using rule 124 (prefixexp -> var .)
   yacc.py:2658:    COMMA           shift and go to state 58
   yacc.py:2658:    EQUALS          reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    comvar                         shift and go to state 185
   yacc.py:2685:    empty                          shift and go to state 60
   yacc.py:2542:
   yacc.py:2543:state 127
   yacc.py:2544:
   yacc.py:2546:    (19) stat -> do block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 19 (stat -> do block end .)
   yacc.py:2658:    return          reduce using rule 19 (stat -> do block end .)
   yacc.py:2658:    break           reduce using rule 19 (stat -> do block end .)
   yacc.py:2658:    for             reduce using rule 19 (stat -> do block end .)
   yacc.py:2658:    while           reduce using rule 19 (stat -> do block end .)
   yacc.py:2658:    repeat          reduce using rule 19 (stat -> do block end .)
   yacc.py:2658:    do              reduce using rule 19 (stat -> do block end .)
   yacc.py:2658:    function        reduce using rule 19 (stat -> do block end .)
   yacc.py:2658:    local           reduce using rule 19 (stat -> do block end .)
   yacc.py:2658:    if              reduce using rule 19 (stat -> do block end .)
   yacc.py:2658:    LPAREN          reduce using rule 19 (stat -> do block end .)
   yacc.py:2658:    ID              reduce using rule 19 (stat -> do block end .)
   yacc.py:2658:    RESID           reduce using rule 19 (stat -> do block end .)
   yacc.py:2658:    end             reduce using rule 19 (stat -> do block end .)
   yacc.py:2658:    $end            reduce using rule 19 (stat -> do block end .)
   yacc.py:2658:    until           reduce using rule 19 (stat -> do block end .)
   yacc.py:2658:    elseif          reduce using rule 19 (stat -> do block end .)
   yacc.py:2658:    else            reduce using rule 19 (stat -> do block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 128
   yacc.py:2544:
   yacc.py:2546:    (18) stat -> repeat block until . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 186
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 129
   yacc.py:2544:
   yacc.py:2546:    (94) retexplist -> retexplist COMMA . retexp
   yacc.py:2546:    (96) retexp -> . nil
   yacc.py:2546:    (97) retexp -> . Number
   yacc.py:2546:    (98) retexp -> . STRING
   yacc.py:2546:    (99) retexp -> . true
   yacc.py:2546:    (100) retexp -> . false
   yacc.py:2546:    (101) retexp -> . TRPLDOTS
   yacc.py:2546:    (102) retexp -> . prefixexp
   yacc.py:2546:    (103) retexp -> . exp PLUS exp
   yacc.py:2546:    (104) retexp -> . exp MINUS exp
   yacc.py:2546:    (105) retexp -> . exp TIMES exp
   yacc.py:2546:    (106) retexp -> . exp DIVIDE exp
   yacc.py:2546:    (107) retexp -> . exp POWER exp
   yacc.py:2546:    (108) retexp -> . exp LT exp
   yacc.py:2546:    (109) retexp -> . exp LE exp
   yacc.py:2546:    (110) retexp -> . exp GT exp
   yacc.py:2546:    (111) retexp -> . exp GE exp
   yacc.py:2546:    (112) retexp -> . exp NE exp
   yacc.py:2546:    (113) retexp -> . exp CHECKEQ exp
   yacc.py:2546:    (114) retexp -> . exp and M_andor exp
   yacc.py:2546:    (115) retexp -> . exp or M_andor exp
   yacc.py:2546:    (116) retexp -> . exp MODULO exp
   yacc.py:2546:    (117) retexp -> . exp DBLDOTS exp
   yacc.py:2546:    (118) retexp -> . tableconstructor
   yacc.py:2546:    (119) retexp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 71
   yacc.py:2658:    STRING          shift and go to state 70
   yacc.py:2658:    true            shift and go to state 72
   yacc.py:2658:    false           shift and go to state 66
   yacc.py:2658:    TRPLDOTS        shift and go to state 67
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 68
   yacc.py:2685:    tableconstructor               shift and go to state 65
   yacc.py:2685:    retexp                         shift and go to state 187
   yacc.py:2685:    Number                         shift and go to state 73
   yacc.py:2685:    unop                           shift and go to state 76
   yacc.py:2685:    exp                            shift and go to state 75
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 130
   yacc.py:2544:
   yacc.py:2546:    (114) retexp -> exp and . M_andor exp
   yacc.py:2546:    (88) exp -> exp and . M_andor exp
   yacc.py:2546:    (89) M_andor -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 123 (empty -> .)
   yacc.py:2658:    STRING          reduce using rule 123 (empty -> .)
   yacc.py:2658:    true            reduce using rule 123 (empty -> .)
   yacc.py:2658:    false           reduce using rule 123 (empty -> .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 123 (empty -> .)
   yacc.py:2658:    function        reduce using rule 123 (empty -> .)
   yacc.py:2658:    INTEGER         reduce using rule 123 (empty -> .)
   yacc.py:2658:    FLOAT           reduce using rule 123 (empty -> .)
   yacc.py:2658:    HEX             reduce using rule 123 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 123 (empty -> .)
   yacc.py:2658:    LCURLY          reduce using rule 123 (empty -> .)
   yacc.py:2658:    not             reduce using rule 123 (empty -> .)
   yacc.py:2658:    MINUS           reduce using rule 123 (empty -> .)
   yacc.py:2658:    HASH            reduce using rule 123 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 123 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 160
   yacc.py:2685:    M_andor                        shift and go to state 188
   yacc.py:2542:
   yacc.py:2543:state 131
   yacc.py:2544:
   yacc.py:2546:    (109) retexp -> exp LE . exp
   yacc.py:2546:    (82) exp -> exp LE . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 189
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 132
   yacc.py:2544:
   yacc.py:2546:    (116) retexp -> exp MODULO . exp
   yacc.py:2546:    (90) exp -> exp MODULO . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 190
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 133
   yacc.py:2544:
   yacc.py:2546:    (106) retexp -> exp DIVIDE . exp
   yacc.py:2546:    (79) exp -> exp DIVIDE . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 191
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 134
   yacc.py:2544:
   yacc.py:2546:    (107) retexp -> exp POWER . exp
   yacc.py:2546:    (80) exp -> exp POWER . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 192
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 135
   yacc.py:2544:
   yacc.py:2546:    (115) retexp -> exp or . M_andor exp
   yacc.py:2546:    (87) exp -> exp or . M_andor exp
   yacc.py:2546:    (89) M_andor -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 123 (empty -> .)
   yacc.py:2658:    STRING          reduce using rule 123 (empty -> .)
   yacc.py:2658:    true            reduce using rule 123 (empty -> .)
   yacc.py:2658:    false           reduce using rule 123 (empty -> .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 123 (empty -> .)
   yacc.py:2658:    function        reduce using rule 123 (empty -> .)
   yacc.py:2658:    INTEGER         reduce using rule 123 (empty -> .)
   yacc.py:2658:    FLOAT           reduce using rule 123 (empty -> .)
   yacc.py:2658:    HEX             reduce using rule 123 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 123 (empty -> .)
   yacc.py:2658:    LCURLY          reduce using rule 123 (empty -> .)
   yacc.py:2658:    not             reduce using rule 123 (empty -> .)
   yacc.py:2658:    MINUS           reduce using rule 123 (empty -> .)
   yacc.py:2658:    HASH            reduce using rule 123 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 123 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 160
   yacc.py:2685:    M_andor                        shift and go to state 193
   yacc.py:2542:
   yacc.py:2543:state 136
   yacc.py:2544:
   yacc.py:2546:    (111) retexp -> exp GE . exp
   yacc.py:2546:    (84) exp -> exp GE . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 194
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 137
   yacc.py:2544:
   yacc.py:2546:    (105) retexp -> exp TIMES . exp
   yacc.py:2546:    (78) exp -> exp TIMES . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 195
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 138
   yacc.py:2544:
   yacc.py:2546:    (113) retexp -> exp CHECKEQ . exp
   yacc.py:2546:    (86) exp -> exp CHECKEQ . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 196
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 139
   yacc.py:2544:
   yacc.py:2546:    (108) retexp -> exp LT . exp
   yacc.py:2546:    (81) exp -> exp LT . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 197
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 140
   yacc.py:2544:
   yacc.py:2546:    (110) retexp -> exp GT . exp
   yacc.py:2546:    (83) exp -> exp GT . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 198
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 141
   yacc.py:2544:
   yacc.py:2546:    (103) retexp -> exp PLUS . exp
   yacc.py:2546:    (76) exp -> exp PLUS . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 199
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 142
   yacc.py:2544:
   yacc.py:2546:    (117) retexp -> exp DBLDOTS . exp
   yacc.py:2546:    (91) exp -> exp DBLDOTS . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 200
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 143
   yacc.py:2544:
   yacc.py:2546:    (104) retexp -> exp MINUS . exp
   yacc.py:2546:    (77) exp -> exp MINUS . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 201
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 144
   yacc.py:2544:
   yacc.py:2546:    (112) retexp -> exp NE . exp
   yacc.py:2546:    (85) exp -> exp NE . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 202
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 145
   yacc.py:2544:
   yacc.py:2546:    (119) retexp -> unop exp .
   yacc.py:2546:    (93) exp -> unop exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 119 (retexp -> unop exp .)
   yacc.py:2658:    $end            reduce using rule 119 (retexp -> unop exp .)
   yacc.py:2658:    SEMI            reduce using rule 119 (retexp -> unop exp .)
   yacc.py:2658:    end             reduce using rule 119 (retexp -> unop exp .)
   yacc.py:2658:    until           reduce using rule 119 (retexp -> unop exp .)
   yacc.py:2658:    elseif          reduce using rule 119 (retexp -> unop exp .)
   yacc.py:2658:    else            reduce using rule 119 (retexp -> unop exp .)
   yacc.py:2658:    PLUS            reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    MINUS           reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    TIMES           reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    LT              reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    LE              reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    GT              reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    GE              reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    NE              reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    and             reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    or              reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    MODULO          reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 93 (exp -> unop exp .)
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 93 (exp -> unop exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 103 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 106 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 99 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 108 ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 104 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 105 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 146
   yacc.py:2544:
   yacc.py:2546:    (21) stat -> local function names . funcbody
   yacc.py:2546:    (25) funcbody -> . LPAREN RPAREN block end
   yacc.py:2546:    (26) funcbody -> . LPAREN parlist RPAREN block end
   yacc.py:2547:
   yacc.py:2658:    LPAREN          shift and go to state 83
   yacc.py:2660:
   yacc.py:2685:    funcbody                       shift and go to state 203
   yacc.py:2542:
   yacc.py:2543:state 147
   yacc.py:2544:
   yacc.py:2546:    (23) stat -> local namelist EQUALS . explist
   yacc.py:2546:    (66) explist -> . exp COMMA explist
   yacc.py:2546:    (67) explist -> . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 117
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    explist                        shift and go to state 204
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 148
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> while M_while1 exp . do M_while2 block end
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    do              shift and go to state 205
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    or              shift and go to state 97
   yacc.py:2658:    and             shift and go to state 93
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 149
   yacc.py:2544:
   yacc.py:2546:    (32) parlist -> namelist .
   yacc.py:2546:    (33) parlist -> namelist . comtrp
   yacc.py:2546:    (35) comtrp -> . COMMA TRPLDOTS
   yacc.py:2547:
   yacc.py:2658:    RPAREN          reduce using rule 32 (parlist -> namelist .)
   yacc.py:2658:    COMMA           shift and go to state 206
   yacc.py:2660:
   yacc.py:2685:    comtrp                         shift and go to state 207
   yacc.py:2542:
   yacc.py:2543:state 150
   yacc.py:2544:
   yacc.py:2546:    (34) parlist -> TRPLDOTS .
   yacc.py:2547:
   yacc.py:2658:    RPAREN          reduce using rule 34 (parlist -> TRPLDOTS .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 151
   yacc.py:2544:
   yacc.py:2546:    (26) funcbody -> LPAREN parlist . RPAREN block end
   yacc.py:2547:
   yacc.py:2658:    RPAREN          shift and go to state 208
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 152
   yacc.py:2544:
   yacc.py:2546:    (25) funcbody -> LPAREN RPAREN . block end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (36) laststat -> . return retexplist
   yacc.py:2546:    (37) laststat -> . return
   yacc.py:2546:    (38) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat block until exp
   yacc.py:2546:    (19) stat -> . do block end
   yacc.py:2546:    (20) stat -> . function funcname funcbody
   yacc.py:2546:    (21) stat -> . local function names funcbody
   yacc.py:2546:    (22) stat -> . local namelist
   yacc.py:2546:    (23) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (24) stat -> . functioncall
   yacc.py:2546:    (47) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (61) varlist -> . var comvar
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 19
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 10
   yacc.py:2685:    var                            shift and go to state 11
   yacc.py:2685:    functioncall                   shift and go to state 12
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    sdash                          shift and go to state 61
   yacc.py:2685:    block                          shift and go to state 209
   yacc.py:2542:
   yacc.py:2543:state 153
   yacc.py:2544:
   yacc.py:2546:    (41) dotid -> SDOT names . dotid
   yacc.py:2546:    (41) dotid -> . SDOT names dotid
   yacc.py:2546:    (42) dotid -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    SDOT            shift and go to state 84
   yacc.py:2658:    COLON           reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    dotid                          shift and go to state 210
   yacc.py:2685:    empty                          shift and go to state 86
   yacc.py:2542:
   yacc.py:2543:state 154
   yacc.py:2544:
   yacc.py:2546:    (39) funcname -> names dotid COLON .
   yacc.py:2547:
   yacc.py:2658:    LPAREN          reduce using rule 39 (funcname -> names dotid COLON .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 155
   yacc.py:2544:
   yacc.py:2546:    (137) field -> names EQUALS . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    exp                            shift and go to state 211
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2542:
   yacc.py:2543:state 156
   yacc.py:2544:
   yacc.py:2546:    (132) fieldlist -> field fieldseplist . fieldsep
   yacc.py:2546:    (133) fieldlist -> field fieldseplist .
   yacc.py:2546:    (134) fieldseplist -> fieldseplist . fieldsep field
   yacc.py:2546:    (139) fieldsep -> . COMMA
   yacc.py:2546:    (140) fieldsep -> . SEMI
   yacc.py:2547:
   yacc.py:2658:    RCURLY          reduce using rule 133 (fieldlist -> field fieldseplist .)
   yacc.py:2658:    COMMA           shift and go to state 213
   yacc.py:2658:    SEMI            shift and go to state 214
   yacc.py:2660:
   yacc.py:2685:    fieldsep                       shift and go to state 212
   yacc.py:2542:
   yacc.py:2543:state 157
   yacc.py:2544:
   yacc.py:2546:    (135) fieldseplist -> empty .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 135 (fieldseplist -> empty .)
   yacc.py:2658:    SEMI            reduce using rule 135 (fieldseplist -> empty .)
   yacc.py:2658:    RCURLY          reduce using rule 135 (fieldseplist -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 158
   yacc.py:2544:
   yacc.py:2546:    (130) tableconstructor -> LCURLY fieldlist RCURLY .
   yacc.py:2547:
   yacc.py:2658:    RSQUARE         reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    PLUS            reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    MINUS           reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    TIMES           reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    DIVIDE          reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    POWER           reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    LT              reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    LE              reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    GT              reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    GE              reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    NE              reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    CHECKEQ         reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    or              reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    and             reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    MODULO          reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    DBLDOTS         reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    COMMA           reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    $end            reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    SEMI            reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    end             reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    until           reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    elseif          reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    else            reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    RPAREN          reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    then            reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    RCURLY          reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    return          reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    break           reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    for             reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    while           reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    repeat          reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    do              reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    function        reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    local           reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    if              reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    LPAREN          reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    ID              reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    RESID           reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    LSQUARE         reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    SDOT            reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    STRING          reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    LCURLY          reduce using rule 130 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 159
   yacc.py:2544:
   yacc.py:2546:    (136) field -> LSQUARE exp . RSQUARE EQUALS exp
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    RSQUARE         shift and go to state 215
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    or              shift and go to state 97
   yacc.py:2658:    and             shift and go to state 93
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 160
   yacc.py:2544:
   yacc.py:2546:    (89) M_andor -> empty .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 89 (M_andor -> empty .)
   yacc.py:2658:    STRING          reduce using rule 89 (M_andor -> empty .)
   yacc.py:2658:    true            reduce using rule 89 (M_andor -> empty .)
   yacc.py:2658:    false           reduce using rule 89 (M_andor -> empty .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 89 (M_andor -> empty .)
   yacc.py:2658:    function        reduce using rule 89 (M_andor -> empty .)
   yacc.py:2658:    INTEGER         reduce using rule 89 (M_andor -> empty .)
   yacc.py:2658:    FLOAT           reduce using rule 89 (M_andor -> empty .)
   yacc.py:2658:    HEX             reduce using rule 89 (M_andor -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 89 (M_andor -> empty .)
   yacc.py:2658:    LCURLY          reduce using rule 89 (M_andor -> empty .)
   yacc.py:2658:    not             reduce using rule 89 (M_andor -> empty .)
   yacc.py:2658:    MINUS           reduce using rule 89 (M_andor -> empty .)
   yacc.py:2658:    HASH            reduce using rule 89 (M_andor -> empty .)
   yacc.py:2658:    ID              reduce using rule 89 (M_andor -> empty .)
   yacc.py:2658:    RESID           reduce using rule 89 (M_andor -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 161
   yacc.py:2544:
   yacc.py:2546:    (88) exp -> exp and M_andor . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 216
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 162
   yacc.py:2544:
   yacc.py:2546:    (82) exp -> exp LE exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    LE              reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    GT              reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    GE              reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    NE              reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    or              reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    and             reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    RPAREN          reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    then            reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    COMMA           reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    SEMI            reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    RCURLY          reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    return          reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    break           reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    for             reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    while           reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    repeat          reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    do              reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    function        reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    local           reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    if              reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    LPAREN          reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    ID              reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    RESID           reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    $end            reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    end             reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    until           reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    elseif          reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    else            reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 82 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 82 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 82 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 82 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 82 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 82 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 82 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 163
   yacc.py:2544:
   yacc.py:2546:    (80) exp -> exp POWER exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    MINUS           reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    TIMES           reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    LT              reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    LE              reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    GT              reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    GE              reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    NE              reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    or              reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    and             reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    MODULO          reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    RPAREN          reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    then            reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    COMMA           reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    SEMI            reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    RCURLY          reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    return          reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    break           reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    for             reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    while           reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    repeat          reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    do              reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    function        reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    local           reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    if              reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    LPAREN          reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    ID              reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    RESID           reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    $end            reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    end             reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    until           reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    elseif          reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    else            reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 80 (exp -> exp POWER exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 103 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 106 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 99 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 108 ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 104 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 105 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 164
   yacc.py:2544:
   yacc.py:2546:    (87) exp -> exp or M_andor . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 217
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 165
   yacc.py:2544:
   yacc.py:2546:    (84) exp -> exp GE exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    LE              reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    GT              reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    GE              reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    NE              reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    or              reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    and             reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    RPAREN          reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    then            reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    COMMA           reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    SEMI            reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    RCURLY          reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    return          reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    break           reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    for             reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    while           reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    repeat          reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    do              reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    function        reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    local           reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    if              reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    LPAREN          reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    ID              reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    RESID           reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    $end            reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    end             reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    until           reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    elseif          reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    else            reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 84 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 84 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 84 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 84 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 84 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 84 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 84 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 166
   yacc.py:2544:
   yacc.py:2546:    (78) exp -> exp TIMES exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    MINUS           reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    TIMES           reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    LT              reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    LE              reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    GT              reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    GE              reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    NE              reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    or              reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    and             reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    MODULO          reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    RPAREN          reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    then            reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    COMMA           reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    SEMI            reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    RCURLY          reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    return          reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    break           reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    for             reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    while           reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    repeat          reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    do              reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    function        reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    local           reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    if              reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    LPAREN          reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    ID              reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    RESID           reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    $end            reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    end             reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    until           reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    elseif          reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    else            reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 78 (exp -> exp TIMES exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 103 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 106 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 99 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 108 ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 104 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 105 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 167
   yacc.py:2544:
   yacc.py:2546:    (86) exp -> exp CHECKEQ exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    LE              reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    GT              reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    GE              reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    NE              reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    or              reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    and             reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    RPAREN          reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    then            reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    COMMA           reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    SEMI            reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    RCURLY          reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    return          reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    break           reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    for             reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    while           reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    repeat          reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    do              reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    function        reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    local           reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    if              reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    LPAREN          reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    ID              reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    RESID           reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    $end            reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    end             reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    until           reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    elseif          reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    else            reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 86 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 86 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 86 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 86 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 86 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 86 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 86 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 168
   yacc.py:2544:
   yacc.py:2546:    (81) exp -> exp LT exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    LE              reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    GT              reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    GE              reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    NE              reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    or              reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    and             reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    RPAREN          reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    then            reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    COMMA           reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    SEMI            reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    RCURLY          reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    return          reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    break           reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    for             reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    while           reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    repeat          reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    do              reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    function        reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    local           reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    if              reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    LPAREN          reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    ID              reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    RESID           reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    $end            reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    end             reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    until           reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    elseif          reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    else            reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 81 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 81 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 81 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 81 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 81 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 81 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 81 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 169
   yacc.py:2544:
   yacc.py:2546:    (83) exp -> exp GT exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    LE              reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    GT              reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    GE              reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    NE              reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    or              reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    and             reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    RPAREN          reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    then            reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    COMMA           reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    SEMI            reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    RCURLY          reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    return          reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    break           reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    for             reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    while           reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    repeat          reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    do              reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    function        reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    local           reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    if              reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    LPAREN          reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    ID              reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    RESID           reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    $end            reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    end             reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    until           reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    elseif          reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    else            reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 83 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 83 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 83 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 83 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 83 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 83 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 83 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 170
   yacc.py:2544:
   yacc.py:2546:    (76) exp -> exp PLUS exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    MINUS           reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    LT              reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    LE              reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    GT              reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    GE              reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    NE              reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    or              reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    and             reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    RPAREN          reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    then            reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    COMMA           reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    SEMI            reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    RCURLY          reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    return          reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    break           reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    for             reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    while           reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    repeat          reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    do              reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    function        reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    local           reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    if              reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    LPAREN          reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    ID              reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    RESID           reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    $end            reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    end             reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    until           reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    elseif          reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    else            reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2660:
   yacc.py:2667:  ! TIMES           [ reduce using rule 76 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 76 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 76 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 76 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 103 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 106 ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 105 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 171
   yacc.py:2544:
   yacc.py:2546:    (90) exp -> exp MODULO exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    MINUS           reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    TIMES           reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    LT              reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    LE              reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    GT              reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    GE              reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    NE              reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    or              reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    and             reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    MODULO          reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    RPAREN          reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    then            reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    COMMA           reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    SEMI            reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    RCURLY          reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    return          reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    break           reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    for             reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    while           reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    repeat          reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    do              reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    function        reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    local           reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    if              reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    LPAREN          reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    ID              reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    RESID           reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    $end            reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    end             reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    until           reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    elseif          reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    else            reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 90 (exp -> exp MODULO exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 103 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 106 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 99 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 108 ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 104 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 105 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 172
   yacc.py:2544:
   yacc.py:2546:    (91) exp -> exp DBLDOTS exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    LE              reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    GT              reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    GE              reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    NE              reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    or              reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    and             reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    RPAREN          reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    then            reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    COMMA           reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    SEMI            reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    RCURLY          reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    return          reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    break           reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    for             reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    while           reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    repeat          reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    do              reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    function        reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    local           reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    if              reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    LPAREN          reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    ID              reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    RESID           reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    $end            reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    end             reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    until           reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    elseif          reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    else            reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 91 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 91 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 91 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 91 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 91 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 91 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 91 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 173
   yacc.py:2544:
   yacc.py:2546:    (77) exp -> exp MINUS exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    MINUS           reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    LT              reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    LE              reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    GT              reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    GE              reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    NE              reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    or              reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    and             reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    RPAREN          reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    then            reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    COMMA           reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    SEMI            reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    RCURLY          reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    return          reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    break           reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    for             reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    while           reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    repeat          reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    do              reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    function        reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    local           reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    if              reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    LPAREN          reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    ID              reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    RESID           reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    $end            reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    end             reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    until           reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    elseif          reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    else            reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2660:
   yacc.py:2667:  ! TIMES           [ reduce using rule 77 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 77 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 77 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 77 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 103 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 106 ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 105 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 174
   yacc.py:2544:
   yacc.py:2546:    (85) exp -> exp NE exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    LE              reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    GT              reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    GE              reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    NE              reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    or              reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    and             reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    RPAREN          reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    then            reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    COMMA           reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    SEMI            reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    RCURLY          reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    return          reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    break           reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    for             reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    while           reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    repeat          reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    do              reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    function        reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    local           reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    if              reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    LPAREN          reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    ID              reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    RESID           reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    $end            reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    end             reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    until           reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    elseif          reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    else            reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 85 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 85 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 85 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 85 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 85 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 85 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 85 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 175
   yacc.py:2544:
   yacc.py:2546:    (79) exp -> exp DIVIDE exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    MINUS           reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    TIMES           reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    LT              reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    LE              reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    GT              reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    GE              reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    NE              reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    or              reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    and             reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    MODULO          reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    RPAREN          reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    then            reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    COMMA           reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    SEMI            reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    RCURLY          reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    return          reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    break           reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    for             reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    while           reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    repeat          reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    do              reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    function        reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    local           reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    if              reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    LPAREN          reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    ID              reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    RESID           reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    $end            reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    end             reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    until           reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    elseif          reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    else            reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 79 (exp -> exp DIVIDE exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 103 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 106 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 99 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 108 ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 104 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 105 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 176
   yacc.py:2544:
   yacc.py:2546:    (5) chunk -> chunk M_chunk stat SEMI .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    break           reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    for             reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    while           reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    repeat          reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    do              reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    function        reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    local           reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    if              reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    LPAREN          reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    ID              reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    RESID           reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    end             reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    elseif          reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    else            reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    until           reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    $end            reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 177
   yacc.py:2544:
   yacc.py:2546:    (4) sdash -> chunk laststat M_chunk SEMI .
   yacc.py:2547:
   yacc.py:2658:    elseif          reduce using rule 4 (sdash -> chunk laststat M_chunk SEMI .)
   yacc.py:2658:    else            reduce using rule 4 (sdash -> chunk laststat M_chunk SEMI .)
   yacc.py:2658:    end             reduce using rule 4 (sdash -> chunk laststat M_chunk SEMI .)
   yacc.py:2658:    $end            reduce using rule 4 (sdash -> chunk laststat M_chunk SEMI .)
   yacc.py:2658:    until           reduce using rule 4 (sdash -> chunk laststat M_chunk SEMI .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 178
   yacc.py:2544:
   yacc.py:2546:    (47) stat -> if exp M_bool then . M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (49) M_if1 -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 123 (empty -> .)
   yacc.py:2658:    break           reduce using rule 123 (empty -> .)
   yacc.py:2658:    for             reduce using rule 123 (empty -> .)
   yacc.py:2658:    while           reduce using rule 123 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 123 (empty -> .)
   yacc.py:2658:    do              reduce using rule 123 (empty -> .)
   yacc.py:2658:    function        reduce using rule 123 (empty -> .)
   yacc.py:2658:    local           reduce using rule 123 (empty -> .)
   yacc.py:2658:    if              reduce using rule 123 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 123 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 123 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 218
   yacc.py:2685:    M_if1                          shift and go to state 219
   yacc.py:2542:
   yacc.py:2543:state 179
   yacc.py:2544:
   yacc.py:2546:    (63) var -> prefixexp LSQUARE exp RSQUARE .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    SDOT            reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    LPAREN          reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    STRING          reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    LCURLY          reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    PLUS            reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    MINUS           reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    TIMES           reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    DIVIDE          reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    POWER           reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    LT              reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    LE              reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    GT              reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    GE              reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    NE              reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    CHECKEQ         reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    or              reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    and             reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    MODULO          reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    DBLDOTS         reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    RPAREN          reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    then            reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    COMMA           reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    SEMI            reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    RCURLY          reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    RSQUARE         reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    return          reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    break           reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    for             reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    while           reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    repeat          reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    do              reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    function        reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    local           reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    if              reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    ID              reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    RESID           reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    $end            reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    end             reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    until           reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    elseif          reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    else            reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    EQUALS          reduce using rule 63 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 180
   yacc.py:2544:
   yacc.py:2546:    (29) args -> LPAREN explist RPAREN .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    SDOT            reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    LPAREN          reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    STRING          reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    LCURLY          reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    SEMI            reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    return          reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    break           reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    for             reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    while           reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    repeat          reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    do              reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    function        reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    local           reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    if              reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    ID              reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    RESID           reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    $end            reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    end             reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    until           reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    elseif          reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    else            reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    RPAREN          reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    PLUS            reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    MINUS           reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    TIMES           reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    DIVIDE          reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    POWER           reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    LT              reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    LE              reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    GT              reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    GE              reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    NE              reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    CHECKEQ         reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    or              reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    and             reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    MODULO          reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    DBLDOTS         reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    then            reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    COMMA           reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    RCURLY          reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    RSQUARE         reduce using rule 29 (args -> LPAREN explist RPAREN .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 181
   yacc.py:2544:
   yacc.py:2546:    (66) explist -> exp COMMA . explist
   yacc.py:2546:    (66) explist -> . exp COMMA explist
   yacc.py:2546:    (67) explist -> . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 117
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    explist                        shift and go to state 220
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 182
   yacc.py:2544:
   yacc.py:2546:    (14) stat -> for namelist in explist . do block end
   yacc.py:2547:
   yacc.py:2658:    do              shift and go to state 221
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 183
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for names EQUALS exp . COMMA exp do block end
   yacc.py:2546:    (13) stat -> for names EQUALS exp . COMMA exp COMMA exp do block end
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           shift and go to state 222
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    or              shift and go to state 97
   yacc.py:2658:    and             shift and go to state 93
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 184
   yacc.py:2544:
   yacc.py:2546:    (45) comid -> COMMA names . comid
   yacc.py:2546:    (45) comid -> . COMMA names comid
   yacc.py:2546:    (46) comid -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    COMMA           shift and go to state 122
   yacc.py:2658:    in              reduce using rule 123 (empty -> .)
   yacc.py:2658:    EQUALS          reduce using rule 123 (empty -> .)
   yacc.py:2658:    SEMI            reduce using rule 123 (empty -> .)
   yacc.py:2658:    return          reduce using rule 123 (empty -> .)
   yacc.py:2658:    break           reduce using rule 123 (empty -> .)
   yacc.py:2658:    for             reduce using rule 123 (empty -> .)
   yacc.py:2658:    while           reduce using rule 123 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 123 (empty -> .)
   yacc.py:2658:    do              reduce using rule 123 (empty -> .)
   yacc.py:2658:    function        reduce using rule 123 (empty -> .)
   yacc.py:2658:    local           reduce using rule 123 (empty -> .)
   yacc.py:2658:    if              reduce using rule 123 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 123 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 123 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 123 (empty -> .)
   yacc.py:2658:    $end            reduce using rule 123 (empty -> .)
   yacc.py:2658:    end             reduce using rule 123 (empty -> .)
   yacc.py:2658:    until           reduce using rule 123 (empty -> .)
   yacc.py:2658:    elseif          reduce using rule 123 (empty -> .)
   yacc.py:2658:    else            reduce using rule 123 (empty -> .)
   yacc.py:2658:    RPAREN          reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2667:  ! COMMA           [ reduce using rule 123 (empty -> .) ]
   yacc.py:2671:
   yacc.py:2685:    empty                          shift and go to state 121
   yacc.py:2685:    comid                          shift and go to state 223
   yacc.py:2542:
   yacc.py:2543:state 185
   yacc.py:2544:
   yacc.py:2546:    (43) comvar -> COMMA var comvar .
   yacc.py:2547:
   yacc.py:2658:    EQUALS          reduce using rule 43 (comvar -> COMMA var comvar .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 186
   yacc.py:2544:
   yacc.py:2546:    (18) stat -> repeat block until exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    return          reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    break           reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    for             reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    while           reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    repeat          reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    do              reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    function        reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    local           reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    if              reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    LPAREN          reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    ID              reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    RESID           reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    end             reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    $end            reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    until           reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    elseif          reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    else            reduce using rule 18 (stat -> repeat block until exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    or              shift and go to state 97
   yacc.py:2658:    and             shift and go to state 93
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 187
   yacc.py:2544:
   yacc.py:2546:    (94) retexplist -> retexplist COMMA retexp .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 94 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    $end            reduce using rule 94 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    SEMI            reduce using rule 94 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    end             reduce using rule 94 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    until           reduce using rule 94 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    elseif          reduce using rule 94 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    else            reduce using rule 94 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 188
   yacc.py:2544:
   yacc.py:2546:    (114) retexp -> exp and M_andor . exp
   yacc.py:2546:    (88) exp -> exp and M_andor . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 224
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 189
   yacc.py:2544:
   yacc.py:2546:    (109) retexp -> exp LE exp .
   yacc.py:2546:    (82) exp -> exp LE exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 109 (retexp -> exp LE exp .)
   yacc.py:2658:    $end            reduce using rule 109 (retexp -> exp LE exp .)
   yacc.py:2658:    SEMI            reduce using rule 109 (retexp -> exp LE exp .)
   yacc.py:2658:    end             reduce using rule 109 (retexp -> exp LE exp .)
   yacc.py:2658:    until           reduce using rule 109 (retexp -> exp LE exp .)
   yacc.py:2658:    elseif          reduce using rule 109 (retexp -> exp LE exp .)
   yacc.py:2658:    else            reduce using rule 109 (retexp -> exp LE exp .)
   yacc.py:2658:    LT              reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    LE              reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    GT              reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    GE              reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    NE              reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    and             reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    or              reduce using rule 82 (exp -> exp LE exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 82 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 82 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 82 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 82 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 82 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 82 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 82 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 190
   yacc.py:2544:
   yacc.py:2546:    (116) retexp -> exp MODULO exp .
   yacc.py:2546:    (90) exp -> exp MODULO exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 116 (retexp -> exp MODULO exp .)
   yacc.py:2658:    $end            reduce using rule 116 (retexp -> exp MODULO exp .)
   yacc.py:2658:    SEMI            reduce using rule 116 (retexp -> exp MODULO exp .)
   yacc.py:2658:    end             reduce using rule 116 (retexp -> exp MODULO exp .)
   yacc.py:2658:    until           reduce using rule 116 (retexp -> exp MODULO exp .)
   yacc.py:2658:    elseif          reduce using rule 116 (retexp -> exp MODULO exp .)
   yacc.py:2658:    else            reduce using rule 116 (retexp -> exp MODULO exp .)
   yacc.py:2658:    PLUS            reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    MINUS           reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    TIMES           reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    LT              reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    LE              reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    GT              reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    GE              reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    NE              reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    and             reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    or              reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    MODULO          reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 90 (exp -> exp MODULO exp .)
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 90 (exp -> exp MODULO exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 103 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 106 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 99 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 108 ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 104 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 105 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 191
   yacc.py:2544:
   yacc.py:2546:    (106) retexp -> exp DIVIDE exp .
   yacc.py:2546:    (79) exp -> exp DIVIDE exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 106 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    $end            reduce using rule 106 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    SEMI            reduce using rule 106 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    end             reduce using rule 106 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    until           reduce using rule 106 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    elseif          reduce using rule 106 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    else            reduce using rule 106 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    PLUS            reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    MINUS           reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    TIMES           reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    LT              reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    LE              reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    GT              reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    GE              reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    NE              reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    and             reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    or              reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    MODULO          reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 79 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 79 (exp -> exp DIVIDE exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 103 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 106 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 99 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 108 ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 104 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 105 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 192
   yacc.py:2544:
   yacc.py:2546:    (107) retexp -> exp POWER exp .
   yacc.py:2546:    (80) exp -> exp POWER exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 107 (retexp -> exp POWER exp .)
   yacc.py:2658:    $end            reduce using rule 107 (retexp -> exp POWER exp .)
   yacc.py:2658:    SEMI            reduce using rule 107 (retexp -> exp POWER exp .)
   yacc.py:2658:    end             reduce using rule 107 (retexp -> exp POWER exp .)
   yacc.py:2658:    until           reduce using rule 107 (retexp -> exp POWER exp .)
   yacc.py:2658:    elseif          reduce using rule 107 (retexp -> exp POWER exp .)
   yacc.py:2658:    else            reduce using rule 107 (retexp -> exp POWER exp .)
   yacc.py:2658:    PLUS            reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    MINUS           reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    TIMES           reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    LT              reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    LE              reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    GT              reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    GE              reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    NE              reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    and             reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    or              reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    MODULO          reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 80 (exp -> exp POWER exp .)
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 80 (exp -> exp POWER exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 103 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 106 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 99 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 108 ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 104 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 105 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 193
   yacc.py:2544:
   yacc.py:2546:    (115) retexp -> exp or M_andor . exp
   yacc.py:2546:    (87) exp -> exp or M_andor . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 225
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 194
   yacc.py:2544:
   yacc.py:2546:    (111) retexp -> exp GE exp .
   yacc.py:2546:    (84) exp -> exp GE exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 111 (retexp -> exp GE exp .)
   yacc.py:2658:    $end            reduce using rule 111 (retexp -> exp GE exp .)
   yacc.py:2658:    SEMI            reduce using rule 111 (retexp -> exp GE exp .)
   yacc.py:2658:    end             reduce using rule 111 (retexp -> exp GE exp .)
   yacc.py:2658:    until           reduce using rule 111 (retexp -> exp GE exp .)
   yacc.py:2658:    elseif          reduce using rule 111 (retexp -> exp GE exp .)
   yacc.py:2658:    else            reduce using rule 111 (retexp -> exp GE exp .)
   yacc.py:2658:    LT              reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    LE              reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    GT              reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    GE              reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    NE              reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    and             reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    or              reduce using rule 84 (exp -> exp GE exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 84 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 84 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 84 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 84 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 84 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 84 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 84 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 195
   yacc.py:2544:
   yacc.py:2546:    (105) retexp -> exp TIMES exp .
   yacc.py:2546:    (78) exp -> exp TIMES exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 105 (retexp -> exp TIMES exp .)
   yacc.py:2658:    $end            reduce using rule 105 (retexp -> exp TIMES exp .)
   yacc.py:2658:    SEMI            reduce using rule 105 (retexp -> exp TIMES exp .)
   yacc.py:2658:    end             reduce using rule 105 (retexp -> exp TIMES exp .)
   yacc.py:2658:    until           reduce using rule 105 (retexp -> exp TIMES exp .)
   yacc.py:2658:    elseif          reduce using rule 105 (retexp -> exp TIMES exp .)
   yacc.py:2658:    else            reduce using rule 105 (retexp -> exp TIMES exp .)
   yacc.py:2658:    PLUS            reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    MINUS           reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    TIMES           reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    LT              reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    LE              reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    GT              reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    GE              reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    NE              reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    and             reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    or              reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    MODULO          reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 78 (exp -> exp TIMES exp .)
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 78 (exp -> exp TIMES exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 103 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 106 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 99 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 108 ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 104 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 105 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 196
   yacc.py:2544:
   yacc.py:2546:    (113) retexp -> exp CHECKEQ exp .
   yacc.py:2546:    (86) exp -> exp CHECKEQ exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 113 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    $end            reduce using rule 113 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    SEMI            reduce using rule 113 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    end             reduce using rule 113 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    until           reduce using rule 113 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    elseif          reduce using rule 113 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    else            reduce using rule 113 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    LT              reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    LE              reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    GT              reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    GE              reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    NE              reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    and             reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    or              reduce using rule 86 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 86 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 86 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 86 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 86 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 86 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 86 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 86 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 197
   yacc.py:2544:
   yacc.py:2546:    (108) retexp -> exp LT exp .
   yacc.py:2546:    (81) exp -> exp LT exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 108 (retexp -> exp LT exp .)
   yacc.py:2658:    $end            reduce using rule 108 (retexp -> exp LT exp .)
   yacc.py:2658:    SEMI            reduce using rule 108 (retexp -> exp LT exp .)
   yacc.py:2658:    end             reduce using rule 108 (retexp -> exp LT exp .)
   yacc.py:2658:    until           reduce using rule 108 (retexp -> exp LT exp .)
   yacc.py:2658:    elseif          reduce using rule 108 (retexp -> exp LT exp .)
   yacc.py:2658:    else            reduce using rule 108 (retexp -> exp LT exp .)
   yacc.py:2658:    LT              reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    LE              reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    GT              reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    GE              reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    NE              reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    and             reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    or              reduce using rule 81 (exp -> exp LT exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 81 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 81 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 81 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 81 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 81 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 81 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 81 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 198
   yacc.py:2544:
   yacc.py:2546:    (110) retexp -> exp GT exp .
   yacc.py:2546:    (83) exp -> exp GT exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 110 (retexp -> exp GT exp .)
   yacc.py:2658:    $end            reduce using rule 110 (retexp -> exp GT exp .)
   yacc.py:2658:    SEMI            reduce using rule 110 (retexp -> exp GT exp .)
   yacc.py:2658:    end             reduce using rule 110 (retexp -> exp GT exp .)
   yacc.py:2658:    until           reduce using rule 110 (retexp -> exp GT exp .)
   yacc.py:2658:    elseif          reduce using rule 110 (retexp -> exp GT exp .)
   yacc.py:2658:    else            reduce using rule 110 (retexp -> exp GT exp .)
   yacc.py:2658:    LT              reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    LE              reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    GT              reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    GE              reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    NE              reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    and             reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    or              reduce using rule 83 (exp -> exp GT exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 83 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 83 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 83 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 83 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 83 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 83 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 83 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 199
   yacc.py:2544:
   yacc.py:2546:    (103) retexp -> exp PLUS exp .
   yacc.py:2546:    (76) exp -> exp PLUS exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 103 (retexp -> exp PLUS exp .)
   yacc.py:2658:    $end            reduce using rule 103 (retexp -> exp PLUS exp .)
   yacc.py:2658:    SEMI            reduce using rule 103 (retexp -> exp PLUS exp .)
   yacc.py:2658:    end             reduce using rule 103 (retexp -> exp PLUS exp .)
   yacc.py:2658:    until           reduce using rule 103 (retexp -> exp PLUS exp .)
   yacc.py:2658:    elseif          reduce using rule 103 (retexp -> exp PLUS exp .)
   yacc.py:2658:    else            reduce using rule 103 (retexp -> exp PLUS exp .)
   yacc.py:2658:    PLUS            reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    MINUS           reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    LT              reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    LE              reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    GT              reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    GE              reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    NE              reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    and             reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    or              reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 76 (exp -> exp PLUS exp .)
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2660:
   yacc.py:2667:  ! TIMES           [ reduce using rule 76 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 76 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 76 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 76 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 103 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 106 ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 105 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 200
   yacc.py:2544:
   yacc.py:2546:    (117) retexp -> exp DBLDOTS exp .
   yacc.py:2546:    (91) exp -> exp DBLDOTS exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 117 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    $end            reduce using rule 117 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    SEMI            reduce using rule 117 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    end             reduce using rule 117 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    until           reduce using rule 117 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    elseif          reduce using rule 117 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    else            reduce using rule 117 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    LT              reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    LE              reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    GT              reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    GE              reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    NE              reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    and             reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    or              reduce using rule 91 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 91 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 91 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 91 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 91 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 91 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 91 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 91 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 201
   yacc.py:2544:
   yacc.py:2546:    (104) retexp -> exp MINUS exp .
   yacc.py:2546:    (77) exp -> exp MINUS exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 104 (retexp -> exp MINUS exp .)
   yacc.py:2658:    $end            reduce using rule 104 (retexp -> exp MINUS exp .)
   yacc.py:2658:    SEMI            reduce using rule 104 (retexp -> exp MINUS exp .)
   yacc.py:2658:    end             reduce using rule 104 (retexp -> exp MINUS exp .)
   yacc.py:2658:    until           reduce using rule 104 (retexp -> exp MINUS exp .)
   yacc.py:2658:    elseif          reduce using rule 104 (retexp -> exp MINUS exp .)
   yacc.py:2658:    else            reduce using rule 104 (retexp -> exp MINUS exp .)
   yacc.py:2658:    PLUS            reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    MINUS           reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    LT              reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    LE              reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    GT              reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    GE              reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    NE              reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    and             reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    or              reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 77 (exp -> exp MINUS exp .)
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2660:
   yacc.py:2667:  ! TIMES           [ reduce using rule 77 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 77 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 77 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 77 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 103 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 106 ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 105 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 202
   yacc.py:2544:
   yacc.py:2546:    (112) retexp -> exp NE exp .
   yacc.py:2546:    (85) exp -> exp NE exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 112 (retexp -> exp NE exp .)
   yacc.py:2658:    $end            reduce using rule 112 (retexp -> exp NE exp .)
   yacc.py:2658:    SEMI            reduce using rule 112 (retexp -> exp NE exp .)
   yacc.py:2658:    end             reduce using rule 112 (retexp -> exp NE exp .)
   yacc.py:2658:    until           reduce using rule 112 (retexp -> exp NE exp .)
   yacc.py:2658:    elseif          reduce using rule 112 (retexp -> exp NE exp .)
   yacc.py:2658:    else            reduce using rule 112 (retexp -> exp NE exp .)
   yacc.py:2658:    LT              reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    LE              reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    GT              reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    GE              reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    NE              reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    and             reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    or              reduce using rule 85 (exp -> exp NE exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 85 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 85 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 85 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 85 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 85 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 85 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 85 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 101 ]
   yacc.py:2667:  ! LE              [ shift and go to state 94 ]
   yacc.py:2667:  ! GT              [ shift and go to state 102 ]
   yacc.py:2667:  ! GE              [ shift and go to state 98 ]
   yacc.py:2667:  ! NE              [ shift and go to state 107 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 100 ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 203
   yacc.py:2544:
   yacc.py:2546:    (21) stat -> local function names funcbody .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2658:    return          reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2658:    break           reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2658:    for             reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2658:    while           reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2658:    repeat          reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2658:    do              reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2658:    function        reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2658:    local           reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2658:    if              reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2658:    LPAREN          reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2658:    ID              reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2658:    RESID           reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2658:    end             reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2658:    $end            reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2658:    until           reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2658:    elseif          reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2658:    else            reduce using rule 21 (stat -> local function names funcbody .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 204
   yacc.py:2544:
   yacc.py:2546:    (23) stat -> local namelist EQUALS explist .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    return          reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    break           reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    for             reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    while           reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    repeat          reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    do              reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    function        reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    local           reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    if              reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    LPAREN          reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    ID              reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    RESID           reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    end             reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    $end            reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    until           reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    elseif          reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    else            reduce using rule 23 (stat -> local namelist EQUALS explist .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 205
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> while M_while1 exp do . M_while2 block end
   yacc.py:2546:    (17) M_while2 -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 123 (empty -> .)
   yacc.py:2658:    break           reduce using rule 123 (empty -> .)
   yacc.py:2658:    for             reduce using rule 123 (empty -> .)
   yacc.py:2658:    while           reduce using rule 123 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 123 (empty -> .)
   yacc.py:2658:    do              reduce using rule 123 (empty -> .)
   yacc.py:2658:    function        reduce using rule 123 (empty -> .)
   yacc.py:2658:    local           reduce using rule 123 (empty -> .)
   yacc.py:2658:    if              reduce using rule 123 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 123 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 123 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 226
   yacc.py:2685:    M_while2                       shift and go to state 227
   yacc.py:2542:
   yacc.py:2543:state 206
   yacc.py:2544:
   yacc.py:2546:    (35) comtrp -> COMMA . TRPLDOTS
   yacc.py:2547:
   yacc.py:2658:    TRPLDOTS        shift and go to state 228
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 207
   yacc.py:2544:
   yacc.py:2546:    (33) parlist -> namelist comtrp .
   yacc.py:2547:
   yacc.py:2658:    RPAREN          reduce using rule 33 (parlist -> namelist comtrp .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 208
   yacc.py:2544:
   yacc.py:2546:    (26) funcbody -> LPAREN parlist RPAREN . block end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (36) laststat -> . return retexplist
   yacc.py:2546:    (37) laststat -> . return
   yacc.py:2546:    (38) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat block until exp
   yacc.py:2546:    (19) stat -> . do block end
   yacc.py:2546:    (20) stat -> . function funcname funcbody
   yacc.py:2546:    (21) stat -> . local function names funcbody
   yacc.py:2546:    (22) stat -> . local namelist
   yacc.py:2546:    (23) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (24) stat -> . functioncall
   yacc.py:2546:    (47) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (61) varlist -> . var comvar
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 19
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 10
   yacc.py:2685:    var                            shift and go to state 11
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    functioncall                   shift and go to state 12
   yacc.py:2685:    block                          shift and go to state 229
   yacc.py:2685:    sdash                          shift and go to state 61
   yacc.py:2542:
   yacc.py:2543:state 209
   yacc.py:2544:
   yacc.py:2546:    (25) funcbody -> LPAREN RPAREN block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 230
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 210
   yacc.py:2544:
   yacc.py:2546:    (41) dotid -> SDOT names dotid .
   yacc.py:2547:
   yacc.py:2658:    COLON           reduce using rule 41 (dotid -> SDOT names dotid .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 211
   yacc.py:2544:
   yacc.py:2546:    (137) field -> names EQUALS exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 137 (field -> names EQUALS exp .)
   yacc.py:2658:    SEMI            reduce using rule 137 (field -> names EQUALS exp .)
   yacc.py:2658:    RCURLY          reduce using rule 137 (field -> names EQUALS exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    or              shift and go to state 97
   yacc.py:2658:    and             shift and go to state 93
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 212
   yacc.py:2544:
   yacc.py:2546:    (132) fieldlist -> field fieldseplist fieldsep .
   yacc.py:2546:    (134) fieldseplist -> fieldseplist fieldsep . field
   yacc.py:2546:    (136) field -> . LSQUARE exp RSQUARE EQUALS exp
   yacc.py:2546:    (137) field -> . names EQUALS exp
   yacc.py:2546:    (138) field -> . exp
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2547:
   yacc.py:2658:    RCURLY          reduce using rule 132 (fieldlist -> field fieldseplist fieldsep .)
   yacc.py:2658:    LSQUARE         shift and go to state 92
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    field                          shift and go to state 231
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    names                          shift and go to state 87
   yacc.py:2685:    exp                            shift and go to state 91
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2542:
   yacc.py:2543:state 213
   yacc.py:2544:
   yacc.py:2546:    (139) fieldsep -> COMMA .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2658:    ID              reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2658:    RESID           reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2658:    nil             reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2658:    STRING          reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2658:    true            reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2658:    false           reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2658:    function        reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2658:    INTEGER         reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2658:    FLOAT           reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2658:    HEX             reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2658:    LPAREN          reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2658:    LCURLY          reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2658:    not             reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2658:    MINUS           reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2658:    HASH            reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2658:    RCURLY          reduce using rule 139 (fieldsep -> COMMA .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 214
   yacc.py:2544:
   yacc.py:2546:    (140) fieldsep -> SEMI .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2658:    ID              reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2658:    RESID           reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2658:    nil             reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2658:    STRING          reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2658:    true            reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2658:    false           reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2658:    function        reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2658:    INTEGER         reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2658:    FLOAT           reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2658:    HEX             reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2658:    LPAREN          reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2658:    LCURLY          reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2658:    not             reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2658:    MINUS           reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2658:    HASH            reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2658:    RCURLY          reduce using rule 140 (fieldsep -> SEMI .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 215
   yacc.py:2544:
   yacc.py:2546:    (136) field -> LSQUARE exp RSQUARE . EQUALS exp
   yacc.py:2547:
   yacc.py:2658:    EQUALS          shift and go to state 232
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 216
   yacc.py:2544:
   yacc.py:2546:    (88) exp -> exp and M_andor exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    or              reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    and             reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    RPAREN          reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    then            reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    COMMA           reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    SEMI            reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    RCURLY          reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    return          reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    break           reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    for             reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    while           reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    repeat          reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    do              reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    function        reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    local           reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    if              reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    LPAREN          reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    ID              reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    RESID           reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    $end            reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    end             reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    until           reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    elseif          reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    else            reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! LT              [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! LE              [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! GT              [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! GE              [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! NE              [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! CHECKEQ         [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 217
   yacc.py:2544:
   yacc.py:2546:    (87) exp -> exp or M_andor exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    or              reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    and             reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    RPAREN          reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    then            reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    COMMA           reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    SEMI            reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    RCURLY          reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    return          reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    break           reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    for             reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    while           reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    repeat          reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    do              reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    function        reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    local           reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    if              reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    LPAREN          reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    ID              reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    RESID           reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    $end            reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    end             reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    until           reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    elseif          reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    else            reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! LT              [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! LE              [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! GT              [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! GE              [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! NE              [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! CHECKEQ         [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 218
   yacc.py:2544:
   yacc.py:2546:    (49) M_if1 -> empty .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 49 (M_if1 -> empty .)
   yacc.py:2658:    break           reduce using rule 49 (M_if1 -> empty .)
   yacc.py:2658:    for             reduce using rule 49 (M_if1 -> empty .)
   yacc.py:2658:    while           reduce using rule 49 (M_if1 -> empty .)
   yacc.py:2658:    repeat          reduce using rule 49 (M_if1 -> empty .)
   yacc.py:2658:    do              reduce using rule 49 (M_if1 -> empty .)
   yacc.py:2658:    function        reduce using rule 49 (M_if1 -> empty .)
   yacc.py:2658:    local           reduce using rule 49 (M_if1 -> empty .)
   yacc.py:2658:    if              reduce using rule 49 (M_if1 -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 49 (M_if1 -> empty .)
   yacc.py:2658:    ID              reduce using rule 49 (M_if1 -> empty .)
   yacc.py:2658:    RESID           reduce using rule 49 (M_if1 -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 219
   yacc.py:2544:
   yacc.py:2546:    (47) stat -> if exp M_bool then M_if1 . block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (36) laststat -> . return retexplist
   yacc.py:2546:    (37) laststat -> . return
   yacc.py:2546:    (38) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat block until exp
   yacc.py:2546:    (19) stat -> . do block end
   yacc.py:2546:    (20) stat -> . function funcname funcbody
   yacc.py:2546:    (21) stat -> . local function names funcbody
   yacc.py:2546:    (22) stat -> . local namelist
   yacc.py:2546:    (23) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (24) stat -> . functioncall
   yacc.py:2546:    (47) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (61) varlist -> . var comvar
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 19
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 10
   yacc.py:2685:    var                            shift and go to state 11
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    functioncall                   shift and go to state 12
   yacc.py:2685:    block                          shift and go to state 233
   yacc.py:2685:    sdash                          shift and go to state 61
   yacc.py:2542:
   yacc.py:2543:state 220
   yacc.py:2544:
   yacc.py:2546:    (66) explist -> exp COMMA explist .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    return          reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    break           reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    for             reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    while           reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    repeat          reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    do              reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    function        reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    local           reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    if              reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    LPAREN          reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    ID              reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    RESID           reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    $end            reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    end             reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    until           reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    elseif          reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    else            reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2658:    RPAREN          reduce using rule 66 (explist -> exp COMMA explist .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 221
   yacc.py:2544:
   yacc.py:2546:    (14) stat -> for namelist in explist do . block end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (36) laststat -> . return retexplist
   yacc.py:2546:    (37) laststat -> . return
   yacc.py:2546:    (38) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat block until exp
   yacc.py:2546:    (19) stat -> . do block end
   yacc.py:2546:    (20) stat -> . function funcname funcbody
   yacc.py:2546:    (21) stat -> . local function names funcbody
   yacc.py:2546:    (22) stat -> . local namelist
   yacc.py:2546:    (23) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (24) stat -> . functioncall
   yacc.py:2546:    (47) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (61) varlist -> . var comvar
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 19
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 10
   yacc.py:2685:    var                            shift and go to state 11
   yacc.py:2685:    functioncall                   shift and go to state 12
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    sdash                          shift and go to state 61
   yacc.py:2685:    block                          shift and go to state 234
   yacc.py:2542:
   yacc.py:2543:state 222
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for names EQUALS exp COMMA . exp do block end
   yacc.py:2546:    (13) stat -> for names EQUALS exp COMMA . exp COMMA exp do block end
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    exp                            shift and go to state 235
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2542:
   yacc.py:2543:state 223
   yacc.py:2544:
   yacc.py:2546:    (45) comid -> COMMA names comid .
   yacc.py:2547:
   yacc.py:2658:    in              reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    EQUALS          reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    SEMI            reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    return          reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    break           reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    for             reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    while           reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    repeat          reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    do              reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    function        reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    local           reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    if              reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    LPAREN          reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    ID              reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    RESID           reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    $end            reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    end             reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    until           reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    elseif          reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    else            reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    COMMA           reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2658:    RPAREN          reduce using rule 45 (comid -> COMMA names comid .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 224
   yacc.py:2544:
   yacc.py:2546:    (114) retexp -> exp and M_andor exp .
   yacc.py:2546:    (88) exp -> exp and M_andor exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 114 (retexp -> exp and M_andor exp .)
   yacc.py:2658:    $end            reduce using rule 114 (retexp -> exp and M_andor exp .)
   yacc.py:2658:    SEMI            reduce using rule 114 (retexp -> exp and M_andor exp .)
   yacc.py:2658:    end             reduce using rule 114 (retexp -> exp and M_andor exp .)
   yacc.py:2658:    until           reduce using rule 114 (retexp -> exp and M_andor exp .)
   yacc.py:2658:    elseif          reduce using rule 114 (retexp -> exp and M_andor exp .)
   yacc.py:2658:    else            reduce using rule 114 (retexp -> exp and M_andor exp .)
   yacc.py:2658:    and             reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    or              reduce using rule 88 (exp -> exp and M_andor exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! LT              [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! LE              [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! GT              [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! GE              [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! NE              [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! CHECKEQ         [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 88 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 225
   yacc.py:2544:
   yacc.py:2546:    (115) retexp -> exp or M_andor exp .
   yacc.py:2546:    (87) exp -> exp or M_andor exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 115 (retexp -> exp or M_andor exp .)
   yacc.py:2658:    $end            reduce using rule 115 (retexp -> exp or M_andor exp .)
   yacc.py:2658:    SEMI            reduce using rule 115 (retexp -> exp or M_andor exp .)
   yacc.py:2658:    end             reduce using rule 115 (retexp -> exp or M_andor exp .)
   yacc.py:2658:    until           reduce using rule 115 (retexp -> exp or M_andor exp .)
   yacc.py:2658:    elseif          reduce using rule 115 (retexp -> exp or M_andor exp .)
   yacc.py:2658:    else            reduce using rule 115 (retexp -> exp or M_andor exp .)
   yacc.py:2658:    and             reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    or              reduce using rule 87 (exp -> exp or M_andor exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! LT              [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! LE              [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! GT              [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! GE              [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! NE              [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! CHECKEQ         [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 87 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! or              [ shift and go to state 97 ]
   yacc.py:2667:  ! and             [ shift and go to state 93 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 226
   yacc.py:2544:
   yacc.py:2546:    (17) M_while2 -> empty .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    break           reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    for             reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    while           reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    repeat          reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    do              reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    function        reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    local           reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    if              reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    ID              reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    RESID           reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 227
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> while M_while1 exp do M_while2 . block end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (36) laststat -> . return retexplist
   yacc.py:2546:    (37) laststat -> . return
   yacc.py:2546:    (38) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat block until exp
   yacc.py:2546:    (19) stat -> . do block end
   yacc.py:2546:    (20) stat -> . function funcname funcbody
   yacc.py:2546:    (21) stat -> . local function names funcbody
   yacc.py:2546:    (22) stat -> . local namelist
   yacc.py:2546:    (23) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (24) stat -> . functioncall
   yacc.py:2546:    (47) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (61) varlist -> . var comvar
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 19
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 10
   yacc.py:2685:    var                            shift and go to state 11
   yacc.py:2685:    functioncall                   shift and go to state 12
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    sdash                          shift and go to state 61
   yacc.py:2685:    block                          shift and go to state 236
   yacc.py:2542:
   yacc.py:2543:state 228
   yacc.py:2544:
   yacc.py:2546:    (35) comtrp -> COMMA TRPLDOTS .
   yacc.py:2547:
   yacc.py:2658:    RPAREN          reduce using rule 35 (comtrp -> COMMA TRPLDOTS .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 229
   yacc.py:2544:
   yacc.py:2546:    (26) funcbody -> LPAREN parlist RPAREN block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 237
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 230
   yacc.py:2544:
   yacc.py:2546:    (25) funcbody -> LPAREN RPAREN block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    return          reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    break           reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    for             reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    while           reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    repeat          reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    do              reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    function        reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    local           reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    if              reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    LPAREN          reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    ID              reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    RESID           reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    $end            reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    end             reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    until           reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    elseif          reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    else            reduce using rule 25 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 231
   yacc.py:2544:
   yacc.py:2546:    (134) fieldseplist -> fieldseplist fieldsep field .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 134 (fieldseplist -> fieldseplist fieldsep field .)
   yacc.py:2658:    SEMI            reduce using rule 134 (fieldseplist -> fieldseplist fieldsep field .)
   yacc.py:2658:    RCURLY          reduce using rule 134 (fieldseplist -> fieldseplist fieldsep field .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 232
   yacc.py:2544:
   yacc.py:2546:    (136) field -> LSQUARE exp RSQUARE EQUALS . exp
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 238
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 233
   yacc.py:2544:
   yacc.py:2546:    (47) stat -> if exp M_bool then M_if1 block . M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (50) M_if_block_end -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    elseif          reduce using rule 123 (empty -> .)
   yacc.py:2658:    else            reduce using rule 123 (empty -> .)
   yacc.py:2658:    end             reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 239
   yacc.py:2685:    M_if_block_end                 shift and go to state 240
   yacc.py:2542:
   yacc.py:2543:state 234
   yacc.py:2544:
   yacc.py:2546:    (14) stat -> for namelist in explist do block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 241
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 235
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for names EQUALS exp COMMA exp . do block end
   yacc.py:2546:    (13) stat -> for names EQUALS exp COMMA exp . COMMA exp do block end
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    do              shift and go to state 243
   yacc.py:2658:    COMMA           shift and go to state 242
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    or              shift and go to state 97
   yacc.py:2658:    and             shift and go to state 93
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 236
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> while M_while1 exp do M_while2 block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 244
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 237
   yacc.py:2544:
   yacc.py:2546:    (26) funcbody -> LPAREN parlist RPAREN block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    return          reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    break           reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    for             reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    while           reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    repeat          reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    do              reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    function        reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    local           reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    if              reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    LPAREN          reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    ID              reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    RESID           reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    $end            reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    end             reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    until           reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    elseif          reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    else            reduce using rule 26 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 238
   yacc.py:2544:
   yacc.py:2546:    (136) field -> LSQUARE exp RSQUARE EQUALS exp .
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 136 (field -> LSQUARE exp RSQUARE EQUALS exp .)
   yacc.py:2658:    SEMI            reduce using rule 136 (field -> LSQUARE exp RSQUARE EQUALS exp .)
   yacc.py:2658:    RCURLY          reduce using rule 136 (field -> LSQUARE exp RSQUARE EQUALS exp .)
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    or              shift and go to state 97
   yacc.py:2658:    and             shift and go to state 93
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 239
   yacc.py:2544:
   yacc.py:2546:    (50) M_if_block_end -> empty .
   yacc.py:2547:
   yacc.py:2658:    elseif          reduce using rule 50 (M_if_block_end -> empty .)
   yacc.py:2658:    else            reduce using rule 50 (M_if_block_end -> empty .)
   yacc.py:2658:    end             reduce using rule 50 (M_if_block_end -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 240
   yacc.py:2544:
   yacc.py:2546:    (47) stat -> if exp M_bool then M_if1 block M_if_block_end . ifblock M_if_tail end
   yacc.py:2546:    (56) ifblock -> . elseif exp M_bool then M_else_block1 block M_else_block_end ifblock M_ifblock_end
   yacc.py:2546:    (57) ifblock -> . opt_else
   yacc.py:2546:    (52) opt_else -> . else M_else block M_else_block
   yacc.py:2546:    (53) opt_else -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    elseif          shift and go to state 249
   yacc.py:2658:    else            shift and go to state 248
   yacc.py:2658:    end             reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    opt_else                       shift and go to state 245
   yacc.py:2685:    empty                          shift and go to state 246
   yacc.py:2685:    ifblock                        shift and go to state 247
   yacc.py:2542:
   yacc.py:2543:state 241
   yacc.py:2544:
   yacc.py:2546:    (14) stat -> for namelist in explist do block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    return          reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    break           reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    for             reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    while           reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    repeat          reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    do              reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    function        reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    local           reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    if              reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    LPAREN          reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    ID              reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    RESID           reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    end             reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    $end            reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    until           reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    elseif          reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    else            reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 242
   yacc.py:2544:
   yacc.py:2546:    (13) stat -> for names EQUALS exp COMMA exp COMMA . exp do block end
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    exp                            shift and go to state 250
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2542:
   yacc.py:2543:state 243
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for names EQUALS exp COMMA exp do . block end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (36) laststat -> . return retexplist
   yacc.py:2546:    (37) laststat -> . return
   yacc.py:2546:    (38) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat block until exp
   yacc.py:2546:    (19) stat -> . do block end
   yacc.py:2546:    (20) stat -> . function funcname funcbody
   yacc.py:2546:    (21) stat -> . local function names funcbody
   yacc.py:2546:    (22) stat -> . local namelist
   yacc.py:2546:    (23) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (24) stat -> . functioncall
   yacc.py:2546:    (47) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (61) varlist -> . var comvar
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 19
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 10
   yacc.py:2685:    var                            shift and go to state 11
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    functioncall                   shift and go to state 12
   yacc.py:2685:    block                          shift and go to state 251
   yacc.py:2685:    sdash                          shift and go to state 61
   yacc.py:2542:
   yacc.py:2543:state 244
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> while M_while1 exp do M_while2 block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    return          reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    break           reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    for             reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    while           reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    repeat          reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    do              reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    function        reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    local           reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    if              reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    LPAREN          reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    ID              reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    RESID           reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    end             reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    $end            reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    until           reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    elseif          reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    else            reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 245
   yacc.py:2544:
   yacc.py:2546:    (57) ifblock -> opt_else .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 57 (ifblock -> opt_else .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 246
   yacc.py:2544:
   yacc.py:2546:    (53) opt_else -> empty .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 53 (opt_else -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 247
   yacc.py:2544:
   yacc.py:2546:    (47) stat -> if exp M_bool then M_if1 block M_if_block_end ifblock . M_if_tail end
   yacc.py:2546:    (51) M_if_tail -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 252
   yacc.py:2685:    M_if_tail                      shift and go to state 253
   yacc.py:2542:
   yacc.py:2543:state 248
   yacc.py:2544:
   yacc.py:2546:    (52) opt_else -> else . M_else block M_else_block
   yacc.py:2546:    (54) M_else -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 123 (empty -> .)
   yacc.py:2658:    break           reduce using rule 123 (empty -> .)
   yacc.py:2658:    for             reduce using rule 123 (empty -> .)
   yacc.py:2658:    while           reduce using rule 123 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 123 (empty -> .)
   yacc.py:2658:    do              reduce using rule 123 (empty -> .)
   yacc.py:2658:    function        reduce using rule 123 (empty -> .)
   yacc.py:2658:    local           reduce using rule 123 (empty -> .)
   yacc.py:2658:    if              reduce using rule 123 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 123 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 123 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 254
   yacc.py:2685:    M_else                         shift and go to state 255
   yacc.py:2542:
   yacc.py:2543:state 249
   yacc.py:2544:
   yacc.py:2546:    (56) ifblock -> elseif . exp M_bool then M_else_block1 block M_else_block_end ifblock M_ifblock_end
   yacc.py:2546:    (68) exp -> . nil
   yacc.py:2546:    (69) exp -> . Number
   yacc.py:2546:    (70) exp -> . STRING
   yacc.py:2546:    (71) exp -> . true
   yacc.py:2546:    (72) exp -> . false
   yacc.py:2546:    (73) exp -> . TRPLDOTS
   yacc.py:2546:    (74) exp -> . function
   yacc.py:2546:    (75) exp -> . prefixexp
   yacc.py:2546:    (76) exp -> . exp PLUS exp
   yacc.py:2546:    (77) exp -> . exp MINUS exp
   yacc.py:2546:    (78) exp -> . exp TIMES exp
   yacc.py:2546:    (79) exp -> . exp DIVIDE exp
   yacc.py:2546:    (80) exp -> . exp POWER exp
   yacc.py:2546:    (81) exp -> . exp LT exp
   yacc.py:2546:    (82) exp -> . exp LE exp
   yacc.py:2546:    (83) exp -> . exp GT exp
   yacc.py:2546:    (84) exp -> . exp GE exp
   yacc.py:2546:    (85) exp -> . exp NE exp
   yacc.py:2546:    (86) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (87) exp -> . exp or M_andor exp
   yacc.py:2546:    (88) exp -> . exp and M_andor exp
   yacc.py:2546:    (90) exp -> . exp MODULO exp
   yacc.py:2546:    (91) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (92) exp -> . tableconstructor
   yacc.py:2546:    (93) exp -> . unop exp
   yacc.py:2546:    (120) Number -> . INTEGER
   yacc.py:2546:    (121) Number -> . FLOAT
   yacc.py:2546:    (122) Number -> . HEX
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (130) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (131) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (127) unop -> . not
   yacc.py:2546:    (128) unop -> . MINUS
   yacc.py:2546:    (129) unop -> . HASH
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 34
   yacc.py:2658:    STRING          shift and go to state 33
   yacc.py:2658:    true            shift and go to state 37
   yacc.py:2658:    false           shift and go to state 25
   yacc.py:2658:    TRPLDOTS        shift and go to state 43
   yacc.py:2658:    function        shift and go to state 32
   yacc.py:2658:    INTEGER         shift and go to state 31
   yacc.py:2658:    FLOAT           shift and go to state 38
   yacc.py:2658:    HEX             shift and go to state 35
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 26
   yacc.py:2658:    not             shift and go to state 36
   yacc.py:2658:    MINUS           shift and go to state 28
   yacc.py:2658:    HASH            shift and go to state 27
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 29
   yacc.py:2685:    tableconstructor               shift and go to state 24
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    Number                         shift and go to state 39
   yacc.py:2685:    unop                           shift and go to state 42
   yacc.py:2685:    functioncall                   shift and go to state 40
   yacc.py:2685:    exp                            shift and go to state 256
   yacc.py:2685:    var                            shift and go to state 30
   yacc.py:2542:
   yacc.py:2543:state 250
   yacc.py:2544:
   yacc.py:2546:    (13) stat -> for names EQUALS exp COMMA exp COMMA exp . do block end
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    do              shift and go to state 257
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    or              shift and go to state 97
   yacc.py:2658:    and             shift and go to state 93
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 251
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for names EQUALS exp COMMA exp do block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 258
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 252
   yacc.py:2544:
   yacc.py:2546:    (51) M_if_tail -> empty .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 51 (M_if_tail -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 253
   yacc.py:2544:
   yacc.py:2546:    (47) stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 259
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 254
   yacc.py:2544:
   yacc.py:2546:    (54) M_else -> empty .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 54 (M_else -> empty .)
   yacc.py:2658:    break           reduce using rule 54 (M_else -> empty .)
   yacc.py:2658:    for             reduce using rule 54 (M_else -> empty .)
   yacc.py:2658:    while           reduce using rule 54 (M_else -> empty .)
   yacc.py:2658:    repeat          reduce using rule 54 (M_else -> empty .)
   yacc.py:2658:    do              reduce using rule 54 (M_else -> empty .)
   yacc.py:2658:    function        reduce using rule 54 (M_else -> empty .)
   yacc.py:2658:    local           reduce using rule 54 (M_else -> empty .)
   yacc.py:2658:    if              reduce using rule 54 (M_else -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 54 (M_else -> empty .)
   yacc.py:2658:    ID              reduce using rule 54 (M_else -> empty .)
   yacc.py:2658:    RESID           reduce using rule 54 (M_else -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 255
   yacc.py:2544:
   yacc.py:2546:    (52) opt_else -> else M_else . block M_else_block
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (36) laststat -> . return retexplist
   yacc.py:2546:    (37) laststat -> . return
   yacc.py:2546:    (38) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat block until exp
   yacc.py:2546:    (19) stat -> . do block end
   yacc.py:2546:    (20) stat -> . function funcname funcbody
   yacc.py:2546:    (21) stat -> . local function names funcbody
   yacc.py:2546:    (22) stat -> . local namelist
   yacc.py:2546:    (23) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (24) stat -> . functioncall
   yacc.py:2546:    (47) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (61) varlist -> . var comvar
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 19
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 10
   yacc.py:2685:    var                            shift and go to state 11
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    functioncall                   shift and go to state 12
   yacc.py:2685:    block                          shift and go to state 260
   yacc.py:2685:    sdash                          shift and go to state 61
   yacc.py:2542:
   yacc.py:2543:state 256
   yacc.py:2544:
   yacc.py:2546:    (56) ifblock -> elseif exp . M_bool then M_else_block1 block M_else_block_end ifblock M_ifblock_end
   yacc.py:2546:    (76) exp -> exp . PLUS exp
   yacc.py:2546:    (77) exp -> exp . MINUS exp
   yacc.py:2546:    (78) exp -> exp . TIMES exp
   yacc.py:2546:    (79) exp -> exp . DIVIDE exp
   yacc.py:2546:    (80) exp -> exp . POWER exp
   yacc.py:2546:    (81) exp -> exp . LT exp
   yacc.py:2546:    (82) exp -> exp . LE exp
   yacc.py:2546:    (83) exp -> exp . GT exp
   yacc.py:2546:    (84) exp -> exp . GE exp
   yacc.py:2546:    (85) exp -> exp . NE exp
   yacc.py:2546:    (86) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (87) exp -> exp . or M_andor exp
   yacc.py:2546:    (88) exp -> exp . and M_andor exp
   yacc.py:2546:    (90) exp -> exp . MODULO exp
   yacc.py:2546:    (91) exp -> exp . DBLDOTS exp
   yacc.py:2546:    (48) M_bool -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    PLUS            shift and go to state 103
   yacc.py:2658:    MINUS           shift and go to state 106
   yacc.py:2658:    TIMES           shift and go to state 99
   yacc.py:2658:    DIVIDE          shift and go to state 108
   yacc.py:2658:    POWER           shift and go to state 96
   yacc.py:2658:    LT              shift and go to state 101
   yacc.py:2658:    LE              shift and go to state 94
   yacc.py:2658:    GT              shift and go to state 102
   yacc.py:2658:    GE              shift and go to state 98
   yacc.py:2658:    NE              shift and go to state 107
   yacc.py:2658:    CHECKEQ         shift and go to state 100
   yacc.py:2658:    or              shift and go to state 97
   yacc.py:2658:    and             shift and go to state 93
   yacc.py:2658:    MODULO          shift and go to state 104
   yacc.py:2658:    DBLDOTS         shift and go to state 105
   yacc.py:2658:    then            reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 113
   yacc.py:2685:    M_bool                         shift and go to state 261
   yacc.py:2542:
   yacc.py:2543:state 257
   yacc.py:2544:
   yacc.py:2546:    (13) stat -> for names EQUALS exp COMMA exp COMMA exp do . block end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (36) laststat -> . return retexplist
   yacc.py:2546:    (37) laststat -> . return
   yacc.py:2546:    (38) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat block until exp
   yacc.py:2546:    (19) stat -> . do block end
   yacc.py:2546:    (20) stat -> . function funcname funcbody
   yacc.py:2546:    (21) stat -> . local function names funcbody
   yacc.py:2546:    (22) stat -> . local namelist
   yacc.py:2546:    (23) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (24) stat -> . functioncall
   yacc.py:2546:    (47) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (61) varlist -> . var comvar
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 19
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 10
   yacc.py:2685:    var                            shift and go to state 11
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    functioncall                   shift and go to state 12
   yacc.py:2685:    block                          shift and go to state 262
   yacc.py:2685:    sdash                          shift and go to state 61
   yacc.py:2542:
   yacc.py:2543:state 258
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for names EQUALS exp COMMA exp do block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    return          reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    break           reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    for             reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    while           reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    repeat          reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    do              reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    function        reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    local           reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    if              reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    LPAREN          reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    ID              reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    RESID           reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    end             reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    $end            reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    until           reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    elseif          reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    else            reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 259
   yacc.py:2544:
   yacc.py:2546:    (47) stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    return          reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    break           reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    for             reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    while           reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    repeat          reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    do              reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    function        reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    local           reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    if              reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    LPAREN          reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    ID              reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    RESID           reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    end             reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    $end            reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    until           reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    elseif          reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    else            reduce using rule 47 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 260
   yacc.py:2544:
   yacc.py:2546:    (52) opt_else -> else M_else block . M_else_block
   yacc.py:2546:    (55) M_else_block -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    M_else_block                   shift and go to state 263
   yacc.py:2685:    empty                          shift and go to state 264
   yacc.py:2542:
   yacc.py:2543:state 261
   yacc.py:2544:
   yacc.py:2546:    (56) ifblock -> elseif exp M_bool . then M_else_block1 block M_else_block_end ifblock M_ifblock_end
   yacc.py:2547:
   yacc.py:2658:    then            shift and go to state 265
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 262
   yacc.py:2544:
   yacc.py:2546:    (13) stat -> for names EQUALS exp COMMA exp COMMA exp do block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 266
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 263
   yacc.py:2544:
   yacc.py:2546:    (52) opt_else -> else M_else block M_else_block .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 52 (opt_else -> else M_else block M_else_block .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 264
   yacc.py:2544:
   yacc.py:2546:    (55) M_else_block -> empty .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 55 (M_else_block -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 265
   yacc.py:2544:
   yacc.py:2546:    (56) ifblock -> elseif exp M_bool then . M_else_block1 block M_else_block_end ifblock M_ifblock_end
   yacc.py:2546:    (58) M_else_block1 -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 123 (empty -> .)
   yacc.py:2658:    break           reduce using rule 123 (empty -> .)
   yacc.py:2658:    for             reduce using rule 123 (empty -> .)
   yacc.py:2658:    while           reduce using rule 123 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 123 (empty -> .)
   yacc.py:2658:    do              reduce using rule 123 (empty -> .)
   yacc.py:2658:    function        reduce using rule 123 (empty -> .)
   yacc.py:2658:    local           reduce using rule 123 (empty -> .)
   yacc.py:2658:    if              reduce using rule 123 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 123 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 123 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    M_else_block1                  shift and go to state 267
   yacc.py:2685:    empty                          shift and go to state 268
   yacc.py:2542:
   yacc.py:2543:state 266
   yacc.py:2544:
   yacc.py:2546:    (13) stat -> for names EQUALS exp COMMA exp COMMA exp do block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    return          reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    break           reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    for             reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    while           reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    repeat          reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    do              reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    function        reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    local           reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    if              reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    LPAREN          reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    ID              reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    RESID           reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    end             reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    $end            reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    until           reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    elseif          reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    else            reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 267
   yacc.py:2544:
   yacc.py:2546:    (56) ifblock -> elseif exp M_bool then M_else_block1 . block M_else_block_end ifblock M_ifblock_end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (36) laststat -> . return retexplist
   yacc.py:2546:    (37) laststat -> . return
   yacc.py:2546:    (38) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat block until exp
   yacc.py:2546:    (19) stat -> . do block end
   yacc.py:2546:    (20) stat -> . function funcname funcbody
   yacc.py:2546:    (21) stat -> . local function names funcbody
   yacc.py:2546:    (22) stat -> . local namelist
   yacc.py:2546:    (23) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (24) stat -> . functioncall
   yacc.py:2546:    (47) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (61) varlist -> . var comvar
   yacc.py:2546:    (27) functioncall -> . prefixexp args
   yacc.py:2546:    (62) var -> . names
   yacc.py:2546:    (63) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (64) var -> . prefixexp SDOT names
   yacc.py:2546:    (124) prefixexp -> . var
   yacc.py:2546:    (125) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (126) prefixexp -> . functioncall
   yacc.py:2546:    (141) names -> . ID
   yacc.py:2546:    (142) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 19
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 10
   yacc.py:2685:    var                            shift and go to state 11
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    functioncall                   shift and go to state 12
   yacc.py:2685:    block                          shift and go to state 269
   yacc.py:2685:    sdash                          shift and go to state 61
   yacc.py:2542:
   yacc.py:2543:state 268
   yacc.py:2544:
   yacc.py:2546:    (58) M_else_block1 -> empty .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 58 (M_else_block1 -> empty .)
   yacc.py:2658:    break           reduce using rule 58 (M_else_block1 -> empty .)
   yacc.py:2658:    for             reduce using rule 58 (M_else_block1 -> empty .)
   yacc.py:2658:    while           reduce using rule 58 (M_else_block1 -> empty .)
   yacc.py:2658:    repeat          reduce using rule 58 (M_else_block1 -> empty .)
   yacc.py:2658:    do              reduce using rule 58 (M_else_block1 -> empty .)
   yacc.py:2658:    function        reduce using rule 58 (M_else_block1 -> empty .)
   yacc.py:2658:    local           reduce using rule 58 (M_else_block1 -> empty .)
   yacc.py:2658:    if              reduce using rule 58 (M_else_block1 -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 58 (M_else_block1 -> empty .)
   yacc.py:2658:    ID              reduce using rule 58 (M_else_block1 -> empty .)
   yacc.py:2658:    RESID           reduce using rule 58 (M_else_block1 -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 269
   yacc.py:2544:
   yacc.py:2546:    (56) ifblock -> elseif exp M_bool then M_else_block1 block . M_else_block_end ifblock M_ifblock_end
   yacc.py:2546:    (59) M_else_block_end -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    elseif          reduce using rule 123 (empty -> .)
   yacc.py:2658:    else            reduce using rule 123 (empty -> .)
   yacc.py:2658:    end             reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 270
   yacc.py:2685:    M_else_block_end               shift and go to state 271
   yacc.py:2542:
   yacc.py:2543:state 270
   yacc.py:2544:
   yacc.py:2546:    (59) M_else_block_end -> empty .
   yacc.py:2547:
   yacc.py:2658:    elseif          reduce using rule 59 (M_else_block_end -> empty .)
   yacc.py:2658:    else            reduce using rule 59 (M_else_block_end -> empty .)
   yacc.py:2658:    end             reduce using rule 59 (M_else_block_end -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 271
   yacc.py:2544:
   yacc.py:2546:    (56) ifblock -> elseif exp M_bool then M_else_block1 block M_else_block_end . ifblock M_ifblock_end
   yacc.py:2546:    (56) ifblock -> . elseif exp M_bool then M_else_block1 block M_else_block_end ifblock M_ifblock_end
   yacc.py:2546:    (57) ifblock -> . opt_else
   yacc.py:2546:    (52) opt_else -> . else M_else block M_else_block
   yacc.py:2546:    (53) opt_else -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    elseif          shift and go to state 249
   yacc.py:2658:    else            shift and go to state 248
   yacc.py:2658:    end             reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    opt_else                       shift and go to state 245
   yacc.py:2685:    ifblock                        shift and go to state 272
   yacc.py:2685:    empty                          shift and go to state 246
   yacc.py:2542:
   yacc.py:2543:state 272
   yacc.py:2544:
   yacc.py:2546:    (56) ifblock -> elseif exp M_bool then M_else_block1 block M_else_block_end ifblock . M_ifblock_end
   yacc.py:2546:    (60) M_ifblock_end -> . empty
   yacc.py:2546:    (123) empty -> .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 123 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    M_ifblock_end                  shift and go to state 273
   yacc.py:2685:    empty                          shift and go to state 274
   yacc.py:2542:
   yacc.py:2543:state 273
   yacc.py:2544:
   yacc.py:2546:    (56) ifblock -> elseif exp M_bool then M_else_block1 block M_else_block_end ifblock M_ifblock_end .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 56 (ifblock -> elseif exp M_bool then M_else_block1 block M_else_block_end ifblock M_ifblock_end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 274
   yacc.py:2544:
   yacc.py:2546:    (60) M_ifblock_end -> empty .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 60 (M_ifblock_end -> empty .)
   yacc.py:2660:
   yacc.py:3428:
   yacc.py:3429:Conflicts:
   yacc.py:3430:
   yacc.py:3433:shift/reduce conflict for LPAREN in state 29 resolved as shift
   yacc.py:3439:reduce/reduce conflict in state 12 resolved using rule (stat -> functioncall)
   yacc.py:3440:rejected rule (prefixexp -> functioncall) in state 12
   yacc.py: 360:PLY: PARSE DEBUG START
   yacc.py: 408:
   yacc.py: 409:State  : 0
   yacc.py: 433:Stack  : . LexToken(ID,'x',1,0)
   yacc.py: 443:Action : Shift and goto state 18
   yacc.py: 408:
   yacc.py: 409:State  : 18
   yacc.py: 433:Stack  : ID . LexToken(EQUALS,'=',1,2)
   yacc.py: 469:Action : Reduce rule [names -> ID] with ['x'] and goto state 5
   yacc.py: 503:Result : <str @ 0x7f9944411d00> ('x')
   yacc.py: 408:
   yacc.py: 409:State  : 5
   yacc.py: 433:Stack  : names . LexToken(EQUALS,'=',1,2)
   yacc.py: 469:Action : Reduce rule [var -> names] with ['x'] and goto state 11
   yacc.py: 503:Result : <Symbol @ 0x7f993d6a4f90> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 11
   yacc.py: 433:Stack  : var . LexToken(EQUALS,'=',1,2)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 60
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 60
   yacc.py: 428:Defaulted state 60: Reduce using 44
   yacc.py: 433:Stack  : var empty . LexToken(EQUALS,'=',1,2)
   yacc.py: 469:Action : Reduce rule [comvar -> empty] with [None] and goto state 59
   yacc.py: 503:Result : <list @ 0x7f993d43f9e0> ([])
   yacc.py: 408:
   yacc.py: 409:State  : 59
   yacc.py: 428:Defaulted state 59: Reduce using 61
   yacc.py: 433:Stack  : var comvar . LexToken(EQUALS,'=',1,2)
   yacc.py: 469:Action : Reduce rule [varlist -> var comvar] with [<Symbol @ 0x7f993d6a4f90>,[]] and goto state 9
   yacc.py: 503:Result : <list @ 0x7f993d578cf8> ([<SymbolTable.Symbol object at 0x7f993d6 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 9
   yacc.py: 433:Stack  : varlist . LexToken(EQUALS,'=',1,2)
   yacc.py: 443:Action : Shift and goto state 56
   yacc.py: 408:
   yacc.py: 409:State  : 56
   yacc.py: 433:Stack  : varlist EQUALS . LexToken(INTEGER,'2',1,4)
   yacc.py: 443:Action : Shift and goto state 31
   yacc.py: 408:
   yacc.py: 409:State  : 31
   yacc.py: 433:Stack  : varlist EQUALS INTEGER . LexToken(ID,'y',1,6)
   yacc.py: 469:Action : Reduce rule [Number -> INTEGER] with ['2'] and goto state 39
   yacc.py: 503:Result : <Symbol @ 0x7f993d6f7150> (<SymbolTable.Symbol object at 0x7f993d6f ...)
   yacc.py: 408:
   yacc.py: 409:State  : 39
   yacc.py: 433:Stack  : varlist EQUALS Number . LexToken(ID,'y',1,6)
   yacc.py: 469:Action : Reduce rule [exp -> Number] with [<Symbol @ 0x7f993d6f7150>] and goto state 117
   yacc.py: 503:Result : <Symbol @ 0x7f993d6f7150> (<SymbolTable.Symbol object at 0x7f993d6f ...)
   yacc.py: 408:
   yacc.py: 409:State  : 117
   yacc.py: 433:Stack  : varlist EQUALS exp . LexToken(ID,'y',1,6)
   yacc.py: 469:Action : Reduce rule [explist -> exp] with [<Symbol @ 0x7f993d6f7150>] and goto state 124
   yacc.py: 503:Result : <list @ 0x7f993d43f9e0> ([<SymbolTable.Symbol object at 0x7f993d6 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 124
   yacc.py: 433:Stack  : varlist EQUALS explist . LexToken(ID,'y',1,6)
   yacc.py: 469:Action : Reduce rule [stat -> varlist EQUALS explist] with [<list @ 0x7f993d578cf8>,'=',<list @ 0x7f993d43f9e0>] and goto state 14
   yacc.py: 503:Result : <Symbol @ 0x7f993d6adbd0> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 14
   yacc.py: 433:Stack  : stat . LexToken(ID,'y',1,6)
   yacc.py: 469:Action : Reduce rule [chunk -> stat] with [<Symbol @ 0x7f993d6adbd0>] and goto state 4
   yacc.py: 503:Result : <Symbol @ 0x7f993d6f7150> (<SymbolTable.Symbol object at 0x7f993d6f ...)
   yacc.py: 408:
   yacc.py: 409:State  : 4
   yacc.py: 433:Stack  : chunk . LexToken(ID,'y',1,6)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 46
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 46
   yacc.py: 433:Stack  : chunk empty . LexToken(ID,'y',1,6)
   yacc.py: 469:Action : Reduce rule [M_chunk -> empty] with [None] and goto state 44
   yacc.py: 503:Result : <Symbol @ 0x7f993d6adbd0> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 44
   yacc.py: 433:Stack  : chunk M_chunk . LexToken(ID,'y',1,6)
   yacc.py: 443:Action : Shift and goto state 18
   yacc.py: 408:
   yacc.py: 409:State  : 18
   yacc.py: 433:Stack  : chunk M_chunk ID . LexToken(EQUALS,'=',1,8)
   yacc.py: 469:Action : Reduce rule [names -> ID] with ['y'] and goto state 5
   yacc.py: 503:Result : <str @ 0x7f9944367418> ('y')
   yacc.py: 408:
   yacc.py: 409:State  : 5
   yacc.py: 433:Stack  : chunk M_chunk names . LexToken(EQUALS,'=',1,8)
   yacc.py: 469:Action : Reduce rule [var -> names] with ['y'] and goto state 11
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad850> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 11
   yacc.py: 433:Stack  : chunk M_chunk var . LexToken(EQUALS,'=',1,8)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 60
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 60
   yacc.py: 428:Defaulted state 60: Reduce using 44
   yacc.py: 433:Stack  : chunk M_chunk var empty . LexToken(EQUALS,'=',1,8)
   yacc.py: 469:Action : Reduce rule [comvar -> empty] with [None] and goto state 59
   yacc.py: 503:Result : <list @ 0x7f993d43f9e0> ([])
   yacc.py: 408:
   yacc.py: 409:State  : 59
   yacc.py: 428:Defaulted state 59: Reduce using 61
   yacc.py: 433:Stack  : chunk M_chunk var comvar . LexToken(EQUALS,'=',1,8)
   yacc.py: 469:Action : Reduce rule [varlist -> var comvar] with [<Symbol @ 0x7f993d6ad850>,[]] and goto state 9
   yacc.py: 503:Result : <list @ 0x7f993d5786c8> ([<SymbolTable.Symbol object at 0x7f993d6 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 9
   yacc.py: 433:Stack  : chunk M_chunk varlist . LexToken(EQUALS,'=',1,8)
   yacc.py: 443:Action : Shift and goto state 56
   yacc.py: 408:
   yacc.py: 409:State  : 56
   yacc.py: 433:Stack  : chunk M_chunk varlist EQUALS . LexToken(INTEGER,'1',1,10)
   yacc.py: 443:Action : Shift and goto state 31
   yacc.py: 408:
   yacc.py: 409:State  : 31
   yacc.py: 433:Stack  : chunk M_chunk varlist EQUALS INTEGER . LexToken(while,'while',1,12)
   yacc.py: 469:Action : Reduce rule [Number -> INTEGER] with ['1'] and goto state 39
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad590> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 39
   yacc.py: 433:Stack  : chunk M_chunk varlist EQUALS Number . LexToken(while,'while',1,12)
   yacc.py: 469:Action : Reduce rule [exp -> Number] with [<Symbol @ 0x7f993d6ad590>] and goto state 117
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad590> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 117
   yacc.py: 433:Stack  : chunk M_chunk varlist EQUALS exp . LexToken(while,'while',1,12)
   yacc.py: 469:Action : Reduce rule [explist -> exp] with [<Symbol @ 0x7f993d6ad590>] and goto state 124
   yacc.py: 503:Result : <list @ 0x7f993d43f9e0> ([<SymbolTable.Symbol object at 0x7f993d6 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 124
   yacc.py: 433:Stack  : chunk M_chunk varlist EQUALS explist . LexToken(while,'while',1,12)
   yacc.py: 469:Action : Reduce rule [stat -> varlist EQUALS explist] with [<list @ 0x7f993d5786c8>,'=',<list @ 0x7f993d43f9e0>] and goto state 110
   yacc.py: 503:Result : <Symbol @ 0x7f993d6add50> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 110
   yacc.py: 433:Stack  : chunk M_chunk stat . LexToken(while,'while',1,12)
   yacc.py: 469:Action : Reduce rule [chunk -> chunk M_chunk stat] with [<Symbol @ 0x7f993d6f7150>,<Symbol @ 0x7f993d6adbd0>,<Symbol @ 0x7f993d6add50>] and goto state 4
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad590> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 4
   yacc.py: 433:Stack  : chunk . LexToken(while,'while',1,12)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 46
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 46
   yacc.py: 433:Stack  : chunk empty . LexToken(while,'while',1,12)
   yacc.py: 469:Action : Reduce rule [M_chunk -> empty] with [None] and goto state 44
   yacc.py: 503:Result : <Symbol @ 0x7f993d6f7150> (<SymbolTable.Symbol object at 0x7f993d6f ...)
   yacc.py: 408:
   yacc.py: 409:State  : 44
   yacc.py: 433:Stack  : chunk M_chunk . LexToken(while,'while',1,12)
   yacc.py: 443:Action : Shift and goto state 20
   yacc.py: 408:
   yacc.py: 409:State  : 20
   yacc.py: 433:Stack  : chunk M_chunk while . LexToken(ID,'x',1,18)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 81
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 81
   yacc.py: 433:Stack  : chunk M_chunk while empty . LexToken(ID,'x',1,18)
   yacc.py: 469:Action : Reduce rule [M_while1 -> empty] with [None] and goto state 80
   yacc.py: 503:Result : <Symbol @ 0x7f993d6add50> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 80
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 . LexToken(ID,'x',1,18)
   yacc.py: 443:Action : Shift and goto state 18
   yacc.py: 408:
   yacc.py: 409:State  : 18
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 ID . LexToken(LT,'<',1,19)
   yacc.py: 469:Action : Reduce rule [names -> ID] with ['x'] and goto state 5
   yacc.py: 503:Result : <str @ 0x7f9944411d00> ('x')
   yacc.py: 408:
   yacc.py: 409:State  : 5
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 names . LexToken(LT,'<',1,19)
   yacc.py: 469:Action : Reduce rule [var -> names] with ['x'] and goto state 30
   yacc.py: 503:Result : <Symbol @ 0x7f993d6adbd0> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 30
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 var . LexToken(LT,'<',1,19)
   yacc.py: 469:Action : Reduce rule [prefixexp -> var] with [<Symbol @ 0x7f993d6adbd0>] and goto state 29
   yacc.py: 503:Result : <Symbol @ 0x7f993d6adbd0> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 29
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 prefixexp . LexToken(LT,'<',1,19)
   yacc.py: 469:Action : Reduce rule [exp -> prefixexp] with [<Symbol @ 0x7f993d6adbd0>] and goto state 148
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad190> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 148
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp . LexToken(LT,'<',1,19)
   yacc.py: 443:Action : Shift and goto state 101
   yacc.py: 408:
   yacc.py: 409:State  : 101
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp LT . LexToken(INTEGER,'10',1,20)
   yacc.py: 443:Action : Shift and goto state 31
   yacc.py: 408:
   yacc.py: 409:State  : 31
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp LT INTEGER . LexToken(and,'and',1,23)
   yacc.py: 469:Action : Reduce rule [Number -> INTEGER] with ['10'] and goto state 39
   yacc.py: 503:Result : <Symbol @ 0x7f993d6adbd0> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 39
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp LT Number . LexToken(and,'and',1,23)
   yacc.py: 469:Action : Reduce rule [exp -> Number] with [<Symbol @ 0x7f993d6adbd0>] and goto state 168
   yacc.py: 503:Result : <Symbol @ 0x7f993d6adbd0> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 168
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp LT exp . LexToken(and,'and',1,23)
   yacc.py: 469:Action : Reduce rule [exp -> exp LT exp] with [<Symbol @ 0x7f993d6ad190>,'<',<Symbol @ 0x7f993d6adbd0>] and goto state 148
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b1a50> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 148
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp . LexToken(and,'and',1,23)
   yacc.py: 443:Action : Shift and goto state 93
   yacc.py: 408:
   yacc.py: 409:State  : 93
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp and . LexToken(ID,'y',1,27)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 160
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 160
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp and empty . LexToken(ID,'y',1,27)
   yacc.py: 469:Action : Reduce rule [M_andor -> empty] with [None] and goto state 161
   yacc.py: 503:Result : <Symbol @ 0x7f993d6adbd0> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 161
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp and M_andor . LexToken(ID,'y',1,27)
   yacc.py: 443:Action : Shift and goto state 18
   yacc.py: 408:
   yacc.py: 409:State  : 18
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp and M_andor ID . LexToken(GT,'>',1,29)
   yacc.py: 469:Action : Reduce rule [names -> ID] with ['y'] and goto state 5
   yacc.py: 503:Result : <str @ 0x7f9944367418> ('y')
   yacc.py: 408:
   yacc.py: 409:State  : 5
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp and M_andor names . LexToken(GT,'>',1,29)
   yacc.py: 469:Action : Reduce rule [var -> names] with ['y'] and goto state 30
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad190> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 30
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp and M_andor var . LexToken(GT,'>',1,29)
   yacc.py: 469:Action : Reduce rule [prefixexp -> var] with [<Symbol @ 0x7f993d6ad190>] and goto state 29
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad190> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 29
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp and M_andor prefixexp . LexToken(GT,'>',1,29)
   yacc.py: 469:Action : Reduce rule [exp -> prefixexp] with [<Symbol @ 0x7f993d6ad190>] and goto state 216
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b1ad0> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 216
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp and M_andor exp . LexToken(GT,'>',1,29)
   yacc.py: 443:Action : Shift and goto state 102
   yacc.py: 408:
   yacc.py: 409:State  : 102
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp and M_andor exp GT . LexToken(INTEGER,'2',1,30)
   yacc.py: 443:Action : Shift and goto state 31
   yacc.py: 408:
   yacc.py: 409:State  : 31
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp and M_andor exp GT INTEGER . LexToken(do,'do',1,32)
   yacc.py: 469:Action : Reduce rule [Number -> INTEGER] with ['2'] and goto state 39
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad190> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 39
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp and M_andor exp GT Number . LexToken(do,'do',1,32)
   yacc.py: 469:Action : Reduce rule [exp -> Number] with [<Symbol @ 0x7f993d6ad190>] and goto state 169
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad190> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 169
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp and M_andor exp GT exp . LexToken(do,'do',1,32)
   yacc.py: 469:Action : Reduce rule [exp -> exp GT exp] with [<Symbol @ 0x7f993d6b1ad0>,'>',<Symbol @ 0x7f993d6ad190>] and goto state 216
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b17d0> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 216
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp and M_andor exp . LexToken(do,'do',1,32)
   yacc.py: 469:Action : Reduce rule [exp -> exp and M_andor exp] with [<Symbol @ 0x7f993d6b1a50>,'and',<Symbol @ 0x7f993d6adbd0>,<Symbol @ 0x7f993d6b17d0>] and goto state 148
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b1ad0> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 148
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp . LexToken(do,'do',1,32)
   yacc.py: 443:Action : Shift and goto state 205
   yacc.py: 408:
   yacc.py: 409:State  : 205
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do . LexToken(ID,'x',1,38)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 226
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 226
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do empty . LexToken(ID,'x',1,38)
   yacc.py: 469:Action : Reduce rule [M_while2 -> empty] with [None] and goto state 227
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b17d0> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 227
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 . LexToken(ID,'x',1,38)
   yacc.py: 443:Action : Shift and goto state 18
   yacc.py: 408:
   yacc.py: 409:State  : 18
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 ID . LexToken(EQUALS,'=',1,40)
   yacc.py: 469:Action : Reduce rule [names -> ID] with ['x'] and goto state 5
   yacc.py: 503:Result : <str @ 0x7f9944411d00> ('x')
   yacc.py: 408:
   yacc.py: 409:State  : 5
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 names . LexToken(EQUALS,'=',1,40)
   yacc.py: 469:Action : Reduce rule [var -> names] with ['x'] and goto state 11
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b1a50> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 11
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 var . LexToken(EQUALS,'=',1,40)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 60
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 60
   yacc.py: 428:Defaulted state 60: Reduce using 44
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 var empty . LexToken(EQUALS,'=',1,40)
   yacc.py: 469:Action : Reduce rule [comvar -> empty] with [None] and goto state 59
   yacc.py: 503:Result : <list @ 0x7f993d587ea8> ([])
   yacc.py: 408:
   yacc.py: 409:State  : 59
   yacc.py: 428:Defaulted state 59: Reduce using 61
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 var comvar . LexToken(EQUALS,'=',1,40)
   yacc.py: 469:Action : Reduce rule [varlist -> var comvar] with [<Symbol @ 0x7f993d6b1a50>,[]] and goto state 9
   yacc.py: 503:Result : <list @ 0x7f993d5786c8> ([<SymbolTable.Symbol object at 0x7f993d6 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 9
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 varlist . LexToken(EQUALS,'=',1,40)
   yacc.py: 443:Action : Shift and goto state 56
   yacc.py: 408:
   yacc.py: 409:State  : 56
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 varlist EQUALS . LexToken(ID,'x',1,42)
   yacc.py: 443:Action : Shift and goto state 18
   yacc.py: 408:
   yacc.py: 409:State  : 18
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 varlist EQUALS ID . LexToken(PLUS,'+',1,44)
   yacc.py: 469:Action : Reduce rule [names -> ID] with ['x'] and goto state 5
   yacc.py: 503:Result : <str @ 0x7f9944411d00> ('x')
   yacc.py: 408:
   yacc.py: 409:State  : 5
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 varlist EQUALS names . LexToken(PLUS,'+',1,44)
   yacc.py: 469:Action : Reduce rule [var -> names] with ['x'] and goto state 30
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad190> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 30
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 varlist EQUALS var . LexToken(PLUS,'+',1,44)
   yacc.py: 469:Action : Reduce rule [prefixexp -> var] with [<Symbol @ 0x7f993d6ad190>] and goto state 29
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad190> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 29
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 varlist EQUALS prefixexp . LexToken(PLUS,'+',1,44)
   yacc.py: 469:Action : Reduce rule [exp -> prefixexp] with [<Symbol @ 0x7f993d6ad190>] and goto state 117
   yacc.py: 503:Result : <Symbol @ 0x7f993d6adbd0> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 117
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 varlist EQUALS exp . LexToken(PLUS,'+',1,44)
   yacc.py: 443:Action : Shift and goto state 103
   yacc.py: 408:
   yacc.py: 409:State  : 103
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 varlist EQUALS exp PLUS . LexToken(INTEGER,'1',1,46)
   yacc.py: 443:Action : Shift and goto state 31
   yacc.py: 408:
   yacc.py: 409:State  : 31
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 varlist EQUALS exp PLUS INTEGER . LexToken(if,'if',1,51)
   yacc.py: 469:Action : Reduce rule [Number -> INTEGER] with ['1'] and goto state 39
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad190> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 39
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 varlist EQUALS exp PLUS Number . LexToken(if,'if',1,51)
   yacc.py: 469:Action : Reduce rule [exp -> Number] with [<Symbol @ 0x7f993d6ad190>] and goto state 170
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad190> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 170
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 varlist EQUALS exp PLUS exp . LexToken(if,'if',1,51)
   yacc.py: 469:Action : Reduce rule [exp -> exp PLUS exp] with [<Symbol @ 0x7f993d6adbd0>,'+',<Symbol @ 0x7f993d6ad190>] and goto state 117
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b6f10> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 117
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 varlist EQUALS exp . LexToken(if,'if',1,51)
   yacc.py: 469:Action : Reduce rule [explist -> exp] with [<Symbol @ 0x7f993d6b6f10>] and goto state 124
   yacc.py: 503:Result : <list @ 0x7f993d578cf8> ([<SymbolTable.Symbol object at 0x7f993d6 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 124
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 varlist EQUALS explist . LexToken(if,'if',1,51)
   yacc.py: 469:Action : Reduce rule [stat -> varlist EQUALS explist] with [<list @ 0x7f993d5786c8>,'=',<list @ 0x7f993d578cf8>] and goto state 14
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad190> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 14
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 stat . LexToken(if,'if',1,51)
   yacc.py: 469:Action : Reduce rule [chunk -> stat] with [<Symbol @ 0x7f993d6ad190>] and goto state 4
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b1a50> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 4
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk . LexToken(if,'if',1,51)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 46
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 46
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk empty . LexToken(if,'if',1,51)
   yacc.py: 469:Action : Reduce rule [M_chunk -> empty] with [None] and goto state 44
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b15d0> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 44
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk . LexToken(if,'if',1,51)
   yacc.py: 443:Action : Shift and goto state 6
   yacc.py: 408:
   yacc.py: 409:State  : 6
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if . LexToken(ID,'x',1,54)
   yacc.py: 443:Action : Shift and goto state 18
   yacc.py: 408:
   yacc.py: 409:State  : 18
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if ID . LexToken(GT,'>',1,55)
   yacc.py: 469:Action : Reduce rule [names -> ID] with ['x'] and goto state 5
   yacc.py: 503:Result : <str @ 0x7f9944411d00> ('x')
   yacc.py: 408:
   yacc.py: 409:State  : 5
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if names . LexToken(GT,'>',1,55)
   yacc.py: 469:Action : Reduce rule [var -> names] with ['x'] and goto state 30
   yacc.py: 503:Result : <Symbol @ 0x7f993d6adf50> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 30
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if var . LexToken(GT,'>',1,55)
   yacc.py: 469:Action : Reduce rule [prefixexp -> var] with [<Symbol @ 0x7f993d6adf50>] and goto state 29
   yacc.py: 503:Result : <Symbol @ 0x7f993d6adf50> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 29
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if prefixexp . LexToken(GT,'>',1,55)
   yacc.py: 469:Action : Reduce rule [exp -> prefixexp] with [<Symbol @ 0x7f993d6adf50>] and goto state 47
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad190> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 47
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp . LexToken(GT,'>',1,55)
   yacc.py: 443:Action : Shift and goto state 102
   yacc.py: 408:
   yacc.py: 409:State  : 102
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp GT . LexToken(INTEGER,'3',1,56)
   yacc.py: 443:Action : Shift and goto state 31
   yacc.py: 408:
   yacc.py: 409:State  : 31
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp GT INTEGER . LexToken(then,'then',1,58)
   yacc.py: 469:Action : Reduce rule [Number -> INTEGER] with ['3'] and goto state 39
   yacc.py: 503:Result : <Symbol @ 0x7f993d6adf50> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 39
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp GT Number . LexToken(then,'then',1,58)
   yacc.py: 469:Action : Reduce rule [exp -> Number] with [<Symbol @ 0x7f993d6adf50>] and goto state 169
   yacc.py: 503:Result : <Symbol @ 0x7f993d6adf50> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 169
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp GT exp . LexToken(then,'then',1,58)
   yacc.py: 469:Action : Reduce rule [exp -> exp GT exp] with [<Symbol @ 0x7f993d6ad190>,'>',<Symbol @ 0x7f993d6adf50>] and goto state 47
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b6cd0> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 47
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp . LexToken(then,'then',1,58)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 113
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 113
   yacc.py: 428:Defaulted state 113: Reduce using 48
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp empty . LexToken(then,'then',1,58)
   yacc.py: 469:Action : Reduce rule [M_bool -> empty] with [None] and goto state 112
   yacc.py: 503:Result : <Symbol @ 0x7f993d6adf50> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 112
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool . LexToken(then,'then',1,58)
   yacc.py: 443:Action : Shift and goto state 178
   yacc.py: 408:
   yacc.py: 409:State  : 178
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then . LexToken(ID,'y',1,69)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 218
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 218
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then empty . LexToken(ID,'y',1,69)
   yacc.py: 469:Action : Reduce rule [M_if1 -> empty] with [None] and goto state 219
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad190> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 219
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 . LexToken(ID,'y',1,69)
   yacc.py: 443:Action : Shift and goto state 18
   yacc.py: 408:
   yacc.py: 409:State  : 18
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 ID . LexToken(EQUALS,'=',1,71)
   yacc.py: 469:Action : Reduce rule [names -> ID] with ['y'] and goto state 5
   yacc.py: 503:Result : <str @ 0x7f9944367418> ('y')
   yacc.py: 408:
   yacc.py: 409:State  : 5
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 names . LexToken(EQUALS,'=',1,71)
   yacc.py: 469:Action : Reduce rule [var -> names] with ['y'] and goto state 11
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b6f10> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 11
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 var . LexToken(EQUALS,'=',1,71)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 60
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 60
   yacc.py: 428:Defaulted state 60: Reduce using 44
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 var empty . LexToken(EQUALS,'=',1,71)
   yacc.py: 469:Action : Reduce rule [comvar -> empty] with [None] and goto state 59
   yacc.py: 503:Result : <list @ 0x7f993d570fc8> ([])
   yacc.py: 408:
   yacc.py: 409:State  : 59
   yacc.py: 428:Defaulted state 59: Reduce using 61
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 var comvar . LexToken(EQUALS,'=',1,71)
   yacc.py: 469:Action : Reduce rule [varlist -> var comvar] with [<Symbol @ 0x7f993d6b6f10>,[]] and goto state 9
   yacc.py: 503:Result : <list @ 0x7f993d578cf8> ([<SymbolTable.Symbol object at 0x7f993d6 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 9
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 varlist . LexToken(EQUALS,'=',1,71)
   yacc.py: 443:Action : Shift and goto state 56
   yacc.py: 408:
   yacc.py: 409:State  : 56
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 varlist EQUALS . LexToken(ID,'y',1,73)
   yacc.py: 443:Action : Shift and goto state 18
   yacc.py: 408:
   yacc.py: 409:State  : 18
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 varlist EQUALS ID . LexToken(PLUS,'+',1,75)
   yacc.py: 469:Action : Reduce rule [names -> ID] with ['y'] and goto state 5
   yacc.py: 503:Result : <str @ 0x7f9944367418> ('y')
   yacc.py: 408:
   yacc.py: 409:State  : 5
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 varlist EQUALS names . LexToken(PLUS,'+',1,75)
   yacc.py: 469:Action : Reduce rule [var -> names] with ['y'] and goto state 30
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b37d0> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 30
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 varlist EQUALS var . LexToken(PLUS,'+',1,75)
   yacc.py: 469:Action : Reduce rule [prefixexp -> var] with [<Symbol @ 0x7f993d6b37d0>] and goto state 29
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b37d0> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 29
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 varlist EQUALS prefixexp . LexToken(PLUS,'+',1,75)
   yacc.py: 469:Action : Reduce rule [exp -> prefixexp] with [<Symbol @ 0x7f993d6b37d0>] and goto state 117
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b3f10> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 117
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 varlist EQUALS exp . LexToken(PLUS,'+',1,75)
   yacc.py: 443:Action : Shift and goto state 103
   yacc.py: 408:
   yacc.py: 409:State  : 103
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 varlist EQUALS exp PLUS . LexToken(INTEGER,'1',1,77)
   yacc.py: 443:Action : Shift and goto state 31
   yacc.py: 408:
   yacc.py: 409:State  : 31
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 varlist EQUALS exp PLUS INTEGER . LexToken(ID,'y',1,85)
   yacc.py: 469:Action : Reduce rule [Number -> INTEGER] with ['1'] and goto state 39
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b37d0> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 39
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 varlist EQUALS exp PLUS Number . LexToken(ID,'y',1,85)
   yacc.py: 469:Action : Reduce rule [exp -> Number] with [<Symbol @ 0x7f993d6b37d0>] and goto state 170
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b37d0> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 170
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 varlist EQUALS exp PLUS exp . LexToken(ID,'y',1,85)
   yacc.py: 469:Action : Reduce rule [exp -> exp PLUS exp] with [<Symbol @ 0x7f993d6b3f10>,'+',<Symbol @ 0x7f993d6b37d0>] and goto state 117
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b3950> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 117
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 varlist EQUALS exp . LexToken(ID,'y',1,85)
   yacc.py: 469:Action : Reduce rule [explist -> exp] with [<Symbol @ 0x7f993d6b3950>] and goto state 124
   yacc.py: 503:Result : <list @ 0x7f993d5787e8> ([<SymbolTable.Symbol object at 0x7f993d6 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 124
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 varlist EQUALS explist . LexToken(ID,'y',1,85)
   yacc.py: 469:Action : Reduce rule [stat -> varlist EQUALS explist] with [<list @ 0x7f993d578cf8>,'=',<list @ 0x7f993d5787e8>] and goto state 14
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b37d0> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 14
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 stat . LexToken(ID,'y',1,85)
   yacc.py: 469:Action : Reduce rule [chunk -> stat] with [<Symbol @ 0x7f993d6b37d0>] and goto state 4
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b6f10> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 4
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk . LexToken(ID,'y',1,85)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 46
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 46
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk empty . LexToken(ID,'y',1,85)
   yacc.py: 469:Action : Reduce rule [M_chunk -> empty] with [None] and goto state 44
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b37d0> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 44
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk M_chunk . LexToken(ID,'y',1,85)
   yacc.py: 443:Action : Shift and goto state 18
   yacc.py: 408:
   yacc.py: 409:State  : 18
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk M_chunk ID . LexToken(EQUALS,'=',1,87)
   yacc.py: 469:Action : Reduce rule [names -> ID] with ['y'] and goto state 5
   yacc.py: 503:Result : <str @ 0x7f9944367418> ('y')
   yacc.py: 408:
   yacc.py: 409:State  : 5
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk M_chunk names . LexToken(EQUALS,'=',1,87)
   yacc.py: 469:Action : Reduce rule [var -> names] with ['y'] and goto state 11
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b3e10> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 11
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk M_chunk var . LexToken(EQUALS,'=',1,87)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 60
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 60
   yacc.py: 428:Defaulted state 60: Reduce using 44
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk M_chunk var empty . LexToken(EQUALS,'=',1,87)
   yacc.py: 469:Action : Reduce rule [comvar -> empty] with [None] and goto state 59
   yacc.py: 503:Result : <list @ 0x7f993d570fc8> ([])
   yacc.py: 408:
   yacc.py: 409:State  : 59
   yacc.py: 428:Defaulted state 59: Reduce using 61
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk M_chunk var comvar . LexToken(EQUALS,'=',1,87)
   yacc.py: 469:Action : Reduce rule [varlist -> var comvar] with [<Symbol @ 0x7f993d6b3e10>,[]] and goto state 9
   yacc.py: 503:Result : <list @ 0x7f993d578290> ([<SymbolTable.Symbol object at 0x7f993d6 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 9
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk M_chunk varlist . LexToken(EQUALS,'=',1,87)
   yacc.py: 443:Action : Shift and goto state 56
   yacc.py: 408:
   yacc.py: 409:State  : 56
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk M_chunk varlist EQUALS . LexToken(INTEGER,'4',1,89)
   yacc.py: 443:Action : Shift and goto state 31
   yacc.py: 408:
   yacc.py: 409:State  : 31
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk M_chunk varlist EQUALS INTEGER . LexToken(end,'end',1,94)
   yacc.py: 469:Action : Reduce rule [Number -> INTEGER] with ['4'] and goto state 39
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b3750> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 39
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk M_chunk varlist EQUALS Number . LexToken(end,'end',1,94)
   yacc.py: 469:Action : Reduce rule [exp -> Number] with [<Symbol @ 0x7f993d6b3750>] and goto state 117
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b3750> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 117
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk M_chunk varlist EQUALS exp . LexToken(end,'end',1,94)
   yacc.py: 469:Action : Reduce rule [explist -> exp] with [<Symbol @ 0x7f993d6b3750>] and goto state 124
   yacc.py: 503:Result : <list @ 0x7f993d570fc8> ([<SymbolTable.Symbol object at 0x7f993d6 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 124
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk M_chunk varlist EQUALS explist . LexToken(end,'end',1,94)
   yacc.py: 469:Action : Reduce rule [stat -> varlist EQUALS explist] with [<list @ 0x7f993d578290>,'=',<list @ 0x7f993d570fc8>] and goto state 110
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b3b50> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 110
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk M_chunk stat . LexToken(end,'end',1,94)
   yacc.py: 469:Action : Reduce rule [chunk -> chunk M_chunk stat] with [<Symbol @ 0x7f993d6b6f10>,<Symbol @ 0x7f993d6b37d0>,<Symbol @ 0x7f993d6b3b50>] and goto state 4
   yacc.py: 503:Result : <Symbol @ 0x7f993d716290> (<SymbolTable.Symbol object at 0x7f993d71 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 4
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk . LexToken(end,'end',1,94)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 46
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 46
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk empty . LexToken(end,'end',1,94)
   yacc.py: 469:Action : Reduce rule [M_chunk -> empty] with [None] and goto state 44
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b6f10> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 44
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 chunk M_chunk . LexToken(end,'end',1,94)
   yacc.py: 469:Action : Reduce rule [sdash -> chunk M_chunk] with [<Symbol @ 0x7f993d716290>,<Symbol @ 0x7f993d6b6f10>] and goto state 61
   yacc.py: 503:Result : <Symbol @ 0x7f993d716290> (<SymbolTable.Symbol object at 0x7f993d71 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 61
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 sdash . LexToken(end,'end',1,94)
   yacc.py: 469:Action : Reduce rule [block -> sdash] with [<Symbol @ 0x7f993d716290>] and goto state 233
   yacc.py: 503:Result : <Symbol @ 0x7f993d716290> (<SymbolTable.Symbol object at 0x7f993d71 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 233
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 block . LexToken(end,'end',1,94)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 239
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 239
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 block empty . LexToken(end,'end',1,94)
   yacc.py: 469:Action : Reduce rule [M_if_block_end -> empty] with [None] and goto state 240
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b6f10> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 240
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 block M_if_block_end . LexToken(end,'end',1,94)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 246
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 246
   yacc.py: 428:Defaulted state 246: Reduce using 53
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 block M_if_block_end empty . LexToken(end,'end',1,94)
   yacc.py: 469:Action : Reduce rule [opt_else -> empty] with [None] and goto state 245
   yacc.py: 503:Result : <Symbol @ 0x7f993d7162d0> (<SymbolTable.Symbol object at 0x7f993d71 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 245
   yacc.py: 428:Defaulted state 245: Reduce using 57
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 block M_if_block_end opt_else . LexToken(end,'end',1,94)
   yacc.py: 469:Action : Reduce rule [ifblock -> opt_else] with [<Symbol @ 0x7f993d7162d0>] and goto state 247
   yacc.py: 503:Result : <Symbol @ 0x7f993d716150> (<SymbolTable.Symbol object at 0x7f993d71 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 247
   yacc.py: 428:Defaulted state 247: Reduce using 123
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 block M_if_block_end ifblock . LexToken(end,'end',1,94)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 252
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 252
   yacc.py: 428:Defaulted state 252: Reduce using 51
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 block M_if_block_end ifblock empty . LexToken(end,'end',1,94)
   yacc.py: 469:Action : Reduce rule [M_if_tail -> empty] with [None] and goto state 253
   yacc.py: 503:Result : <Symbol @ 0x7f993d7162d0> (<SymbolTable.Symbol object at 0x7f993d71 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 253
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail . LexToken(end,'end',1,94)
   yacc.py: 443:Action : Shift and goto state 259
   yacc.py: 408:
   yacc.py: 409:State  : 259
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end . LexToken(end,'end',1,98)
   yacc.py: 469:Action : Reduce rule [stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end] with ['if',<Symbol @ 0x7f993d6b6cd0>,<Symbol @ 0x7f993d6adf50>,'then',<Symbol @ 0x7f993d6ad190>,<Symbol @ 0x7f993d716290>,<Symbol @ 0x7f993d6b6f10>,<Symbol @ 0x7f993d716150>,<Symbol @ 0x7f993d7162d0>,'end'] and goto state 110
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b3e10> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 110
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk stat . LexToken(end,'end',1,98)
   yacc.py: 469:Action : Reduce rule [chunk -> chunk M_chunk stat] with [<Symbol @ 0x7f993d6b1a50>,<Symbol @ 0x7f993d6b15d0>,<Symbol @ 0x7f993d6b3e10>] and goto state 4
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad190> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 4
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk . LexToken(end,'end',1,98)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 46
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 46
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk empty . LexToken(end,'end',1,98)
   yacc.py: 469:Action : Reduce rule [M_chunk -> empty] with [None] and goto state 44
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b1a50> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 44
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 chunk M_chunk . LexToken(end,'end',1,98)
   yacc.py: 469:Action : Reduce rule [sdash -> chunk M_chunk] with [<Symbol @ 0x7f993d6ad190>,<Symbol @ 0x7f993d6b1a50>] and goto state 61
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad190> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 61
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 sdash . LexToken(end,'end',1,98)
   yacc.py: 469:Action : Reduce rule [block -> sdash] with [<Symbol @ 0x7f993d6ad190>] and goto state 236
   yacc.py: 503:Result : <Symbol @ 0x7f993d6ad190> (<SymbolTable.Symbol object at 0x7f993d6a ...)
   yacc.py: 408:
   yacc.py: 409:State  : 236
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 block . LexToken(end,'end',1,98)
   yacc.py: 443:Action : Shift and goto state 244
   yacc.py: 408:
   yacc.py: 409:State  : 244
   yacc.py: 433:Stack  : chunk M_chunk while M_while1 exp do M_while2 block end . $end
   yacc.py: 469:Action : Reduce rule [stat -> while M_while1 exp do M_while2 block end] with ['while',<Symbol @ 0x7f993d6add50>,<Symbol @ 0x7f993d6b1ad0>,'do',<Symbol @ 0x7f993d6b17d0>,<Symbol @ 0x7f993d6ad190>,'end'] and goto state 110
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b1a50> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 110
   yacc.py: 433:Stack  : chunk M_chunk stat . $end
   yacc.py: 469:Action : Reduce rule [chunk -> chunk M_chunk stat] with [<Symbol @ 0x7f993d6ad590>,<Symbol @ 0x7f993d6f7150>,<Symbol @ 0x7f993d6b1a50>] and goto state 4
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b10d0> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 4
   yacc.py: 433:Stack  : chunk . $end
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 46
   yacc.py: 542:Result : <NoneType @ 0x7f994422eda0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 46
   yacc.py: 433:Stack  : chunk empty . $end
   yacc.py: 469:Action : Reduce rule [M_chunk -> empty] with [None] and goto state 44
   yacc.py: 503:Result : <Symbol @ 0x7f993d6f7150> (<SymbolTable.Symbol object at 0x7f993d6f ...)
   yacc.py: 408:
   yacc.py: 409:State  : 44
   yacc.py: 433:Stack  : chunk M_chunk . $end
   yacc.py: 469:Action : Reduce rule [sdash -> chunk M_chunk] with [<Symbol @ 0x7f993d6b10d0>,<Symbol @ 0x7f993d6f7150>] and goto state 21
   yacc.py: 503:Result : <Symbol @ 0x7f993d6b10d0> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 408:
   yacc.py: 409:State  : 21
   yacc.py: 433:Stack  : sdash . $end
   yacc.py: 564:Done   : Returning <Symbol @ 0x7f993d6b10d0> (<SymbolTable.Symbol object at 0x7f993d6b ...)
   yacc.py: 565:PLY: PARSE DEBUG END
