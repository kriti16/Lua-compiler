   yacc.py:3288:Created by PLY version 3.8 (http://www.dabeaz.com/ply)
   yacc.py:3339:
   yacc.py:3340:Unused terminals:
   yacc.py:3341:
   yacc.py:3344:    NEWLINE
   yacc.py:3344:    TDASH
   yacc.py:3348:
   yacc.py:3349:Grammar
   yacc.py:3350:
   yacc.py:3352:Rule 0     S' -> sdash
   yacc.py:3352:Rule 1     sdash -> chunk M_chunk
   yacc.py:3352:Rule 2     sdash -> chunk laststat M_chunk
   yacc.py:3352:Rule 3     sdash -> laststat M_chunk
   yacc.py:3352:Rule 4     sdash -> chunk laststat M_chunk SEMI
   yacc.py:3352:Rule 5     chunk -> chunk M_chunk stat SEMI
   yacc.py:3352:Rule 6     chunk -> stat SEMI
   yacc.py:3352:Rule 7     chunk -> chunk M_chunk stat
   yacc.py:3352:Rule 8     chunk -> stat
   yacc.py:3352:Rule 9     M_chunk -> empty
   yacc.py:3352:Rule 10    block -> sdash
   yacc.py:3352:Rule 11    stat -> varlist EQUALS explist
   yacc.py:3352:Rule 12    stat -> for names EQUALS exp COMMA exp do block end
   yacc.py:3352:Rule 13    stat -> for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:3352:Rule 14    stat -> for namelist in explist do block end
   yacc.py:3352:Rule 15    stat -> while M_while1 exp do M_while2 block end
   yacc.py:3352:Rule 16    M_while1 -> empty
   yacc.py:3352:Rule 17    M_while2 -> empty
   yacc.py:3352:Rule 18    stat -> repeat M_while1 block until M_while2 exp
   yacc.py:3352:Rule 19    stat -> do M_sc_beg block M_sc_end end
   yacc.py:3352:Rule 20    M_sc_beg -> empty
   yacc.py:3352:Rule 21    M_sc_end -> empty
   yacc.py:3352:Rule 22    stat -> function funcname funcbody
   yacc.py:3352:Rule 23    stat -> local function names funcbody
   yacc.py:3352:Rule 24    stat -> local namelist
   yacc.py:3352:Rule 25    stat -> local namelist EQUALS explist
   yacc.py:3352:Rule 26    stat -> functioncall
   yacc.py:3352:Rule 27    funcbody -> LPAREN RPAREN block end
   yacc.py:3352:Rule 28    funcbody -> LPAREN parlist RPAREN block end
   yacc.py:3352:Rule 29    functioncall -> prefixexp args
   yacc.py:3352:Rule 30    functioncall -> print args
   yacc.py:3352:Rule 31    functioncall -> scan args
   yacc.py:3352:Rule 32    args -> LPAREN RPAREN
   yacc.py:3352:Rule 33    args -> LPAREN explist RPAREN
   yacc.py:3352:Rule 34    args -> STRING
   yacc.py:3352:Rule 35    args -> tableconstructor
   yacc.py:3352:Rule 36    parlist -> namelist
   yacc.py:3352:Rule 37    parlist -> namelist comtrp
   yacc.py:3352:Rule 38    parlist -> TRPLDOTS
   yacc.py:3352:Rule 39    comtrp -> COMMA TRPLDOTS
   yacc.py:3352:Rule 40    laststat -> return retexplist
   yacc.py:3352:Rule 41    laststat -> return
   yacc.py:3352:Rule 42    laststat -> break
   yacc.py:3352:Rule 43    funcname -> names dotid COLON
   yacc.py:3352:Rule 44    funcname -> names
   yacc.py:3352:Rule 45    dotid -> SDOT names dotid
   yacc.py:3352:Rule 46    dotid -> empty
   yacc.py:3352:Rule 47    comvar -> COMMA var comvar
   yacc.py:3352:Rule 48    comvar -> empty
   yacc.py:3352:Rule 49    comid -> COMMA names comid
   yacc.py:3352:Rule 50    comid -> empty
   yacc.py:3352:Rule 51    stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:3352:Rule 52    M_bool -> empty
   yacc.py:3352:Rule 53    M_if1 -> empty
   yacc.py:3352:Rule 54    M_if_block_end -> empty
   yacc.py:3352:Rule 55    M_if_tail -> empty
   yacc.py:3352:Rule 56    opt_else -> else M_else block M_else_block
   yacc.py:3352:Rule 57    opt_else -> empty
   yacc.py:3352:Rule 58    M_else -> empty
   yacc.py:3352:Rule 59    M_else_block -> empty
   yacc.py:3352:Rule 60    ifblock -> elseif exp M_bool then M_else_block1 block M_else_block_end ifblock M_ifblock_end
   yacc.py:3352:Rule 61    ifblock -> opt_else
   yacc.py:3352:Rule 62    M_else_block1 -> empty
   yacc.py:3352:Rule 63    M_else_block_end -> empty
   yacc.py:3352:Rule 64    M_ifblock_end -> empty
   yacc.py:3352:Rule 65    varlist -> var comvar
   yacc.py:3352:Rule 66    var -> names
   yacc.py:3352:Rule 67    var -> prefixexp LSQUARE exp RSQUARE
   yacc.py:3352:Rule 68    var -> prefixexp SDOT names
   yacc.py:3352:Rule 69    namelist -> names comid
   yacc.py:3352:Rule 70    explist -> exp COMMA explist
   yacc.py:3352:Rule 71    explist -> exp
   yacc.py:3352:Rule 72    exp -> nil
   yacc.py:3352:Rule 73    exp -> Number
   yacc.py:3352:Rule 74    exp -> STRING
   yacc.py:3352:Rule 75    exp -> true
   yacc.py:3352:Rule 76    exp -> false
   yacc.py:3352:Rule 77    exp -> TRPLDOTS
   yacc.py:3352:Rule 78    exp -> function
   yacc.py:3352:Rule 79    exp -> prefixexp
   yacc.py:3352:Rule 80    exp -> exp PLUS exp
   yacc.py:3352:Rule 81    exp -> exp MINUS exp
   yacc.py:3352:Rule 82    exp -> exp TIMES exp
   yacc.py:3352:Rule 83    exp -> exp DIVIDE exp
   yacc.py:3352:Rule 84    exp -> exp POWER exp
   yacc.py:3352:Rule 85    exp -> exp LT exp
   yacc.py:3352:Rule 86    exp -> exp LE exp
   yacc.py:3352:Rule 87    exp -> exp GT exp
   yacc.py:3352:Rule 88    exp -> exp GE exp
   yacc.py:3352:Rule 89    exp -> exp NE exp
   yacc.py:3352:Rule 90    exp -> exp CHECKEQ exp
   yacc.py:3352:Rule 91    exp -> exp or M_andor exp
   yacc.py:3352:Rule 92    exp -> exp and M_andor exp
   yacc.py:3352:Rule 93    M_andor -> empty
   yacc.py:3352:Rule 94    exp -> exp MODULO exp
   yacc.py:3352:Rule 95    exp -> exp DBLDOTS exp
   yacc.py:3352:Rule 96    exp -> tableconstructor
   yacc.py:3352:Rule 97    exp -> unop exp
   yacc.py:3352:Rule 98    retexplist -> retexplist COMMA retexp
   yacc.py:3352:Rule 99    retexplist -> retexp
   yacc.py:3352:Rule 100   retexp -> nil
   yacc.py:3352:Rule 101   retexp -> Number
   yacc.py:3352:Rule 102   retexp -> STRING
   yacc.py:3352:Rule 103   retexp -> true
   yacc.py:3352:Rule 104   retexp -> false
   yacc.py:3352:Rule 105   retexp -> TRPLDOTS
   yacc.py:3352:Rule 106   retexp -> prefixexp
   yacc.py:3352:Rule 107   retexp -> exp PLUS exp
   yacc.py:3352:Rule 108   retexp -> exp MINUS exp
   yacc.py:3352:Rule 109   retexp -> exp TIMES exp
   yacc.py:3352:Rule 110   retexp -> exp DIVIDE exp
   yacc.py:3352:Rule 111   retexp -> exp POWER exp
   yacc.py:3352:Rule 112   retexp -> exp LT exp
   yacc.py:3352:Rule 113   retexp -> exp LE exp
   yacc.py:3352:Rule 114   retexp -> exp GT exp
   yacc.py:3352:Rule 115   retexp -> exp GE exp
   yacc.py:3352:Rule 116   retexp -> exp NE exp
   yacc.py:3352:Rule 117   retexp -> exp CHECKEQ exp
   yacc.py:3352:Rule 118   retexp -> exp and M_andor exp
   yacc.py:3352:Rule 119   retexp -> exp or M_andor exp
   yacc.py:3352:Rule 120   retexp -> exp MODULO exp
   yacc.py:3352:Rule 121   retexp -> exp DBLDOTS exp
   yacc.py:3352:Rule 122   retexp -> tableconstructor
   yacc.py:3352:Rule 123   retexp -> unop exp
   yacc.py:3352:Rule 124   Number -> INTEGER
   yacc.py:3352:Rule 125   Number -> FLOAT
   yacc.py:3352:Rule 126   Number -> HEX
   yacc.py:3352:Rule 127   empty -> <empty>
   yacc.py:3352:Rule 128   prefixexp -> var
   yacc.py:3352:Rule 129   prefixexp -> LPAREN exp RPAREN
   yacc.py:3352:Rule 130   prefixexp -> functioncall
   yacc.py:3352:Rule 131   unop -> not
   yacc.py:3352:Rule 132   unop -> MINUS
   yacc.py:3352:Rule 133   unop -> HASH
   yacc.py:3352:Rule 134   tableconstructor -> LCURLY fieldlist RCURLY
   yacc.py:3352:Rule 135   tableconstructor -> LCURLY RCURLY
   yacc.py:3352:Rule 136   fieldlist -> field fieldseplist fieldsep
   yacc.py:3352:Rule 137   fieldlist -> field fieldseplist
   yacc.py:3352:Rule 138   fieldseplist -> fieldseplist fieldsep field
   yacc.py:3352:Rule 139   fieldseplist -> empty
   yacc.py:3352:Rule 140   field -> LSQUARE exp RSQUARE EQUALS exp
   yacc.py:3352:Rule 141   field -> names EQUALS exp
   yacc.py:3352:Rule 142   field -> exp
   yacc.py:3352:Rule 143   fieldsep -> COMMA
   yacc.py:3352:Rule 144   fieldsep -> SEMI
   yacc.py:3352:Rule 145   names -> ID
   yacc.py:3352:Rule 146   names -> RESID
   yacc.py:3370:
   yacc.py:3371:Terminals, with rules where they appear
   yacc.py:3372:
   yacc.py:3376:CHECKEQ              : 90 117
   yacc.py:3376:COLON                : 43
   yacc.py:3376:COMMA                : 12 13 13 39 47 49 70 98 143
   yacc.py:3376:DBLDOTS              : 95 121
   yacc.py:3376:DIVIDE               : 83 110
   yacc.py:3376:EQUALS               : 11 12 13 25 140 141
   yacc.py:3376:FLOAT                : 125
   yacc.py:3376:GE                   : 88 115
   yacc.py:3376:GT                   : 87 114
   yacc.py:3376:HASH                 : 133
   yacc.py:3376:HEX                  : 126
   yacc.py:3376:ID                   : 145
   yacc.py:3376:INTEGER              : 124
   yacc.py:3376:LCURLY               : 134 135
   yacc.py:3376:LE                   : 86 113
   yacc.py:3376:LPAREN               : 27 28 32 33 129
   yacc.py:3376:LSQUARE              : 67 140
   yacc.py:3376:LT                   : 85 112
   yacc.py:3376:MINUS                : 81 108 132
   yacc.py:3376:MODULO               : 94 120
   yacc.py:3376:NE                   : 89 116
   yacc.py:3376:NEWLINE              : 
   yacc.py:3376:PLUS                 : 80 107
   yacc.py:3376:POWER                : 84 111
   yacc.py:3376:RCURLY               : 134 135
   yacc.py:3376:RESID                : 146
   yacc.py:3376:RPAREN               : 27 28 32 33 129
   yacc.py:3376:RSQUARE              : 67 140
   yacc.py:3376:SDOT                 : 45 68
   yacc.py:3376:SEMI                 : 4 5 6 144
   yacc.py:3376:STRING               : 34 74 102
   yacc.py:3376:TDASH                : 
   yacc.py:3376:TIMES                : 82 109
   yacc.py:3376:TRPLDOTS             : 38 39 77 105
   yacc.py:3376:and                  : 92 118
   yacc.py:3376:break                : 42
   yacc.py:3376:do                   : 12 13 14 15 19
   yacc.py:3376:else                 : 56
   yacc.py:3376:elseif               : 60
   yacc.py:3376:end                  : 12 13 14 15 19 27 28 51
   yacc.py:3376:error                : 
   yacc.py:3376:false                : 76 104
   yacc.py:3376:for                  : 12 13 14
   yacc.py:3376:function             : 22 23 78
   yacc.py:3376:if                   : 51
   yacc.py:3376:in                   : 14
   yacc.py:3376:local                : 23 24 25
   yacc.py:3376:nil                  : 72 100
   yacc.py:3376:not                  : 131
   yacc.py:3376:or                   : 91 119
   yacc.py:3376:print                : 30
   yacc.py:3376:repeat               : 18
   yacc.py:3376:return               : 40 41
   yacc.py:3376:scan                 : 31
   yacc.py:3376:then                 : 51 60
   yacc.py:3376:true                 : 75 103
   yacc.py:3376:until                : 18
   yacc.py:3376:while                : 15
   yacc.py:3378:
   yacc.py:3379:Nonterminals, with rules where they appear
   yacc.py:3380:
   yacc.py:3384:M_andor              : 91 92 118 119
   yacc.py:3384:M_bool               : 51 60
   yacc.py:3384:M_chunk              : 1 2 3 4 5 7
   yacc.py:3384:M_else               : 56
   yacc.py:3384:M_else_block         : 56
   yacc.py:3384:M_else_block1        : 60
   yacc.py:3384:M_else_block_end     : 60
   yacc.py:3384:M_if1                : 51
   yacc.py:3384:M_if_block_end       : 51
   yacc.py:3384:M_if_tail            : 51
   yacc.py:3384:M_ifblock_end        : 60
   yacc.py:3384:M_sc_beg             : 19
   yacc.py:3384:M_sc_end             : 19
   yacc.py:3384:M_while1             : 15 18
   yacc.py:3384:M_while2             : 15 18
   yacc.py:3384:Number               : 73 101
   yacc.py:3384:args                 : 29 30 31
   yacc.py:3384:block                : 12 13 14 15 18 19 27 28 51 56 60
   yacc.py:3384:chunk                : 1 2 4 5 7
   yacc.py:3384:comid                : 49 69
   yacc.py:3384:comtrp               : 37
   yacc.py:3384:comvar               : 47 65
   yacc.py:3384:dotid                : 43 45
   yacc.py:3384:empty                : 9 16 17 20 21 46 48 50 52 53 54 55 57 58 59 62 63 64 93 139
   yacc.py:3384:exp                  : 12 12 13 13 13 15 18 51 60 67 70 71 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 94 94 95 95 97 107 107 108 108 109 109 110 110 111 111 112 112 113 113 114 114 115 115 116 116 117 117 118 118 119 119 120 120 121 121 123 129 140 140 141 142
   yacc.py:3384:explist              : 11 14 25 33 70
   yacc.py:3384:field                : 136 137 138
   yacc.py:3384:fieldlist            : 134
   yacc.py:3384:fieldsep             : 136 138
   yacc.py:3384:fieldseplist         : 136 137 138
   yacc.py:3384:funcbody             : 22 23
   yacc.py:3384:funcname             : 22
   yacc.py:3384:functioncall         : 26 130
   yacc.py:3384:ifblock              : 51 60
   yacc.py:3384:laststat             : 2 3 4
   yacc.py:3384:namelist             : 14 24 25 36 37
   yacc.py:3384:names                : 12 13 23 43 44 45 49 66 68 69 141
   yacc.py:3384:opt_else             : 61
   yacc.py:3384:parlist              : 28
   yacc.py:3384:prefixexp            : 29 67 68 79 106
   yacc.py:3384:retexp               : 98 99
   yacc.py:3384:retexplist           : 40 98
   yacc.py:3384:sdash                : 10 0
   yacc.py:3384:stat                 : 5 6 7 8
   yacc.py:3384:tableconstructor     : 35 96 122
   yacc.py:3384:unop                 : 97 123
   yacc.py:3384:var                  : 47 65 128
   yacc.py:3384:varlist              : 11
   yacc.py:3385:
   yacc.py:2524:Parsing method: LALR
   yacc.py:2542:
   yacc.py:2543:state 0
   yacc.py:2544:
   yacc.py:2546:    (0) S' -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (40) laststat -> . return retexplist
   yacc.py:2546:    (41) laststat -> . return
   yacc.py:2546:    (42) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat M_while1 block until M_while2 exp
   yacc.py:2546:    (19) stat -> . do M_sc_beg block M_sc_end end
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (24) stat -> . local namelist
   yacc.py:2546:    (25) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (26) stat -> . functioncall
   yacc.py:2546:    (51) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (65) varlist -> . var comvar
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 17
   yacc.py:2658:    break           shift and go to state 18
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 22
   yacc.py:2658:    repeat          shift and go to state 16
   yacc.py:2658:    do              shift and go to state 14
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 21
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 11
   yacc.py:2685:    var                            shift and go to state 12
   yacc.py:2685:    functioncall                   shift and go to state 13
   yacc.py:2685:    stat                           shift and go to state 15
   yacc.py:2685:    sdash                          shift and go to state 23
   yacc.py:2542:
   yacc.py:2543:state 1
   yacc.py:2544:
   yacc.py:2546:    (22) stat -> function . funcname funcbody
   yacc.py:2546:    (43) funcname -> . names dotid COLON
   yacc.py:2546:    (44) funcname -> . names
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    names                          shift and go to state 25
   yacc.py:2685:    funcname                       shift and go to state 24
   yacc.py:2542:
   yacc.py:2543:state 2
   yacc.py:2544:
   yacc.py:2546:    (146) names -> RESID .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    SDOT            reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    LPAREN          reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    STRING          reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    LCURLY          reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    PLUS            reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    MINUS           reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    TIMES           reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    DIVIDE          reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    POWER           reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    LT              reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    LE              reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    GT              reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    GE              reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    NE              reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    CHECKEQ         reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    or              reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    and             reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    MODULO          reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    DBLDOTS         reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    RPAREN          reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    then            reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    COMMA           reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    SEMI            reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    RCURLY          reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    RSQUARE         reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    return          reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    break           reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    for             reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    while           reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    repeat          reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    do              reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    function        reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    local           reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    if              reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    print           reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    scan            reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    ID              reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    RESID           reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    $end            reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    end             reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    until           reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    elseif          reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    else            reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    EQUALS          reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    in              reduce using rule 146 (names -> RESID .)
   yacc.py:2658:    COLON           reduce using rule 146 (names -> RESID .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 3
   yacc.py:2544:
   yacc.py:2546:    (129) prefixexp -> LPAREN . exp RPAREN
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 43
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 4
   yacc.py:2544:
   yacc.py:2546:    (1) sdash -> chunk . M_chunk
   yacc.py:2546:    (2) sdash -> chunk . laststat M_chunk
   yacc.py:2546:    (4) sdash -> chunk . laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> chunk . M_chunk stat SEMI
   yacc.py:2546:    (7) chunk -> chunk . M_chunk stat
   yacc.py:2546:    (9) M_chunk -> . empty
   yacc.py:2546:    (40) laststat -> . return retexplist
   yacc.py:2546:    (41) laststat -> . return
   yacc.py:2546:    (42) laststat -> . break
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 17
   yacc.py:2658:    break           shift and go to state 18
   yacc.py:2658:    for             reduce using rule 127 (empty -> .)
   yacc.py:2658:    while           reduce using rule 127 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 127 (empty -> .)
   yacc.py:2658:    do              reduce using rule 127 (empty -> .)
   yacc.py:2658:    function        reduce using rule 127 (empty -> .)
   yacc.py:2658:    local           reduce using rule 127 (empty -> .)
   yacc.py:2658:    if              reduce using rule 127 (empty -> .)
   yacc.py:2658:    print           reduce using rule 127 (empty -> .)
   yacc.py:2658:    scan            reduce using rule 127 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 127 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 127 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 127 (empty -> .)
   yacc.py:2658:    $end            reduce using rule 127 (empty -> .)
   yacc.py:2658:    end             reduce using rule 127 (empty -> .)
   yacc.py:2658:    until           reduce using rule 127 (empty -> .)
   yacc.py:2658:    elseif          reduce using rule 127 (empty -> .)
   yacc.py:2658:    else            reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    M_chunk                        shift and go to state 46
   yacc.py:2685:    laststat                       shift and go to state 47
   yacc.py:2685:    empty                          shift and go to state 48
   yacc.py:2542:
   yacc.py:2543:state 5
   yacc.py:2544:
   yacc.py:2546:    (66) var -> names .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 66 (var -> names .)
   yacc.py:2658:    EQUALS          reduce using rule 66 (var -> names .)
   yacc.py:2658:    LSQUARE         reduce using rule 66 (var -> names .)
   yacc.py:2658:    SDOT            reduce using rule 66 (var -> names .)
   yacc.py:2658:    LPAREN          reduce using rule 66 (var -> names .)
   yacc.py:2658:    STRING          reduce using rule 66 (var -> names .)
   yacc.py:2658:    LCURLY          reduce using rule 66 (var -> names .)
   yacc.py:2658:    $end            reduce using rule 66 (var -> names .)
   yacc.py:2658:    SEMI            reduce using rule 66 (var -> names .)
   yacc.py:2658:    end             reduce using rule 66 (var -> names .)
   yacc.py:2658:    until           reduce using rule 66 (var -> names .)
   yacc.py:2658:    elseif          reduce using rule 66 (var -> names .)
   yacc.py:2658:    else            reduce using rule 66 (var -> names .)
   yacc.py:2658:    PLUS            reduce using rule 66 (var -> names .)
   yacc.py:2658:    MINUS           reduce using rule 66 (var -> names .)
   yacc.py:2658:    TIMES           reduce using rule 66 (var -> names .)
   yacc.py:2658:    DIVIDE          reduce using rule 66 (var -> names .)
   yacc.py:2658:    POWER           reduce using rule 66 (var -> names .)
   yacc.py:2658:    LT              reduce using rule 66 (var -> names .)
   yacc.py:2658:    LE              reduce using rule 66 (var -> names .)
   yacc.py:2658:    GT              reduce using rule 66 (var -> names .)
   yacc.py:2658:    GE              reduce using rule 66 (var -> names .)
   yacc.py:2658:    NE              reduce using rule 66 (var -> names .)
   yacc.py:2658:    CHECKEQ         reduce using rule 66 (var -> names .)
   yacc.py:2658:    and             reduce using rule 66 (var -> names .)
   yacc.py:2658:    or              reduce using rule 66 (var -> names .)
   yacc.py:2658:    MODULO          reduce using rule 66 (var -> names .)
   yacc.py:2658:    DBLDOTS         reduce using rule 66 (var -> names .)
   yacc.py:2658:    RSQUARE         reduce using rule 66 (var -> names .)
   yacc.py:2658:    then            reduce using rule 66 (var -> names .)
   yacc.py:2658:    RPAREN          reduce using rule 66 (var -> names .)
   yacc.py:2658:    RCURLY          reduce using rule 66 (var -> names .)
   yacc.py:2658:    return          reduce using rule 66 (var -> names .)
   yacc.py:2658:    break           reduce using rule 66 (var -> names .)
   yacc.py:2658:    for             reduce using rule 66 (var -> names .)
   yacc.py:2658:    while           reduce using rule 66 (var -> names .)
   yacc.py:2658:    repeat          reduce using rule 66 (var -> names .)
   yacc.py:2658:    do              reduce using rule 66 (var -> names .)
   yacc.py:2658:    function        reduce using rule 66 (var -> names .)
   yacc.py:2658:    local           reduce using rule 66 (var -> names .)
   yacc.py:2658:    if              reduce using rule 66 (var -> names .)
   yacc.py:2658:    print           reduce using rule 66 (var -> names .)
   yacc.py:2658:    scan            reduce using rule 66 (var -> names .)
   yacc.py:2658:    ID              reduce using rule 66 (var -> names .)
   yacc.py:2658:    RESID           reduce using rule 66 (var -> names .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 6
   yacc.py:2544:
   yacc.py:2546:    (51) stat -> if . exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 49
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2542:
   yacc.py:2543:state 7
   yacc.py:2544:
   yacc.py:2546:    (29) functioncall -> prefixexp . args
   yacc.py:2546:    (67) var -> prefixexp . LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> prefixexp . SDOT names
   yacc.py:2546:    (32) args -> . LPAREN RPAREN
   yacc.py:2546:    (33) args -> . LPAREN explist RPAREN
   yacc.py:2546:    (34) args -> . STRING
   yacc.py:2546:    (35) args -> . tableconstructor
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         shift and go to state 51
   yacc.py:2658:    SDOT            shift and go to state 54
   yacc.py:2658:    LPAREN          shift and go to state 53
   yacc.py:2658:    STRING          shift and go to state 55
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2660:
   yacc.py:2685:    tableconstructor               shift and go to state 50
   yacc.py:2685:    args                           shift and go to state 52
   yacc.py:2542:
   yacc.py:2543:state 8
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for . names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> for . names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> for . namelist in explist do block end
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2546:    (69) namelist -> . names comid
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    namelist                       shift and go to state 56
   yacc.py:2685:    names                          shift and go to state 57
   yacc.py:2542:
   yacc.py:2543:state 9
   yacc.py:2544:
   yacc.py:2546:    (11) stat -> varlist . EQUALS explist
   yacc.py:2547:
   yacc.py:2658:    EQUALS          shift and go to state 58
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 10
   yacc.py:2544:
   yacc.py:2546:    (31) functioncall -> scan . args
   yacc.py:2546:    (32) args -> . LPAREN RPAREN
   yacc.py:2546:    (33) args -> . LPAREN explist RPAREN
   yacc.py:2546:    (34) args -> . STRING
   yacc.py:2546:    (35) args -> . tableconstructor
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2547:
   yacc.py:2658:    LPAREN          shift and go to state 53
   yacc.py:2658:    STRING          shift and go to state 55
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2660:
   yacc.py:2685:    tableconstructor               shift and go to state 50
   yacc.py:2685:    args                           shift and go to state 59
   yacc.py:2542:
   yacc.py:2543:state 11
   yacc.py:2544:
   yacc.py:2546:    (3) sdash -> laststat . M_chunk
   yacc.py:2546:    (9) M_chunk -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    $end            reduce using rule 127 (empty -> .)
   yacc.py:2658:    end             reduce using rule 127 (empty -> .)
   yacc.py:2658:    until           reduce using rule 127 (empty -> .)
   yacc.py:2658:    elseif          reduce using rule 127 (empty -> .)
   yacc.py:2658:    else            reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    M_chunk                        shift and go to state 60
   yacc.py:2685:    empty                          shift and go to state 48
   yacc.py:2542:
   yacc.py:2543:state 12
   yacc.py:2544:
   yacc.py:2546:    (65) varlist -> var . comvar
   yacc.py:2546:    (128) prefixexp -> var .
   yacc.py:2546:    (47) comvar -> . COMMA var comvar
   yacc.py:2546:    (48) comvar -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    SDOT            reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    LPAREN          reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    STRING          reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    LCURLY          reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    COMMA           shift and go to state 61
   yacc.py:2658:    EQUALS          reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    comvar                         shift and go to state 62
   yacc.py:2685:    empty                          shift and go to state 63
   yacc.py:2542:
   yacc.py:2543:state 13
   yacc.py:2544:
   yacc.py:2546:    (26) stat -> functioncall .
   yacc.py:2546:    (130) prefixexp -> functioncall .
   yacc.py:2547:
   yacc.py:2602:  ! reduce/reduce conflict for LPAREN resolved using rule 26 (stat -> functioncall .)
   yacc.py:2658:    SEMI            reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    return          reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    break           reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    for             reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    while           reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    repeat          reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    do              reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    function        reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    local           reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    if              reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    print           reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    scan            reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    LPAREN          reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    ID              reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    RESID           reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    end             reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    $end            reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    until           reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    elseif          reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    else            reduce using rule 26 (stat -> functioncall .)
   yacc.py:2658:    LSQUARE         reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    SDOT            reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    STRING          reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    LCURLY          reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2660:
   yacc.py:2667:  ! LPAREN          [ reduce using rule 130 (prefixexp -> functioncall .) ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 14
   yacc.py:2544:
   yacc.py:2546:    (19) stat -> do . M_sc_beg block M_sc_end end
   yacc.py:2546:    (20) M_sc_beg -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 127 (empty -> .)
   yacc.py:2658:    break           reduce using rule 127 (empty -> .)
   yacc.py:2658:    for             reduce using rule 127 (empty -> .)
   yacc.py:2658:    while           reduce using rule 127 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 127 (empty -> .)
   yacc.py:2658:    do              reduce using rule 127 (empty -> .)
   yacc.py:2658:    function        reduce using rule 127 (empty -> .)
   yacc.py:2658:    local           reduce using rule 127 (empty -> .)
   yacc.py:2658:    if              reduce using rule 127 (empty -> .)
   yacc.py:2658:    print           reduce using rule 127 (empty -> .)
   yacc.py:2658:    scan            reduce using rule 127 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 127 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 127 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 65
   yacc.py:2685:    M_sc_beg                       shift and go to state 64
   yacc.py:2542:
   yacc.py:2543:state 15
   yacc.py:2544:
   yacc.py:2546:    (6) chunk -> stat . SEMI
   yacc.py:2546:    (8) chunk -> stat .
   yacc.py:2547:
   yacc.py:2658:    SEMI            shift and go to state 66
   yacc.py:2658:    return          reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    break           reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    for             reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    while           reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    repeat          reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    do              reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    function        reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    local           reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    if              reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    print           reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    scan            reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    LPAREN          reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    ID              reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    RESID           reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    end             reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    elseif          reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    else            reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    until           reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    $end            reduce using rule 8 (chunk -> stat .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 16
   yacc.py:2544:
   yacc.py:2546:    (18) stat -> repeat . M_while1 block until M_while2 exp
   yacc.py:2546:    (16) M_while1 -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 127 (empty -> .)
   yacc.py:2658:    break           reduce using rule 127 (empty -> .)
   yacc.py:2658:    for             reduce using rule 127 (empty -> .)
   yacc.py:2658:    while           reduce using rule 127 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 127 (empty -> .)
   yacc.py:2658:    do              reduce using rule 127 (empty -> .)
   yacc.py:2658:    function        reduce using rule 127 (empty -> .)
   yacc.py:2658:    local           reduce using rule 127 (empty -> .)
   yacc.py:2658:    if              reduce using rule 127 (empty -> .)
   yacc.py:2658:    print           reduce using rule 127 (empty -> .)
   yacc.py:2658:    scan            reduce using rule 127 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 127 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 127 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 68
   yacc.py:2685:    M_while1                       shift and go to state 67
   yacc.py:2542:
   yacc.py:2543:state 17
   yacc.py:2544:
   yacc.py:2546:    (40) laststat -> return . retexplist
   yacc.py:2546:    (41) laststat -> return .
   yacc.py:2546:    (98) retexplist -> . retexplist COMMA retexp
   yacc.py:2546:    (99) retexplist -> . retexp
   yacc.py:2546:    (100) retexp -> . nil
   yacc.py:2546:    (101) retexp -> . Number
   yacc.py:2546:    (102) retexp -> . STRING
   yacc.py:2546:    (103) retexp -> . true
   yacc.py:2546:    (104) retexp -> . false
   yacc.py:2546:    (105) retexp -> . TRPLDOTS
   yacc.py:2546:    (106) retexp -> . prefixexp
   yacc.py:2546:    (107) retexp -> . exp PLUS exp
   yacc.py:2546:    (108) retexp -> . exp MINUS exp
   yacc.py:2546:    (109) retexp -> . exp TIMES exp
   yacc.py:2546:    (110) retexp -> . exp DIVIDE exp
   yacc.py:2546:    (111) retexp -> . exp POWER exp
   yacc.py:2546:    (112) retexp -> . exp LT exp
   yacc.py:2546:    (113) retexp -> . exp LE exp
   yacc.py:2546:    (114) retexp -> . exp GT exp
   yacc.py:2546:    (115) retexp -> . exp GE exp
   yacc.py:2546:    (116) retexp -> . exp NE exp
   yacc.py:2546:    (117) retexp -> . exp CHECKEQ exp
   yacc.py:2546:    (118) retexp -> . exp and M_andor exp
   yacc.py:2546:    (119) retexp -> . exp or M_andor exp
   yacc.py:2546:    (120) retexp -> . exp MODULO exp
   yacc.py:2546:    (121) retexp -> . exp DBLDOTS exp
   yacc.py:2546:    (122) retexp -> . tableconstructor
   yacc.py:2546:    (123) retexp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 41 (laststat -> return .)
   yacc.py:2658:    until           reduce using rule 41 (laststat -> return .)
   yacc.py:2658:    elseif          reduce using rule 41 (laststat -> return .)
   yacc.py:2658:    else            reduce using rule 41 (laststat -> return .)
   yacc.py:2658:    SEMI            reduce using rule 41 (laststat -> return .)
   yacc.py:2658:    $end            reduce using rule 41 (laststat -> return .)
   yacc.py:2658:    nil             shift and go to state 75
   yacc.py:2658:    STRING          shift and go to state 74
   yacc.py:2658:    true            shift and go to state 76
   yacc.py:2658:    false           shift and go to state 70
   yacc.py:2658:    TRPLDOTS        shift and go to state 71
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 72
   yacc.py:2685:    tableconstructor               shift and go to state 69
   yacc.py:2685:    retexp                         shift and go to state 73
   yacc.py:2685:    Number                         shift and go to state 77
   yacc.py:2685:    unop                           shift and go to state 80
   yacc.py:2685:    retexplist                     shift and go to state 78
   yacc.py:2685:    exp                            shift and go to state 79
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 18
   yacc.py:2544:
   yacc.py:2546:    (42) laststat -> break .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 42 (laststat -> break .)
   yacc.py:2658:    until           reduce using rule 42 (laststat -> break .)
   yacc.py:2658:    elseif          reduce using rule 42 (laststat -> break .)
   yacc.py:2658:    else            reduce using rule 42 (laststat -> break .)
   yacc.py:2658:    SEMI            reduce using rule 42 (laststat -> break .)
   yacc.py:2658:    $end            reduce using rule 42 (laststat -> break .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 19
   yacc.py:2544:
   yacc.py:2546:    (30) functioncall -> print . args
   yacc.py:2546:    (32) args -> . LPAREN RPAREN
   yacc.py:2546:    (33) args -> . LPAREN explist RPAREN
   yacc.py:2546:    (34) args -> . STRING
   yacc.py:2546:    (35) args -> . tableconstructor
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2547:
   yacc.py:2658:    LPAREN          shift and go to state 53
   yacc.py:2658:    STRING          shift and go to state 55
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2660:
   yacc.py:2685:    tableconstructor               shift and go to state 50
   yacc.py:2685:    args                           shift and go to state 81
   yacc.py:2542:
   yacc.py:2543:state 20
   yacc.py:2544:
   yacc.py:2546:    (145) names -> ID .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 145 (names -> ID .)
   yacc.py:2658:    SDOT            reduce using rule 145 (names -> ID .)
   yacc.py:2658:    LPAREN          reduce using rule 145 (names -> ID .)
   yacc.py:2658:    STRING          reduce using rule 145 (names -> ID .)
   yacc.py:2658:    LCURLY          reduce using rule 145 (names -> ID .)
   yacc.py:2658:    PLUS            reduce using rule 145 (names -> ID .)
   yacc.py:2658:    MINUS           reduce using rule 145 (names -> ID .)
   yacc.py:2658:    TIMES           reduce using rule 145 (names -> ID .)
   yacc.py:2658:    DIVIDE          reduce using rule 145 (names -> ID .)
   yacc.py:2658:    POWER           reduce using rule 145 (names -> ID .)
   yacc.py:2658:    LT              reduce using rule 145 (names -> ID .)
   yacc.py:2658:    LE              reduce using rule 145 (names -> ID .)
   yacc.py:2658:    GT              reduce using rule 145 (names -> ID .)
   yacc.py:2658:    GE              reduce using rule 145 (names -> ID .)
   yacc.py:2658:    NE              reduce using rule 145 (names -> ID .)
   yacc.py:2658:    CHECKEQ         reduce using rule 145 (names -> ID .)
   yacc.py:2658:    or              reduce using rule 145 (names -> ID .)
   yacc.py:2658:    and             reduce using rule 145 (names -> ID .)
   yacc.py:2658:    MODULO          reduce using rule 145 (names -> ID .)
   yacc.py:2658:    DBLDOTS         reduce using rule 145 (names -> ID .)
   yacc.py:2658:    RPAREN          reduce using rule 145 (names -> ID .)
   yacc.py:2658:    then            reduce using rule 145 (names -> ID .)
   yacc.py:2658:    COMMA           reduce using rule 145 (names -> ID .)
   yacc.py:2658:    SEMI            reduce using rule 145 (names -> ID .)
   yacc.py:2658:    RCURLY          reduce using rule 145 (names -> ID .)
   yacc.py:2658:    RSQUARE         reduce using rule 145 (names -> ID .)
   yacc.py:2658:    return          reduce using rule 145 (names -> ID .)
   yacc.py:2658:    break           reduce using rule 145 (names -> ID .)
   yacc.py:2658:    for             reduce using rule 145 (names -> ID .)
   yacc.py:2658:    while           reduce using rule 145 (names -> ID .)
   yacc.py:2658:    repeat          reduce using rule 145 (names -> ID .)
   yacc.py:2658:    do              reduce using rule 145 (names -> ID .)
   yacc.py:2658:    function        reduce using rule 145 (names -> ID .)
   yacc.py:2658:    local           reduce using rule 145 (names -> ID .)
   yacc.py:2658:    if              reduce using rule 145 (names -> ID .)
   yacc.py:2658:    print           reduce using rule 145 (names -> ID .)
   yacc.py:2658:    scan            reduce using rule 145 (names -> ID .)
   yacc.py:2658:    ID              reduce using rule 145 (names -> ID .)
   yacc.py:2658:    RESID           reduce using rule 145 (names -> ID .)
   yacc.py:2658:    $end            reduce using rule 145 (names -> ID .)
   yacc.py:2658:    end             reduce using rule 145 (names -> ID .)
   yacc.py:2658:    until           reduce using rule 145 (names -> ID .)
   yacc.py:2658:    elseif          reduce using rule 145 (names -> ID .)
   yacc.py:2658:    else            reduce using rule 145 (names -> ID .)
   yacc.py:2658:    EQUALS          reduce using rule 145 (names -> ID .)
   yacc.py:2658:    in              reduce using rule 145 (names -> ID .)
   yacc.py:2658:    COLON           reduce using rule 145 (names -> ID .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 21
   yacc.py:2544:
   yacc.py:2546:    (23) stat -> local . function names funcbody
   yacc.py:2546:    (24) stat -> local . namelist
   yacc.py:2546:    (25) stat -> local . namelist EQUALS explist
   yacc.py:2546:    (69) namelist -> . names comid
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    function        shift and go to state 82
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    namelist                       shift and go to state 83
   yacc.py:2685:    names                          shift and go to state 84
   yacc.py:2542:
   yacc.py:2543:state 22
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> while . M_while1 exp do M_while2 block end
   yacc.py:2546:    (16) M_while1 -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 127 (empty -> .)
   yacc.py:2658:    STRING          reduce using rule 127 (empty -> .)
   yacc.py:2658:    true            reduce using rule 127 (empty -> .)
   yacc.py:2658:    false           reduce using rule 127 (empty -> .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 127 (empty -> .)
   yacc.py:2658:    function        reduce using rule 127 (empty -> .)
   yacc.py:2658:    INTEGER         reduce using rule 127 (empty -> .)
   yacc.py:2658:    FLOAT           reduce using rule 127 (empty -> .)
   yacc.py:2658:    HEX             reduce using rule 127 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 127 (empty -> .)
   yacc.py:2658:    LCURLY          reduce using rule 127 (empty -> .)
   yacc.py:2658:    not             reduce using rule 127 (empty -> .)
   yacc.py:2658:    MINUS           reduce using rule 127 (empty -> .)
   yacc.py:2658:    HASH            reduce using rule 127 (empty -> .)
   yacc.py:2658:    print           reduce using rule 127 (empty -> .)
   yacc.py:2658:    scan            reduce using rule 127 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 127 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 68
   yacc.py:2685:    M_while1                       shift and go to state 85
   yacc.py:2542:
   yacc.py:2543:state 23
   yacc.py:2544:
   yacc.py:2546:    (0) S' -> sdash .
   yacc.py:2547:
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 24
   yacc.py:2544:
   yacc.py:2546:    (22) stat -> function funcname . funcbody
   yacc.py:2546:    (27) funcbody -> . LPAREN RPAREN block end
   yacc.py:2546:    (28) funcbody -> . LPAREN parlist RPAREN block end
   yacc.py:2547:
   yacc.py:2658:    LPAREN          shift and go to state 87
   yacc.py:2660:
   yacc.py:2685:    funcbody                       shift and go to state 86
   yacc.py:2542:
   yacc.py:2543:state 25
   yacc.py:2544:
   yacc.py:2546:    (43) funcname -> names . dotid COLON
   yacc.py:2546:    (44) funcname -> names .
   yacc.py:2546:    (45) dotid -> . SDOT names dotid
   yacc.py:2546:    (46) dotid -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    LPAREN          reduce using rule 44 (funcname -> names .)
   yacc.py:2658:    SDOT            shift and go to state 88
   yacc.py:2658:    COLON           reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    dotid                          shift and go to state 89
   yacc.py:2685:    empty                          shift and go to state 90
   yacc.py:2542:
   yacc.py:2543:state 26
   yacc.py:2544:
   yacc.py:2546:    (96) exp -> tableconstructor .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    MINUS           reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    TIMES           reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    DIVIDE          reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    POWER           reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    LT              reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    LE              reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    GT              reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    GE              reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    NE              reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    CHECKEQ         reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    or              reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    and             reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    MODULO          reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    DBLDOTS         reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    RPAREN          reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    then            reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    COMMA           reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    SEMI            reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    RCURLY          reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    RSQUARE         reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    return          reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    break           reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    for             reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    while           reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    repeat          reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    do              reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    function        reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    local           reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    if              reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    print           reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    scan            reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    LPAREN          reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    ID              reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    RESID           reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    $end            reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    end             reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    until           reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    elseif          reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    else            reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 27
   yacc.py:2544:
   yacc.py:2546:    (76) exp -> false .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 76 (exp -> false .)
   yacc.py:2658:    MINUS           reduce using rule 76 (exp -> false .)
   yacc.py:2658:    TIMES           reduce using rule 76 (exp -> false .)
   yacc.py:2658:    DIVIDE          reduce using rule 76 (exp -> false .)
   yacc.py:2658:    POWER           reduce using rule 76 (exp -> false .)
   yacc.py:2658:    LT              reduce using rule 76 (exp -> false .)
   yacc.py:2658:    LE              reduce using rule 76 (exp -> false .)
   yacc.py:2658:    GT              reduce using rule 76 (exp -> false .)
   yacc.py:2658:    GE              reduce using rule 76 (exp -> false .)
   yacc.py:2658:    NE              reduce using rule 76 (exp -> false .)
   yacc.py:2658:    CHECKEQ         reduce using rule 76 (exp -> false .)
   yacc.py:2658:    or              reduce using rule 76 (exp -> false .)
   yacc.py:2658:    and             reduce using rule 76 (exp -> false .)
   yacc.py:2658:    MODULO          reduce using rule 76 (exp -> false .)
   yacc.py:2658:    DBLDOTS         reduce using rule 76 (exp -> false .)
   yacc.py:2658:    RPAREN          reduce using rule 76 (exp -> false .)
   yacc.py:2658:    then            reduce using rule 76 (exp -> false .)
   yacc.py:2658:    COMMA           reduce using rule 76 (exp -> false .)
   yacc.py:2658:    SEMI            reduce using rule 76 (exp -> false .)
   yacc.py:2658:    RCURLY          reduce using rule 76 (exp -> false .)
   yacc.py:2658:    RSQUARE         reduce using rule 76 (exp -> false .)
   yacc.py:2658:    return          reduce using rule 76 (exp -> false .)
   yacc.py:2658:    break           reduce using rule 76 (exp -> false .)
   yacc.py:2658:    for             reduce using rule 76 (exp -> false .)
   yacc.py:2658:    while           reduce using rule 76 (exp -> false .)
   yacc.py:2658:    repeat          reduce using rule 76 (exp -> false .)
   yacc.py:2658:    do              reduce using rule 76 (exp -> false .)
   yacc.py:2658:    function        reduce using rule 76 (exp -> false .)
   yacc.py:2658:    local           reduce using rule 76 (exp -> false .)
   yacc.py:2658:    if              reduce using rule 76 (exp -> false .)
   yacc.py:2658:    print           reduce using rule 76 (exp -> false .)
   yacc.py:2658:    scan            reduce using rule 76 (exp -> false .)
   yacc.py:2658:    LPAREN          reduce using rule 76 (exp -> false .)
   yacc.py:2658:    ID              reduce using rule 76 (exp -> false .)
   yacc.py:2658:    RESID           reduce using rule 76 (exp -> false .)
   yacc.py:2658:    $end            reduce using rule 76 (exp -> false .)
   yacc.py:2658:    end             reduce using rule 76 (exp -> false .)
   yacc.py:2658:    until           reduce using rule 76 (exp -> false .)
   yacc.py:2658:    elseif          reduce using rule 76 (exp -> false .)
   yacc.py:2658:    else            reduce using rule 76 (exp -> false .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 28
   yacc.py:2544:
   yacc.py:2546:    (134) tableconstructor -> LCURLY . fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> LCURLY . RCURLY
   yacc.py:2546:    (136) fieldlist -> . field fieldseplist fieldsep
   yacc.py:2546:    (137) fieldlist -> . field fieldseplist
   yacc.py:2546:    (140) field -> . LSQUARE exp RSQUARE EQUALS exp
   yacc.py:2546:    (141) field -> . names EQUALS exp
   yacc.py:2546:    (142) field -> . exp
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2547:
   yacc.py:2658:    RCURLY          shift and go to state 92
   yacc.py:2658:    LSQUARE         shift and go to state 96
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    field                          shift and go to state 93
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    fieldlist                      shift and go to state 94
   yacc.py:2685:    exp                            shift and go to state 95
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 91
   yacc.py:2542:
   yacc.py:2543:state 29
   yacc.py:2544:
   yacc.py:2546:    (133) unop -> HASH .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 133 (unop -> HASH .)
   yacc.py:2658:    STRING          reduce using rule 133 (unop -> HASH .)
   yacc.py:2658:    true            reduce using rule 133 (unop -> HASH .)
   yacc.py:2658:    false           reduce using rule 133 (unop -> HASH .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 133 (unop -> HASH .)
   yacc.py:2658:    function        reduce using rule 133 (unop -> HASH .)
   yacc.py:2658:    INTEGER         reduce using rule 133 (unop -> HASH .)
   yacc.py:2658:    FLOAT           reduce using rule 133 (unop -> HASH .)
   yacc.py:2658:    HEX             reduce using rule 133 (unop -> HASH .)
   yacc.py:2658:    LPAREN          reduce using rule 133 (unop -> HASH .)
   yacc.py:2658:    LCURLY          reduce using rule 133 (unop -> HASH .)
   yacc.py:2658:    not             reduce using rule 133 (unop -> HASH .)
   yacc.py:2658:    MINUS           reduce using rule 133 (unop -> HASH .)
   yacc.py:2658:    HASH            reduce using rule 133 (unop -> HASH .)
   yacc.py:2658:    print           reduce using rule 133 (unop -> HASH .)
   yacc.py:2658:    scan            reduce using rule 133 (unop -> HASH .)
   yacc.py:2658:    ID              reduce using rule 133 (unop -> HASH .)
   yacc.py:2658:    RESID           reduce using rule 133 (unop -> HASH .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 30
   yacc.py:2544:
   yacc.py:2546:    (132) unop -> MINUS .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 132 (unop -> MINUS .)
   yacc.py:2658:    STRING          reduce using rule 132 (unop -> MINUS .)
   yacc.py:2658:    true            reduce using rule 132 (unop -> MINUS .)
   yacc.py:2658:    false           reduce using rule 132 (unop -> MINUS .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 132 (unop -> MINUS .)
   yacc.py:2658:    function        reduce using rule 132 (unop -> MINUS .)
   yacc.py:2658:    INTEGER         reduce using rule 132 (unop -> MINUS .)
   yacc.py:2658:    FLOAT           reduce using rule 132 (unop -> MINUS .)
   yacc.py:2658:    HEX             reduce using rule 132 (unop -> MINUS .)
   yacc.py:2658:    LPAREN          reduce using rule 132 (unop -> MINUS .)
   yacc.py:2658:    LCURLY          reduce using rule 132 (unop -> MINUS .)
   yacc.py:2658:    not             reduce using rule 132 (unop -> MINUS .)
   yacc.py:2658:    MINUS           reduce using rule 132 (unop -> MINUS .)
   yacc.py:2658:    HASH            reduce using rule 132 (unop -> MINUS .)
   yacc.py:2658:    print           reduce using rule 132 (unop -> MINUS .)
   yacc.py:2658:    scan            reduce using rule 132 (unop -> MINUS .)
   yacc.py:2658:    ID              reduce using rule 132 (unop -> MINUS .)
   yacc.py:2658:    RESID           reduce using rule 132 (unop -> MINUS .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 31
   yacc.py:2544:
   yacc.py:2546:    (79) exp -> prefixexp .
   yacc.py:2546:    (67) var -> prefixexp . LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> prefixexp . SDOT names
   yacc.py:2546:    (29) functioncall -> prefixexp . args
   yacc.py:2546:    (32) args -> . LPAREN RPAREN
   yacc.py:2546:    (33) args -> . LPAREN explist RPAREN
   yacc.py:2546:    (34) args -> . STRING
   yacc.py:2546:    (35) args -> . tableconstructor
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2547:
   yacc.py:2637:  ! shift/reduce conflict for LPAREN resolved as shift
   yacc.py:2658:    PLUS            reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    MINUS           reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    TIMES           reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    DIVIDE          reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    POWER           reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    LT              reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    LE              reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    GT              reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    GE              reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    NE              reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    or              reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    and             reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    MODULO          reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    RPAREN          reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    then            reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    COMMA           reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    SEMI            reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    RCURLY          reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    RSQUARE         reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    return          reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    break           reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    for             reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    while           reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    repeat          reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    do              reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    function        reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    local           reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    if              reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    print           reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    scan            reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    ID              reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    RESID           reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    $end            reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    end             reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    until           reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    elseif          reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    else            reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    LSQUARE         shift and go to state 51
   yacc.py:2658:    SDOT            shift and go to state 54
   yacc.py:2658:    LPAREN          shift and go to state 53
   yacc.py:2658:    STRING          shift and go to state 55
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2660:
   yacc.py:2667:  ! LPAREN          [ reduce using rule 79 (exp -> prefixexp .) ]
   yacc.py:2671:
   yacc.py:2685:    tableconstructor               shift and go to state 50
   yacc.py:2685:    args                           shift and go to state 52
   yacc.py:2542:
   yacc.py:2543:state 32
   yacc.py:2544:
   yacc.py:2546:    (128) prefixexp -> var .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    SDOT            reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    LPAREN          reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    STRING          reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    LCURLY          reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    RSQUARE         reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    PLUS            reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    MINUS           reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    TIMES           reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    DIVIDE          reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    POWER           reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    LT              reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    LE              reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    GT              reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    GE              reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    NE              reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    CHECKEQ         reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    or              reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    and             reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    MODULO          reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    DBLDOTS         reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    RPAREN          reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    then            reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    COMMA           reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    SEMI            reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    RCURLY          reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    return          reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    break           reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    for             reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    while           reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    repeat          reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    do              reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    function        reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    local           reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    if              reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    print           reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    scan            reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    ID              reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    RESID           reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    $end            reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    end             reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    until           reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    elseif          reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    else            reduce using rule 128 (prefixexp -> var .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 33
   yacc.py:2544:
   yacc.py:2546:    (124) Number -> INTEGER .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    $end            reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    SEMI            reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    end             reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    until           reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    elseif          reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    else            reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    PLUS            reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    MINUS           reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    TIMES           reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    DIVIDE          reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    POWER           reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    LT              reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    LE              reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    GT              reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    GE              reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    NE              reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    CHECKEQ         reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    and             reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    or              reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    MODULO          reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    DBLDOTS         reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    RSQUARE         reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    RPAREN          reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    then            reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    RCURLY          reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    return          reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    break           reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    for             reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    while           reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    repeat          reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    do              reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    function        reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    local           reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    if              reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    print           reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    scan            reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    LPAREN          reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    ID              reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2658:    RESID           reduce using rule 124 (Number -> INTEGER .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 34
   yacc.py:2544:
   yacc.py:2546:    (78) exp -> function .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 78 (exp -> function .)
   yacc.py:2658:    MINUS           reduce using rule 78 (exp -> function .)
   yacc.py:2658:    TIMES           reduce using rule 78 (exp -> function .)
   yacc.py:2658:    DIVIDE          reduce using rule 78 (exp -> function .)
   yacc.py:2658:    POWER           reduce using rule 78 (exp -> function .)
   yacc.py:2658:    LT              reduce using rule 78 (exp -> function .)
   yacc.py:2658:    LE              reduce using rule 78 (exp -> function .)
   yacc.py:2658:    GT              reduce using rule 78 (exp -> function .)
   yacc.py:2658:    GE              reduce using rule 78 (exp -> function .)
   yacc.py:2658:    NE              reduce using rule 78 (exp -> function .)
   yacc.py:2658:    CHECKEQ         reduce using rule 78 (exp -> function .)
   yacc.py:2658:    or              reduce using rule 78 (exp -> function .)
   yacc.py:2658:    and             reduce using rule 78 (exp -> function .)
   yacc.py:2658:    MODULO          reduce using rule 78 (exp -> function .)
   yacc.py:2658:    DBLDOTS         reduce using rule 78 (exp -> function .)
   yacc.py:2658:    RPAREN          reduce using rule 78 (exp -> function .)
   yacc.py:2658:    then            reduce using rule 78 (exp -> function .)
   yacc.py:2658:    COMMA           reduce using rule 78 (exp -> function .)
   yacc.py:2658:    SEMI            reduce using rule 78 (exp -> function .)
   yacc.py:2658:    RCURLY          reduce using rule 78 (exp -> function .)
   yacc.py:2658:    RSQUARE         reduce using rule 78 (exp -> function .)
   yacc.py:2658:    return          reduce using rule 78 (exp -> function .)
   yacc.py:2658:    break           reduce using rule 78 (exp -> function .)
   yacc.py:2658:    for             reduce using rule 78 (exp -> function .)
   yacc.py:2658:    while           reduce using rule 78 (exp -> function .)
   yacc.py:2658:    repeat          reduce using rule 78 (exp -> function .)
   yacc.py:2658:    do              reduce using rule 78 (exp -> function .)
   yacc.py:2658:    function        reduce using rule 78 (exp -> function .)
   yacc.py:2658:    local           reduce using rule 78 (exp -> function .)
   yacc.py:2658:    if              reduce using rule 78 (exp -> function .)
   yacc.py:2658:    print           reduce using rule 78 (exp -> function .)
   yacc.py:2658:    scan            reduce using rule 78 (exp -> function .)
   yacc.py:2658:    LPAREN          reduce using rule 78 (exp -> function .)
   yacc.py:2658:    ID              reduce using rule 78 (exp -> function .)
   yacc.py:2658:    RESID           reduce using rule 78 (exp -> function .)
   yacc.py:2658:    $end            reduce using rule 78 (exp -> function .)
   yacc.py:2658:    end             reduce using rule 78 (exp -> function .)
   yacc.py:2658:    until           reduce using rule 78 (exp -> function .)
   yacc.py:2658:    elseif          reduce using rule 78 (exp -> function .)
   yacc.py:2658:    else            reduce using rule 78 (exp -> function .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 35
   yacc.py:2544:
   yacc.py:2546:    (74) exp -> STRING .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    MINUS           reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    TIMES           reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    DIVIDE          reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    POWER           reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    LT              reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    LE              reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    GT              reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    GE              reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    NE              reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    CHECKEQ         reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    or              reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    and             reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    MODULO          reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    DBLDOTS         reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    RPAREN          reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    then            reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    COMMA           reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    SEMI            reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    RCURLY          reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    RSQUARE         reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    return          reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    break           reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    for             reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    while           reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    repeat          reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    do              reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    function        reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    local           reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    if              reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    print           reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    scan            reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    LPAREN          reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    ID              reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    RESID           reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    $end            reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    end             reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    until           reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    elseif          reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    else            reduce using rule 74 (exp -> STRING .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 36
   yacc.py:2544:
   yacc.py:2546:    (72) exp -> nil .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    MINUS           reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    TIMES           reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    DIVIDE          reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    POWER           reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    LT              reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    LE              reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    GT              reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    GE              reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    NE              reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    CHECKEQ         reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    or              reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    and             reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    MODULO          reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    DBLDOTS         reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    RPAREN          reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    then            reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    COMMA           reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    SEMI            reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    RCURLY          reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    RSQUARE         reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    return          reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    break           reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    for             reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    while           reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    repeat          reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    do              reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    function        reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    local           reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    if              reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    print           reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    scan            reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    LPAREN          reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    ID              reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    RESID           reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    $end            reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    end             reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    until           reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    elseif          reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    else            reduce using rule 72 (exp -> nil .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 37
   yacc.py:2544:
   yacc.py:2546:    (126) Number -> HEX .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    $end            reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    SEMI            reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    end             reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    until           reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    elseif          reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    else            reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    PLUS            reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    MINUS           reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    TIMES           reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    DIVIDE          reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    POWER           reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    LT              reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    LE              reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    GT              reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    GE              reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    NE              reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    CHECKEQ         reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    and             reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    or              reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    MODULO          reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    DBLDOTS         reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    RSQUARE         reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    RPAREN          reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    then            reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    RCURLY          reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    return          reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    break           reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    for             reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    while           reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    repeat          reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    do              reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    function        reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    local           reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    if              reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    print           reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    scan            reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    LPAREN          reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    ID              reduce using rule 126 (Number -> HEX .)
   yacc.py:2658:    RESID           reduce using rule 126 (Number -> HEX .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 38
   yacc.py:2544:
   yacc.py:2546:    (131) unop -> not .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 131 (unop -> not .)
   yacc.py:2658:    STRING          reduce using rule 131 (unop -> not .)
   yacc.py:2658:    true            reduce using rule 131 (unop -> not .)
   yacc.py:2658:    false           reduce using rule 131 (unop -> not .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 131 (unop -> not .)
   yacc.py:2658:    function        reduce using rule 131 (unop -> not .)
   yacc.py:2658:    INTEGER         reduce using rule 131 (unop -> not .)
   yacc.py:2658:    FLOAT           reduce using rule 131 (unop -> not .)
   yacc.py:2658:    HEX             reduce using rule 131 (unop -> not .)
   yacc.py:2658:    LPAREN          reduce using rule 131 (unop -> not .)
   yacc.py:2658:    LCURLY          reduce using rule 131 (unop -> not .)
   yacc.py:2658:    not             reduce using rule 131 (unop -> not .)
   yacc.py:2658:    MINUS           reduce using rule 131 (unop -> not .)
   yacc.py:2658:    HASH            reduce using rule 131 (unop -> not .)
   yacc.py:2658:    print           reduce using rule 131 (unop -> not .)
   yacc.py:2658:    scan            reduce using rule 131 (unop -> not .)
   yacc.py:2658:    ID              reduce using rule 131 (unop -> not .)
   yacc.py:2658:    RESID           reduce using rule 131 (unop -> not .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 39
   yacc.py:2544:
   yacc.py:2546:    (75) exp -> true .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 75 (exp -> true .)
   yacc.py:2658:    MINUS           reduce using rule 75 (exp -> true .)
   yacc.py:2658:    TIMES           reduce using rule 75 (exp -> true .)
   yacc.py:2658:    DIVIDE          reduce using rule 75 (exp -> true .)
   yacc.py:2658:    POWER           reduce using rule 75 (exp -> true .)
   yacc.py:2658:    LT              reduce using rule 75 (exp -> true .)
   yacc.py:2658:    LE              reduce using rule 75 (exp -> true .)
   yacc.py:2658:    GT              reduce using rule 75 (exp -> true .)
   yacc.py:2658:    GE              reduce using rule 75 (exp -> true .)
   yacc.py:2658:    NE              reduce using rule 75 (exp -> true .)
   yacc.py:2658:    CHECKEQ         reduce using rule 75 (exp -> true .)
   yacc.py:2658:    or              reduce using rule 75 (exp -> true .)
   yacc.py:2658:    and             reduce using rule 75 (exp -> true .)
   yacc.py:2658:    MODULO          reduce using rule 75 (exp -> true .)
   yacc.py:2658:    DBLDOTS         reduce using rule 75 (exp -> true .)
   yacc.py:2658:    RPAREN          reduce using rule 75 (exp -> true .)
   yacc.py:2658:    then            reduce using rule 75 (exp -> true .)
   yacc.py:2658:    COMMA           reduce using rule 75 (exp -> true .)
   yacc.py:2658:    SEMI            reduce using rule 75 (exp -> true .)
   yacc.py:2658:    RCURLY          reduce using rule 75 (exp -> true .)
   yacc.py:2658:    RSQUARE         reduce using rule 75 (exp -> true .)
   yacc.py:2658:    return          reduce using rule 75 (exp -> true .)
   yacc.py:2658:    break           reduce using rule 75 (exp -> true .)
   yacc.py:2658:    for             reduce using rule 75 (exp -> true .)
   yacc.py:2658:    while           reduce using rule 75 (exp -> true .)
   yacc.py:2658:    repeat          reduce using rule 75 (exp -> true .)
   yacc.py:2658:    do              reduce using rule 75 (exp -> true .)
   yacc.py:2658:    function        reduce using rule 75 (exp -> true .)
   yacc.py:2658:    local           reduce using rule 75 (exp -> true .)
   yacc.py:2658:    if              reduce using rule 75 (exp -> true .)
   yacc.py:2658:    print           reduce using rule 75 (exp -> true .)
   yacc.py:2658:    scan            reduce using rule 75 (exp -> true .)
   yacc.py:2658:    LPAREN          reduce using rule 75 (exp -> true .)
   yacc.py:2658:    ID              reduce using rule 75 (exp -> true .)
   yacc.py:2658:    RESID           reduce using rule 75 (exp -> true .)
   yacc.py:2658:    $end            reduce using rule 75 (exp -> true .)
   yacc.py:2658:    end             reduce using rule 75 (exp -> true .)
   yacc.py:2658:    until           reduce using rule 75 (exp -> true .)
   yacc.py:2658:    elseif          reduce using rule 75 (exp -> true .)
   yacc.py:2658:    else            reduce using rule 75 (exp -> true .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 40
   yacc.py:2544:
   yacc.py:2546:    (125) Number -> FLOAT .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    $end            reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    SEMI            reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    end             reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    until           reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    elseif          reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    else            reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    PLUS            reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    MINUS           reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    TIMES           reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    DIVIDE          reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    POWER           reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    LT              reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    LE              reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    GT              reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    GE              reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    NE              reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    CHECKEQ         reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    and             reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    or              reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    MODULO          reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    DBLDOTS         reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    RSQUARE         reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    RPAREN          reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    then            reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    RCURLY          reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    return          reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    break           reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    for             reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    while           reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    repeat          reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    do              reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    function        reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    local           reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    if              reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    print           reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    scan            reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    LPAREN          reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    ID              reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2658:    RESID           reduce using rule 125 (Number -> FLOAT .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 41
   yacc.py:2544:
   yacc.py:2546:    (73) exp -> Number .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    MINUS           reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    TIMES           reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    DIVIDE          reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    POWER           reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    LT              reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    LE              reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    GT              reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    GE              reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    NE              reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    CHECKEQ         reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    or              reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    and             reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    MODULO          reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    DBLDOTS         reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    RPAREN          reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    then            reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    COMMA           reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    SEMI            reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    RCURLY          reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    RSQUARE         reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    return          reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    break           reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    for             reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    while           reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    repeat          reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    do              reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    function        reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    local           reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    if              reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    print           reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    scan            reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    LPAREN          reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    ID              reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    RESID           reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    $end            reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    end             reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    until           reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    elseif          reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    else            reduce using rule 73 (exp -> Number .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 42
   yacc.py:2544:
   yacc.py:2546:    (130) prefixexp -> functioncall .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    SDOT            reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    LPAREN          reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    STRING          reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    LCURLY          reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    RSQUARE         reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    PLUS            reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    MINUS           reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    TIMES           reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    DIVIDE          reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    POWER           reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    LT              reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    LE              reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    GT              reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    GE              reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    NE              reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    CHECKEQ         reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    or              reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    and             reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    MODULO          reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    DBLDOTS         reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    RPAREN          reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    then            reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    COMMA           reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    SEMI            reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    RCURLY          reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    return          reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    break           reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    for             reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    while           reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    repeat          reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    do              reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    function        reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    local           reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    if              reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    print           reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    scan            reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    ID              reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    RESID           reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    $end            reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    end             reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    until           reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    elseif          reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2658:    else            reduce using rule 130 (prefixexp -> functioncall .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 43
   yacc.py:2544:
   yacc.py:2546:    (129) prefixexp -> LPAREN exp . RPAREN
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    RPAREN          shift and go to state 99
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    or              shift and go to state 101
   yacc.py:2658:    and             shift and go to state 97
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 44
   yacc.py:2544:
   yacc.py:2546:    (97) exp -> unop . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 113
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 45
   yacc.py:2544:
   yacc.py:2546:    (77) exp -> TRPLDOTS .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    MINUS           reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    TIMES           reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    DIVIDE          reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    POWER           reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    LT              reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    LE              reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    GT              reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    GE              reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    NE              reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    CHECKEQ         reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    or              reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    and             reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    MODULO          reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    DBLDOTS         reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    RPAREN          reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    then            reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    COMMA           reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    SEMI            reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    RCURLY          reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    RSQUARE         reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    return          reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    break           reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    for             reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    while           reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    repeat          reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    do              reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    function        reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    local           reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    if              reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    print           reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    scan            reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    LPAREN          reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    ID              reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    RESID           reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    $end            reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    end             reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    until           reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    elseif          reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    else            reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 46
   yacc.py:2544:
   yacc.py:2546:    (1) sdash -> chunk M_chunk .
   yacc.py:2546:    (5) chunk -> chunk M_chunk . stat SEMI
   yacc.py:2546:    (7) chunk -> chunk M_chunk . stat
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat M_while1 block until M_while2 exp
   yacc.py:2546:    (19) stat -> . do M_sc_beg block M_sc_end end
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (24) stat -> . local namelist
   yacc.py:2546:    (25) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (26) stat -> . functioncall
   yacc.py:2546:    (51) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (65) varlist -> . var comvar
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 1 (sdash -> chunk M_chunk .)
   yacc.py:2658:    elseif          reduce using rule 1 (sdash -> chunk M_chunk .)
   yacc.py:2658:    else            reduce using rule 1 (sdash -> chunk M_chunk .)
   yacc.py:2658:    $end            reduce using rule 1 (sdash -> chunk M_chunk .)
   yacc.py:2658:    until           reduce using rule 1 (sdash -> chunk M_chunk .)
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 22
   yacc.py:2658:    repeat          shift and go to state 16
   yacc.py:2658:    do              shift and go to state 14
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 21
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    var                            shift and go to state 12
   yacc.py:2685:    stat                           shift and go to state 114
   yacc.py:2685:    functioncall                   shift and go to state 13
   yacc.py:2542:
   yacc.py:2543:state 47
   yacc.py:2544:
   yacc.py:2546:    (2) sdash -> chunk laststat . M_chunk
   yacc.py:2546:    (4) sdash -> chunk laststat . M_chunk SEMI
   yacc.py:2546:    (9) M_chunk -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 127 (empty -> .)
   yacc.py:2658:    $end            reduce using rule 127 (empty -> .)
   yacc.py:2658:    end             reduce using rule 127 (empty -> .)
   yacc.py:2658:    until           reduce using rule 127 (empty -> .)
   yacc.py:2658:    elseif          reduce using rule 127 (empty -> .)
   yacc.py:2658:    else            reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    M_chunk                        shift and go to state 115
   yacc.py:2685:    empty                          shift and go to state 48
   yacc.py:2542:
   yacc.py:2543:state 48
   yacc.py:2544:
   yacc.py:2546:    (9) M_chunk -> empty .
   yacc.py:2547:
   yacc.py:2658:    $end            reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    end             reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    until           reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    elseif          reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    else            reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    for             reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    while           reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    repeat          reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    do              reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    function        reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    local           reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    if              reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    print           reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    scan            reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    ID              reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    RESID           reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2658:    SEMI            reduce using rule 9 (M_chunk -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 49
   yacc.py:2544:
   yacc.py:2546:    (51) stat -> if exp . M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2546:    (52) M_bool -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    or              shift and go to state 101
   yacc.py:2658:    and             shift and go to state 97
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2658:    then            reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 117
   yacc.py:2685:    M_bool                         shift and go to state 116
   yacc.py:2542:
   yacc.py:2543:state 50
   yacc.py:2544:
   yacc.py:2546:    (35) args -> tableconstructor .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    SDOT            reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    LPAREN          reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    STRING          reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    LCURLY          reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    SEMI            reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    return          reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    break           reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    for             reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    while           reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    repeat          reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    do              reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    function        reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    local           reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    if              reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    print           reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    scan            reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    ID              reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    RESID           reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    $end            reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    end             reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    until           reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    elseif          reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    else            reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    RPAREN          reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    PLUS            reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    MINUS           reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    TIMES           reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    DIVIDE          reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    POWER           reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    LT              reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    LE              reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    GT              reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    GE              reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    NE              reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    CHECKEQ         reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    or              reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    and             reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    MODULO          reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    DBLDOTS         reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    then            reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    COMMA           reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    RCURLY          reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2658:    RSQUARE         reduce using rule 35 (args -> tableconstructor .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 51
   yacc.py:2544:
   yacc.py:2546:    (67) var -> prefixexp LSQUARE . exp RSQUARE
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 118
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 52
   yacc.py:2544:
   yacc.py:2546:    (29) functioncall -> prefixexp args .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    return          reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    break           reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    for             reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    while           reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    repeat          reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    do              reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    function        reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    local           reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    if              reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    print           reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    scan            reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    LPAREN          reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    ID              reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    RESID           reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    elseif          reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    else            reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    end             reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    LSQUARE         reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    SDOT            reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    STRING          reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    LCURLY          reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    PLUS            reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    MINUS           reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    TIMES           reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    DIVIDE          reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    POWER           reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    LT              reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    LE              reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    GT              reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    GE              reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    NE              reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    CHECKEQ         reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    or              reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    and             reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    MODULO          reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    DBLDOTS         reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    RPAREN          reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    then            reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    COMMA           reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    RCURLY          reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    RSQUARE         reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    $end            reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2658:    until           reduce using rule 29 (functioncall -> prefixexp args .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 53
   yacc.py:2544:
   yacc.py:2546:    (32) args -> LPAREN . RPAREN
   yacc.py:2546:    (33) args -> LPAREN . explist RPAREN
   yacc.py:2546:    (70) explist -> . exp COMMA explist
   yacc.py:2546:    (71) explist -> . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    RPAREN          shift and go to state 119
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 121
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    explist                        shift and go to state 120
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 54
   yacc.py:2544:
   yacc.py:2546:    (68) var -> prefixexp SDOT . names
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    names                          shift and go to state 122
   yacc.py:2542:
   yacc.py:2543:state 55
   yacc.py:2544:
   yacc.py:2546:    (34) args -> STRING .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    SDOT            reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    LPAREN          reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    STRING          reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    LCURLY          reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    SEMI            reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    return          reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    break           reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    for             reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    while           reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    repeat          reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    do              reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    function        reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    local           reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    if              reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    print           reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    scan            reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    ID              reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    RESID           reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    $end            reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    end             reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    until           reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    elseif          reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    else            reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    RPAREN          reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    PLUS            reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    MINUS           reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    TIMES           reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    DIVIDE          reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    POWER           reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    LT              reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    LE              reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    GT              reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    GE              reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    NE              reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    CHECKEQ         reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    or              reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    and             reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    MODULO          reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    DBLDOTS         reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    then            reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    COMMA           reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    RCURLY          reduce using rule 34 (args -> STRING .)
   yacc.py:2658:    RSQUARE         reduce using rule 34 (args -> STRING .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 56
   yacc.py:2544:
   yacc.py:2546:    (14) stat -> for namelist . in explist do block end
   yacc.py:2547:
   yacc.py:2658:    in              shift and go to state 123
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 57
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for names . EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> for names . EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (69) namelist -> names . comid
   yacc.py:2546:    (49) comid -> . COMMA names comid
   yacc.py:2546:    (50) comid -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    EQUALS          shift and go to state 124
   yacc.py:2658:    COMMA           shift and go to state 126
   yacc.py:2658:    in              reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 125
   yacc.py:2685:    comid                          shift and go to state 127
   yacc.py:2542:
   yacc.py:2543:state 58
   yacc.py:2544:
   yacc.py:2546:    (11) stat -> varlist EQUALS . explist
   yacc.py:2546:    (70) explist -> . exp COMMA explist
   yacc.py:2546:    (71) explist -> . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 121
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    explist                        shift and go to state 128
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 59
   yacc.py:2544:
   yacc.py:2546:    (31) functioncall -> scan args .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    return          reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    break           reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    for             reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    while           reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    repeat          reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    do              reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    function        reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    local           reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    if              reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    print           reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    scan            reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    LPAREN          reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    ID              reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    RESID           reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    elseif          reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    else            reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    end             reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    LSQUARE         reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    SDOT            reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    STRING          reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    LCURLY          reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    PLUS            reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    MINUS           reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    TIMES           reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    DIVIDE          reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    POWER           reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    LT              reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    LE              reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    GT              reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    GE              reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    NE              reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    CHECKEQ         reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    or              reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    and             reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    MODULO          reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    DBLDOTS         reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    RPAREN          reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    then            reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    COMMA           reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    RCURLY          reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    RSQUARE         reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    $end            reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2658:    until           reduce using rule 31 (functioncall -> scan args .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 60
   yacc.py:2544:
   yacc.py:2546:    (3) sdash -> laststat M_chunk .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 3 (sdash -> laststat M_chunk .)
   yacc.py:2658:    elseif          reduce using rule 3 (sdash -> laststat M_chunk .)
   yacc.py:2658:    else            reduce using rule 3 (sdash -> laststat M_chunk .)
   yacc.py:2658:    $end            reduce using rule 3 (sdash -> laststat M_chunk .)
   yacc.py:2658:    until           reduce using rule 3 (sdash -> laststat M_chunk .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 61
   yacc.py:2544:
   yacc.py:2546:    (47) comvar -> COMMA . var comvar
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 129
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    var                            shift and go to state 130
   yacc.py:2542:
   yacc.py:2543:state 62
   yacc.py:2544:
   yacc.py:2546:    (65) varlist -> var comvar .
   yacc.py:2547:
   yacc.py:2658:    EQUALS          reduce using rule 65 (varlist -> var comvar .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 63
   yacc.py:2544:
   yacc.py:2546:    (48) comvar -> empty .
   yacc.py:2547:
   yacc.py:2658:    EQUALS          reduce using rule 48 (comvar -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 64
   yacc.py:2544:
   yacc.py:2546:    (19) stat -> do M_sc_beg . block M_sc_end end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (40) laststat -> . return retexplist
   yacc.py:2546:    (41) laststat -> . return
   yacc.py:2546:    (42) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat M_while1 block until M_while2 exp
   yacc.py:2546:    (19) stat -> . do M_sc_beg block M_sc_end end
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (24) stat -> . local namelist
   yacc.py:2546:    (25) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (26) stat -> . functioncall
   yacc.py:2546:    (51) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (65) varlist -> . var comvar
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 17
   yacc.py:2658:    break           shift and go to state 18
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 22
   yacc.py:2658:    repeat          shift and go to state 16
   yacc.py:2658:    do              shift and go to state 14
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 21
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 11
   yacc.py:2685:    var                            shift and go to state 12
   yacc.py:2685:    functioncall                   shift and go to state 13
   yacc.py:2685:    stat                           shift and go to state 15
   yacc.py:2685:    block                          shift and go to state 131
   yacc.py:2685:    sdash                          shift and go to state 132
   yacc.py:2542:
   yacc.py:2543:state 65
   yacc.py:2544:
   yacc.py:2546:    (20) M_sc_beg -> empty .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 20 (M_sc_beg -> empty .)
   yacc.py:2658:    break           reduce using rule 20 (M_sc_beg -> empty .)
   yacc.py:2658:    for             reduce using rule 20 (M_sc_beg -> empty .)
   yacc.py:2658:    while           reduce using rule 20 (M_sc_beg -> empty .)
   yacc.py:2658:    repeat          reduce using rule 20 (M_sc_beg -> empty .)
   yacc.py:2658:    do              reduce using rule 20 (M_sc_beg -> empty .)
   yacc.py:2658:    function        reduce using rule 20 (M_sc_beg -> empty .)
   yacc.py:2658:    local           reduce using rule 20 (M_sc_beg -> empty .)
   yacc.py:2658:    if              reduce using rule 20 (M_sc_beg -> empty .)
   yacc.py:2658:    print           reduce using rule 20 (M_sc_beg -> empty .)
   yacc.py:2658:    scan            reduce using rule 20 (M_sc_beg -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 20 (M_sc_beg -> empty .)
   yacc.py:2658:    ID              reduce using rule 20 (M_sc_beg -> empty .)
   yacc.py:2658:    RESID           reduce using rule 20 (M_sc_beg -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 66
   yacc.py:2544:
   yacc.py:2546:    (6) chunk -> stat SEMI .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    break           reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    for             reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    while           reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    repeat          reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    do              reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    function        reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    local           reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    if              reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    print           reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    scan            reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    LPAREN          reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    ID              reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    RESID           reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    end             reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    elseif          reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    else            reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    until           reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2658:    $end            reduce using rule 6 (chunk -> stat SEMI .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 67
   yacc.py:2544:
   yacc.py:2546:    (18) stat -> repeat M_while1 . block until M_while2 exp
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (40) laststat -> . return retexplist
   yacc.py:2546:    (41) laststat -> . return
   yacc.py:2546:    (42) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat M_while1 block until M_while2 exp
   yacc.py:2546:    (19) stat -> . do M_sc_beg block M_sc_end end
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (24) stat -> . local namelist
   yacc.py:2546:    (25) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (26) stat -> . functioncall
   yacc.py:2546:    (51) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (65) varlist -> . var comvar
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 17
   yacc.py:2658:    break           shift and go to state 18
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 22
   yacc.py:2658:    repeat          shift and go to state 16
   yacc.py:2658:    do              shift and go to state 14
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 21
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 11
   yacc.py:2685:    var                            shift and go to state 12
   yacc.py:2685:    functioncall                   shift and go to state 13
   yacc.py:2685:    stat                           shift and go to state 15
   yacc.py:2685:    sdash                          shift and go to state 132
   yacc.py:2685:    block                          shift and go to state 133
   yacc.py:2542:
   yacc.py:2543:state 68
   yacc.py:2544:
   yacc.py:2546:    (16) M_while1 -> empty .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    STRING          reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    true            reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    false           reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    function        reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    INTEGER         reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    FLOAT           reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    HEX             reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    LCURLY          reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    not             reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    MINUS           reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    HASH            reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    print           reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    scan            reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    ID              reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    RESID           reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    return          reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    break           reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    for             reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    while           reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    repeat          reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    do              reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    local           reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2658:    if              reduce using rule 16 (M_while1 -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 69
   yacc.py:2544:
   yacc.py:2546:    (122) retexp -> tableconstructor .
   yacc.py:2546:    (96) exp -> tableconstructor .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 122 (retexp -> tableconstructor .)
   yacc.py:2658:    $end            reduce using rule 122 (retexp -> tableconstructor .)
   yacc.py:2658:    SEMI            reduce using rule 122 (retexp -> tableconstructor .)
   yacc.py:2658:    end             reduce using rule 122 (retexp -> tableconstructor .)
   yacc.py:2658:    until           reduce using rule 122 (retexp -> tableconstructor .)
   yacc.py:2658:    elseif          reduce using rule 122 (retexp -> tableconstructor .)
   yacc.py:2658:    else            reduce using rule 122 (retexp -> tableconstructor .)
   yacc.py:2658:    PLUS            reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    MINUS           reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    TIMES           reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    DIVIDE          reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    POWER           reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    LT              reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    LE              reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    GT              reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    GE              reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    NE              reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    CHECKEQ         reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    and             reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    or              reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    MODULO          reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2658:    DBLDOTS         reduce using rule 96 (exp -> tableconstructor .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 70
   yacc.py:2544:
   yacc.py:2546:    (104) retexp -> false .
   yacc.py:2546:    (76) exp -> false .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 104 (retexp -> false .)
   yacc.py:2658:    $end            reduce using rule 104 (retexp -> false .)
   yacc.py:2658:    SEMI            reduce using rule 104 (retexp -> false .)
   yacc.py:2658:    end             reduce using rule 104 (retexp -> false .)
   yacc.py:2658:    until           reduce using rule 104 (retexp -> false .)
   yacc.py:2658:    elseif          reduce using rule 104 (retexp -> false .)
   yacc.py:2658:    else            reduce using rule 104 (retexp -> false .)
   yacc.py:2658:    PLUS            reduce using rule 76 (exp -> false .)
   yacc.py:2658:    MINUS           reduce using rule 76 (exp -> false .)
   yacc.py:2658:    TIMES           reduce using rule 76 (exp -> false .)
   yacc.py:2658:    DIVIDE          reduce using rule 76 (exp -> false .)
   yacc.py:2658:    POWER           reduce using rule 76 (exp -> false .)
   yacc.py:2658:    LT              reduce using rule 76 (exp -> false .)
   yacc.py:2658:    LE              reduce using rule 76 (exp -> false .)
   yacc.py:2658:    GT              reduce using rule 76 (exp -> false .)
   yacc.py:2658:    GE              reduce using rule 76 (exp -> false .)
   yacc.py:2658:    NE              reduce using rule 76 (exp -> false .)
   yacc.py:2658:    CHECKEQ         reduce using rule 76 (exp -> false .)
   yacc.py:2658:    and             reduce using rule 76 (exp -> false .)
   yacc.py:2658:    or              reduce using rule 76 (exp -> false .)
   yacc.py:2658:    MODULO          reduce using rule 76 (exp -> false .)
   yacc.py:2658:    DBLDOTS         reduce using rule 76 (exp -> false .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 71
   yacc.py:2544:
   yacc.py:2546:    (105) retexp -> TRPLDOTS .
   yacc.py:2546:    (77) exp -> TRPLDOTS .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 105 (retexp -> TRPLDOTS .)
   yacc.py:2658:    $end            reduce using rule 105 (retexp -> TRPLDOTS .)
   yacc.py:2658:    SEMI            reduce using rule 105 (retexp -> TRPLDOTS .)
   yacc.py:2658:    end             reduce using rule 105 (retexp -> TRPLDOTS .)
   yacc.py:2658:    until           reduce using rule 105 (retexp -> TRPLDOTS .)
   yacc.py:2658:    elseif          reduce using rule 105 (retexp -> TRPLDOTS .)
   yacc.py:2658:    else            reduce using rule 105 (retexp -> TRPLDOTS .)
   yacc.py:2658:    PLUS            reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    MINUS           reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    TIMES           reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    DIVIDE          reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    POWER           reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    LT              reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    LE              reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    GT              reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    GE              reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    NE              reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    CHECKEQ         reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    and             reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    or              reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    MODULO          reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2658:    DBLDOTS         reduce using rule 77 (exp -> TRPLDOTS .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 72
   yacc.py:2544:
   yacc.py:2546:    (106) retexp -> prefixexp .
   yacc.py:2546:    (79) exp -> prefixexp .
   yacc.py:2546:    (67) var -> prefixexp . LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> prefixexp . SDOT names
   yacc.py:2546:    (29) functioncall -> prefixexp . args
   yacc.py:2546:    (32) args -> . LPAREN RPAREN
   yacc.py:2546:    (33) args -> . LPAREN explist RPAREN
   yacc.py:2546:    (34) args -> . STRING
   yacc.py:2546:    (35) args -> . tableconstructor
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 106 (retexp -> prefixexp .)
   yacc.py:2658:    $end            reduce using rule 106 (retexp -> prefixexp .)
   yacc.py:2658:    SEMI            reduce using rule 106 (retexp -> prefixexp .)
   yacc.py:2658:    end             reduce using rule 106 (retexp -> prefixexp .)
   yacc.py:2658:    until           reduce using rule 106 (retexp -> prefixexp .)
   yacc.py:2658:    elseif          reduce using rule 106 (retexp -> prefixexp .)
   yacc.py:2658:    else            reduce using rule 106 (retexp -> prefixexp .)
   yacc.py:2658:    PLUS            reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    MINUS           reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    TIMES           reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    DIVIDE          reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    POWER           reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    LT              reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    LE              reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    GT              reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    GE              reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    NE              reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    and             reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    or              reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    MODULO          reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 79 (exp -> prefixexp .)
   yacc.py:2658:    LSQUARE         shift and go to state 51
   yacc.py:2658:    SDOT            shift and go to state 54
   yacc.py:2658:    LPAREN          shift and go to state 53
   yacc.py:2658:    STRING          shift and go to state 55
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2660:
   yacc.py:2685:    tableconstructor               shift and go to state 50
   yacc.py:2685:    args                           shift and go to state 52
   yacc.py:2542:
   yacc.py:2543:state 73
   yacc.py:2544:
   yacc.py:2546:    (99) retexplist -> retexp .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 99 (retexplist -> retexp .)
   yacc.py:2658:    $end            reduce using rule 99 (retexplist -> retexp .)
   yacc.py:2658:    SEMI            reduce using rule 99 (retexplist -> retexp .)
   yacc.py:2658:    end             reduce using rule 99 (retexplist -> retexp .)
   yacc.py:2658:    until           reduce using rule 99 (retexplist -> retexp .)
   yacc.py:2658:    elseif          reduce using rule 99 (retexplist -> retexp .)
   yacc.py:2658:    else            reduce using rule 99 (retexplist -> retexp .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 74
   yacc.py:2544:
   yacc.py:2546:    (102) retexp -> STRING .
   yacc.py:2546:    (74) exp -> STRING .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 102 (retexp -> STRING .)
   yacc.py:2658:    $end            reduce using rule 102 (retexp -> STRING .)
   yacc.py:2658:    SEMI            reduce using rule 102 (retexp -> STRING .)
   yacc.py:2658:    end             reduce using rule 102 (retexp -> STRING .)
   yacc.py:2658:    until           reduce using rule 102 (retexp -> STRING .)
   yacc.py:2658:    elseif          reduce using rule 102 (retexp -> STRING .)
   yacc.py:2658:    else            reduce using rule 102 (retexp -> STRING .)
   yacc.py:2658:    PLUS            reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    MINUS           reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    TIMES           reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    DIVIDE          reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    POWER           reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    LT              reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    LE              reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    GT              reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    GE              reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    NE              reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    CHECKEQ         reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    and             reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    or              reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    MODULO          reduce using rule 74 (exp -> STRING .)
   yacc.py:2658:    DBLDOTS         reduce using rule 74 (exp -> STRING .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 75
   yacc.py:2544:
   yacc.py:2546:    (100) retexp -> nil .
   yacc.py:2546:    (72) exp -> nil .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 100 (retexp -> nil .)
   yacc.py:2658:    $end            reduce using rule 100 (retexp -> nil .)
   yacc.py:2658:    SEMI            reduce using rule 100 (retexp -> nil .)
   yacc.py:2658:    end             reduce using rule 100 (retexp -> nil .)
   yacc.py:2658:    until           reduce using rule 100 (retexp -> nil .)
   yacc.py:2658:    elseif          reduce using rule 100 (retexp -> nil .)
   yacc.py:2658:    else            reduce using rule 100 (retexp -> nil .)
   yacc.py:2658:    PLUS            reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    MINUS           reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    TIMES           reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    DIVIDE          reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    POWER           reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    LT              reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    LE              reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    GT              reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    GE              reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    NE              reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    CHECKEQ         reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    and             reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    or              reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    MODULO          reduce using rule 72 (exp -> nil .)
   yacc.py:2658:    DBLDOTS         reduce using rule 72 (exp -> nil .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 76
   yacc.py:2544:
   yacc.py:2546:    (103) retexp -> true .
   yacc.py:2546:    (75) exp -> true .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 103 (retexp -> true .)
   yacc.py:2658:    $end            reduce using rule 103 (retexp -> true .)
   yacc.py:2658:    SEMI            reduce using rule 103 (retexp -> true .)
   yacc.py:2658:    end             reduce using rule 103 (retexp -> true .)
   yacc.py:2658:    until           reduce using rule 103 (retexp -> true .)
   yacc.py:2658:    elseif          reduce using rule 103 (retexp -> true .)
   yacc.py:2658:    else            reduce using rule 103 (retexp -> true .)
   yacc.py:2658:    PLUS            reduce using rule 75 (exp -> true .)
   yacc.py:2658:    MINUS           reduce using rule 75 (exp -> true .)
   yacc.py:2658:    TIMES           reduce using rule 75 (exp -> true .)
   yacc.py:2658:    DIVIDE          reduce using rule 75 (exp -> true .)
   yacc.py:2658:    POWER           reduce using rule 75 (exp -> true .)
   yacc.py:2658:    LT              reduce using rule 75 (exp -> true .)
   yacc.py:2658:    LE              reduce using rule 75 (exp -> true .)
   yacc.py:2658:    GT              reduce using rule 75 (exp -> true .)
   yacc.py:2658:    GE              reduce using rule 75 (exp -> true .)
   yacc.py:2658:    NE              reduce using rule 75 (exp -> true .)
   yacc.py:2658:    CHECKEQ         reduce using rule 75 (exp -> true .)
   yacc.py:2658:    and             reduce using rule 75 (exp -> true .)
   yacc.py:2658:    or              reduce using rule 75 (exp -> true .)
   yacc.py:2658:    MODULO          reduce using rule 75 (exp -> true .)
   yacc.py:2658:    DBLDOTS         reduce using rule 75 (exp -> true .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 77
   yacc.py:2544:
   yacc.py:2546:    (101) retexp -> Number .
   yacc.py:2546:    (73) exp -> Number .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 101 (retexp -> Number .)
   yacc.py:2658:    $end            reduce using rule 101 (retexp -> Number .)
   yacc.py:2658:    SEMI            reduce using rule 101 (retexp -> Number .)
   yacc.py:2658:    end             reduce using rule 101 (retexp -> Number .)
   yacc.py:2658:    until           reduce using rule 101 (retexp -> Number .)
   yacc.py:2658:    elseif          reduce using rule 101 (retexp -> Number .)
   yacc.py:2658:    else            reduce using rule 101 (retexp -> Number .)
   yacc.py:2658:    PLUS            reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    MINUS           reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    TIMES           reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    DIVIDE          reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    POWER           reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    LT              reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    LE              reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    GT              reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    GE              reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    NE              reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    CHECKEQ         reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    and             reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    or              reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    MODULO          reduce using rule 73 (exp -> Number .)
   yacc.py:2658:    DBLDOTS         reduce using rule 73 (exp -> Number .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 78
   yacc.py:2544:
   yacc.py:2546:    (40) laststat -> return retexplist .
   yacc.py:2546:    (98) retexplist -> retexplist . COMMA retexp
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 40 (laststat -> return retexplist .)
   yacc.py:2658:    until           reduce using rule 40 (laststat -> return retexplist .)
   yacc.py:2658:    elseif          reduce using rule 40 (laststat -> return retexplist .)
   yacc.py:2658:    else            reduce using rule 40 (laststat -> return retexplist .)
   yacc.py:2658:    SEMI            reduce using rule 40 (laststat -> return retexplist .)
   yacc.py:2658:    $end            reduce using rule 40 (laststat -> return retexplist .)
   yacc.py:2658:    COMMA           shift and go to state 134
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 79
   yacc.py:2544:
   yacc.py:2546:    (107) retexp -> exp . PLUS exp
   yacc.py:2546:    (108) retexp -> exp . MINUS exp
   yacc.py:2546:    (109) retexp -> exp . TIMES exp
   yacc.py:2546:    (110) retexp -> exp . DIVIDE exp
   yacc.py:2546:    (111) retexp -> exp . POWER exp
   yacc.py:2546:    (112) retexp -> exp . LT exp
   yacc.py:2546:    (113) retexp -> exp . LE exp
   yacc.py:2546:    (114) retexp -> exp . GT exp
   yacc.py:2546:    (115) retexp -> exp . GE exp
   yacc.py:2546:    (116) retexp -> exp . NE exp
   yacc.py:2546:    (117) retexp -> exp . CHECKEQ exp
   yacc.py:2546:    (118) retexp -> exp . and M_andor exp
   yacc.py:2546:    (119) retexp -> exp . or M_andor exp
   yacc.py:2546:    (120) retexp -> exp . MODULO exp
   yacc.py:2546:    (121) retexp -> exp . DBLDOTS exp
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            shift and go to state 146
   yacc.py:2658:    MINUS           shift and go to state 148
   yacc.py:2658:    TIMES           shift and go to state 142
   yacc.py:2658:    DIVIDE          shift and go to state 138
   yacc.py:2658:    POWER           shift and go to state 139
   yacc.py:2658:    LT              shift and go to state 144
   yacc.py:2658:    LE              shift and go to state 136
   yacc.py:2658:    GT              shift and go to state 145
   yacc.py:2658:    GE              shift and go to state 141
   yacc.py:2658:    NE              shift and go to state 149
   yacc.py:2658:    CHECKEQ         shift and go to state 143
   yacc.py:2658:    and             shift and go to state 135
   yacc.py:2658:    or              shift and go to state 140
   yacc.py:2658:    MODULO          shift and go to state 137
   yacc.py:2658:    DBLDOTS         shift and go to state 147
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 80
   yacc.py:2544:
   yacc.py:2546:    (123) retexp -> unop . exp
   yacc.py:2546:    (97) exp -> unop . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 150
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 81
   yacc.py:2544:
   yacc.py:2546:    (30) functioncall -> print args .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    return          reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    break           reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    for             reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    while           reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    repeat          reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    do              reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    function        reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    local           reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    if              reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    print           reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    scan            reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    LPAREN          reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    ID              reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    RESID           reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    elseif          reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    else            reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    end             reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    LSQUARE         reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    SDOT            reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    STRING          reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    LCURLY          reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    PLUS            reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    MINUS           reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    TIMES           reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    DIVIDE          reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    POWER           reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    LT              reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    LE              reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    GT              reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    GE              reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    NE              reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    CHECKEQ         reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    or              reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    and             reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    MODULO          reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    DBLDOTS         reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    RPAREN          reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    then            reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    COMMA           reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    RCURLY          reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    RSQUARE         reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    $end            reduce using rule 30 (functioncall -> print args .)
   yacc.py:2658:    until           reduce using rule 30 (functioncall -> print args .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 82
   yacc.py:2544:
   yacc.py:2546:    (23) stat -> local function . names funcbody
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    names                          shift and go to state 151
   yacc.py:2542:
   yacc.py:2543:state 83
   yacc.py:2544:
   yacc.py:2546:    (24) stat -> local namelist .
   yacc.py:2546:    (25) stat -> local namelist . EQUALS explist
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    return          reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    break           reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    for             reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    while           reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    repeat          reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    do              reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    function        reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    local           reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    if              reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    print           reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    scan            reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    LPAREN          reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    ID              reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    RESID           reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    end             reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    $end            reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    until           reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    elseif          reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    else            reduce using rule 24 (stat -> local namelist .)
   yacc.py:2658:    EQUALS          shift and go to state 152
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 84
   yacc.py:2544:
   yacc.py:2546:    (69) namelist -> names . comid
   yacc.py:2546:    (49) comid -> . COMMA names comid
   yacc.py:2546:    (50) comid -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    COMMA           shift and go to state 126
   yacc.py:2658:    EQUALS          reduce using rule 127 (empty -> .)
   yacc.py:2658:    SEMI            reduce using rule 127 (empty -> .)
   yacc.py:2658:    return          reduce using rule 127 (empty -> .)
   yacc.py:2658:    break           reduce using rule 127 (empty -> .)
   yacc.py:2658:    for             reduce using rule 127 (empty -> .)
   yacc.py:2658:    while           reduce using rule 127 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 127 (empty -> .)
   yacc.py:2658:    do              reduce using rule 127 (empty -> .)
   yacc.py:2658:    function        reduce using rule 127 (empty -> .)
   yacc.py:2658:    local           reduce using rule 127 (empty -> .)
   yacc.py:2658:    if              reduce using rule 127 (empty -> .)
   yacc.py:2658:    print           reduce using rule 127 (empty -> .)
   yacc.py:2658:    scan            reduce using rule 127 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 127 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 127 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 127 (empty -> .)
   yacc.py:2658:    $end            reduce using rule 127 (empty -> .)
   yacc.py:2658:    end             reduce using rule 127 (empty -> .)
   yacc.py:2658:    until           reduce using rule 127 (empty -> .)
   yacc.py:2658:    elseif          reduce using rule 127 (empty -> .)
   yacc.py:2658:    else            reduce using rule 127 (empty -> .)
   yacc.py:2658:    RPAREN          reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2667:  ! COMMA           [ reduce using rule 127 (empty -> .) ]
   yacc.py:2671:
   yacc.py:2685:    empty                          shift and go to state 125
   yacc.py:2685:    comid                          shift and go to state 127
   yacc.py:2542:
   yacc.py:2543:state 85
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> while M_while1 . exp do M_while2 block end
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    exp                            shift and go to state 153
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 86
   yacc.py:2544:
   yacc.py:2546:    (22) stat -> function funcname funcbody .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    return          reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    break           reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    for             reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    while           reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    repeat          reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    do              reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    function        reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    local           reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    if              reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    print           reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    scan            reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    LPAREN          reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    ID              reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    RESID           reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    end             reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    $end            reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    until           reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    elseif          reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    else            reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 87
   yacc.py:2544:
   yacc.py:2546:    (27) funcbody -> LPAREN . RPAREN block end
   yacc.py:2546:    (28) funcbody -> LPAREN . parlist RPAREN block end
   yacc.py:2546:    (36) parlist -> . namelist
   yacc.py:2546:    (37) parlist -> . namelist comtrp
   yacc.py:2546:    (38) parlist -> . TRPLDOTS
   yacc.py:2546:    (69) namelist -> . names comid
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    RPAREN          shift and go to state 157
   yacc.py:2658:    TRPLDOTS        shift and go to state 155
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    namelist                       shift and go to state 154
   yacc.py:2685:    parlist                        shift and go to state 156
   yacc.py:2685:    names                          shift and go to state 84
   yacc.py:2542:
   yacc.py:2543:state 88
   yacc.py:2544:
   yacc.py:2546:    (45) dotid -> SDOT . names dotid
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    names                          shift and go to state 158
   yacc.py:2542:
   yacc.py:2543:state 89
   yacc.py:2544:
   yacc.py:2546:    (43) funcname -> names dotid . COLON
   yacc.py:2547:
   yacc.py:2658:    COLON           shift and go to state 159
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 90
   yacc.py:2544:
   yacc.py:2546:    (46) dotid -> empty .
   yacc.py:2547:
   yacc.py:2658:    COLON           reduce using rule 46 (dotid -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 91
   yacc.py:2544:
   yacc.py:2546:    (141) field -> names . EQUALS exp
   yacc.py:2546:    (66) var -> names .
   yacc.py:2547:
   yacc.py:2658:    EQUALS          shift and go to state 160
   yacc.py:2658:    LSQUARE         reduce using rule 66 (var -> names .)
   yacc.py:2658:    SDOT            reduce using rule 66 (var -> names .)
   yacc.py:2658:    LPAREN          reduce using rule 66 (var -> names .)
   yacc.py:2658:    STRING          reduce using rule 66 (var -> names .)
   yacc.py:2658:    LCURLY          reduce using rule 66 (var -> names .)
   yacc.py:2658:    PLUS            reduce using rule 66 (var -> names .)
   yacc.py:2658:    MINUS           reduce using rule 66 (var -> names .)
   yacc.py:2658:    TIMES           reduce using rule 66 (var -> names .)
   yacc.py:2658:    DIVIDE          reduce using rule 66 (var -> names .)
   yacc.py:2658:    POWER           reduce using rule 66 (var -> names .)
   yacc.py:2658:    LT              reduce using rule 66 (var -> names .)
   yacc.py:2658:    LE              reduce using rule 66 (var -> names .)
   yacc.py:2658:    GT              reduce using rule 66 (var -> names .)
   yacc.py:2658:    GE              reduce using rule 66 (var -> names .)
   yacc.py:2658:    NE              reduce using rule 66 (var -> names .)
   yacc.py:2658:    CHECKEQ         reduce using rule 66 (var -> names .)
   yacc.py:2658:    or              reduce using rule 66 (var -> names .)
   yacc.py:2658:    and             reduce using rule 66 (var -> names .)
   yacc.py:2658:    MODULO          reduce using rule 66 (var -> names .)
   yacc.py:2658:    DBLDOTS         reduce using rule 66 (var -> names .)
   yacc.py:2658:    COMMA           reduce using rule 66 (var -> names .)
   yacc.py:2658:    SEMI            reduce using rule 66 (var -> names .)
   yacc.py:2658:    RCURLY          reduce using rule 66 (var -> names .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 92
   yacc.py:2544:
   yacc.py:2546:    (135) tableconstructor -> LCURLY RCURLY .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    MINUS           reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    TIMES           reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    DIVIDE          reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    POWER           reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    LT              reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    LE              reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    GT              reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    GE              reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    NE              reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    CHECKEQ         reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    or              reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    and             reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    MODULO          reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    DBLDOTS         reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    RPAREN          reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    then            reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    COMMA           reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    SEMI            reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    RCURLY          reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    RSQUARE         reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    return          reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    break           reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    for             reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    while           reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    repeat          reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    do              reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    function        reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    local           reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    if              reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    print           reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    scan            reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    LPAREN          reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    ID              reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    RESID           reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    $end            reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    end             reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    until           reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    elseif          reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    else            reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    LSQUARE         reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    SDOT            reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    STRING          reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    LCURLY          reduce using rule 135 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 93
   yacc.py:2544:
   yacc.py:2546:    (136) fieldlist -> field . fieldseplist fieldsep
   yacc.py:2546:    (137) fieldlist -> field . fieldseplist
   yacc.py:2546:    (138) fieldseplist -> . fieldseplist fieldsep field
   yacc.py:2546:    (139) fieldseplist -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 127 (empty -> .)
   yacc.py:2658:    SEMI            reduce using rule 127 (empty -> .)
   yacc.py:2658:    RCURLY          reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    fieldseplist                   shift and go to state 161
   yacc.py:2685:    empty                          shift and go to state 162
   yacc.py:2542:
   yacc.py:2543:state 94
   yacc.py:2544:
   yacc.py:2546:    (134) tableconstructor -> LCURLY fieldlist . RCURLY
   yacc.py:2547:
   yacc.py:2658:    RCURLY          shift and go to state 163
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 95
   yacc.py:2544:
   yacc.py:2546:    (142) field -> exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 142 (field -> exp .)
   yacc.py:2658:    SEMI            reduce using rule 142 (field -> exp .)
   yacc.py:2658:    RCURLY          reduce using rule 142 (field -> exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    or              shift and go to state 101
   yacc.py:2658:    and             shift and go to state 97
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 96
   yacc.py:2544:
   yacc.py:2546:    (140) field -> LSQUARE . exp RSQUARE EQUALS exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 164
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 97
   yacc.py:2544:
   yacc.py:2546:    (92) exp -> exp and . M_andor exp
   yacc.py:2546:    (93) M_andor -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 127 (empty -> .)
   yacc.py:2658:    STRING          reduce using rule 127 (empty -> .)
   yacc.py:2658:    true            reduce using rule 127 (empty -> .)
   yacc.py:2658:    false           reduce using rule 127 (empty -> .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 127 (empty -> .)
   yacc.py:2658:    function        reduce using rule 127 (empty -> .)
   yacc.py:2658:    INTEGER         reduce using rule 127 (empty -> .)
   yacc.py:2658:    FLOAT           reduce using rule 127 (empty -> .)
   yacc.py:2658:    HEX             reduce using rule 127 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 127 (empty -> .)
   yacc.py:2658:    LCURLY          reduce using rule 127 (empty -> .)
   yacc.py:2658:    not             reduce using rule 127 (empty -> .)
   yacc.py:2658:    MINUS           reduce using rule 127 (empty -> .)
   yacc.py:2658:    HASH            reduce using rule 127 (empty -> .)
   yacc.py:2658:    print           reduce using rule 127 (empty -> .)
   yacc.py:2658:    scan            reduce using rule 127 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 127 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 165
   yacc.py:2685:    M_andor                        shift and go to state 166
   yacc.py:2542:
   yacc.py:2543:state 98
   yacc.py:2544:
   yacc.py:2546:    (86) exp -> exp LE . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 167
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 99
   yacc.py:2544:
   yacc.py:2546:    (129) prefixexp -> LPAREN exp RPAREN .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    SDOT            reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    LPAREN          reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    STRING          reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    LCURLY          reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    RSQUARE         reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    PLUS            reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    MINUS           reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    TIMES           reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    DIVIDE          reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    POWER           reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    LT              reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    LE              reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    GT              reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    GE              reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    NE              reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    CHECKEQ         reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    or              reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    and             reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    MODULO          reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    DBLDOTS         reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    RPAREN          reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    then            reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    COMMA           reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    SEMI            reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    RCURLY          reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    return          reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    break           reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    for             reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    while           reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    repeat          reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    do              reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    function        reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    local           reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    if              reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    print           reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    scan            reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    ID              reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    RESID           reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    $end            reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    end             reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    until           reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    elseif          reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    else            reduce using rule 129 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 100
   yacc.py:2544:
   yacc.py:2546:    (84) exp -> exp POWER . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 168
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 101
   yacc.py:2544:
   yacc.py:2546:    (91) exp -> exp or . M_andor exp
   yacc.py:2546:    (93) M_andor -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 127 (empty -> .)
   yacc.py:2658:    STRING          reduce using rule 127 (empty -> .)
   yacc.py:2658:    true            reduce using rule 127 (empty -> .)
   yacc.py:2658:    false           reduce using rule 127 (empty -> .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 127 (empty -> .)
   yacc.py:2658:    function        reduce using rule 127 (empty -> .)
   yacc.py:2658:    INTEGER         reduce using rule 127 (empty -> .)
   yacc.py:2658:    FLOAT           reduce using rule 127 (empty -> .)
   yacc.py:2658:    HEX             reduce using rule 127 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 127 (empty -> .)
   yacc.py:2658:    LCURLY          reduce using rule 127 (empty -> .)
   yacc.py:2658:    not             reduce using rule 127 (empty -> .)
   yacc.py:2658:    MINUS           reduce using rule 127 (empty -> .)
   yacc.py:2658:    HASH            reduce using rule 127 (empty -> .)
   yacc.py:2658:    print           reduce using rule 127 (empty -> .)
   yacc.py:2658:    scan            reduce using rule 127 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 127 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 165
   yacc.py:2685:    M_andor                        shift and go to state 169
   yacc.py:2542:
   yacc.py:2543:state 102
   yacc.py:2544:
   yacc.py:2546:    (88) exp -> exp GE . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 170
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 103
   yacc.py:2544:
   yacc.py:2546:    (82) exp -> exp TIMES . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 171
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 104
   yacc.py:2544:
   yacc.py:2546:    (90) exp -> exp CHECKEQ . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 172
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 105
   yacc.py:2544:
   yacc.py:2546:    (85) exp -> exp LT . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 173
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 106
   yacc.py:2544:
   yacc.py:2546:    (87) exp -> exp GT . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 174
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 107
   yacc.py:2544:
   yacc.py:2546:    (80) exp -> exp PLUS . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 175
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 108
   yacc.py:2544:
   yacc.py:2546:    (94) exp -> exp MODULO . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 176
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 109
   yacc.py:2544:
   yacc.py:2546:    (95) exp -> exp DBLDOTS . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 177
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 110
   yacc.py:2544:
   yacc.py:2546:    (81) exp -> exp MINUS . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 178
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 111
   yacc.py:2544:
   yacc.py:2546:    (89) exp -> exp NE . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 179
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 112
   yacc.py:2544:
   yacc.py:2546:    (83) exp -> exp DIVIDE . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 180
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 113
   yacc.py:2544:
   yacc.py:2546:    (97) exp -> unop exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    MINUS           reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    TIMES           reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    LT              reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    LE              reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    GT              reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    GE              reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    NE              reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    or              reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    and             reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    MODULO          reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    RPAREN          reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    then            reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    COMMA           reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    SEMI            reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    RCURLY          reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    return          reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    break           reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    for             reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    while           reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    repeat          reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    do              reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    function        reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    local           reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    if              reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    print           reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    scan            reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    LPAREN          reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    ID              reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    RESID           reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    $end            reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    end             reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    until           reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    elseif          reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    else            reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 97 (exp -> unop exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 107 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 110 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 103 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 112 ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 108 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 109 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 114
   yacc.py:2544:
   yacc.py:2546:    (5) chunk -> chunk M_chunk stat . SEMI
   yacc.py:2546:    (7) chunk -> chunk M_chunk stat .
   yacc.py:2547:
   yacc.py:2658:    SEMI            shift and go to state 181
   yacc.py:2658:    return          reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    break           reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    for             reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    while           reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    repeat          reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    do              reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    function        reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    local           reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    if              reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    print           reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    scan            reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    LPAREN          reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    ID              reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    RESID           reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    end             reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    elseif          reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    else            reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    until           reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2658:    $end            reduce using rule 7 (chunk -> chunk M_chunk stat .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 115
   yacc.py:2544:
   yacc.py:2546:    (2) sdash -> chunk laststat M_chunk .
   yacc.py:2546:    (4) sdash -> chunk laststat M_chunk . SEMI
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 2 (sdash -> chunk laststat M_chunk .)
   yacc.py:2658:    elseif          reduce using rule 2 (sdash -> chunk laststat M_chunk .)
   yacc.py:2658:    else            reduce using rule 2 (sdash -> chunk laststat M_chunk .)
   yacc.py:2658:    $end            reduce using rule 2 (sdash -> chunk laststat M_chunk .)
   yacc.py:2658:    until           reduce using rule 2 (sdash -> chunk laststat M_chunk .)
   yacc.py:2658:    SEMI            shift and go to state 182
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 116
   yacc.py:2544:
   yacc.py:2546:    (51) stat -> if exp M_bool . then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2547:
   yacc.py:2658:    then            shift and go to state 183
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 117
   yacc.py:2544:
   yacc.py:2546:    (52) M_bool -> empty .
   yacc.py:2547:
   yacc.py:2658:    then            reduce using rule 52 (M_bool -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 118
   yacc.py:2544:
   yacc.py:2546:    (67) var -> prefixexp LSQUARE exp . RSQUARE
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    RSQUARE         shift and go to state 184
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    or              shift and go to state 101
   yacc.py:2658:    and             shift and go to state 97
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 119
   yacc.py:2544:
   yacc.py:2546:    (32) args -> LPAREN RPAREN .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    SDOT            reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    LPAREN          reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    STRING          reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    LCURLY          reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    SEMI            reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    return          reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    break           reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    for             reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    while           reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    repeat          reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    do              reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    function        reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    local           reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    if              reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    print           reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    scan            reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    ID              reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    RESID           reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    $end            reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    end             reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    until           reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    elseif          reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    else            reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    RPAREN          reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    PLUS            reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    MINUS           reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    TIMES           reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    DIVIDE          reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    POWER           reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    LT              reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    LE              reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    GT              reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    GE              reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    NE              reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    CHECKEQ         reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    or              reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    and             reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    MODULO          reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    DBLDOTS         reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    then            reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    COMMA           reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    RCURLY          reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2658:    RSQUARE         reduce using rule 32 (args -> LPAREN RPAREN .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 120
   yacc.py:2544:
   yacc.py:2546:    (33) args -> LPAREN explist . RPAREN
   yacc.py:2547:
   yacc.py:2658:    RPAREN          shift and go to state 185
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 121
   yacc.py:2544:
   yacc.py:2546:    (70) explist -> exp . COMMA explist
   yacc.py:2546:    (71) explist -> exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           shift and go to state 186
   yacc.py:2658:    RPAREN          reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    SEMI            reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    return          reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    break           reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    for             reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    while           reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    repeat          reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    do              reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    function        reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    local           reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    if              reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    print           reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    scan            reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    LPAREN          reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    ID              reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    RESID           reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    $end            reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    end             reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    until           reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    elseif          reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    else            reduce using rule 71 (explist -> exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    or              shift and go to state 101
   yacc.py:2658:    and             shift and go to state 97
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 122
   yacc.py:2544:
   yacc.py:2546:    (68) var -> prefixexp SDOT names .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    SDOT            reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    LPAREN          reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    STRING          reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    LCURLY          reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    PLUS            reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    MINUS           reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    TIMES           reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    DIVIDE          reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    POWER           reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    LT              reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    LE              reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    GT              reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    GE              reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    NE              reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    CHECKEQ         reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    or              reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    and             reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    MODULO          reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    DBLDOTS         reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    COMMA           reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    SEMI            reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    RCURLY          reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    EQUALS          reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    $end            reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    end             reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    until           reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    elseif          reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    else            reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    RSQUARE         reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    then            reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    RPAREN          reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    return          reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    break           reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    for             reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    while           reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    repeat          reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    do              reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    function        reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    local           reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    if              reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    print           reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    scan            reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    ID              reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2658:    RESID           reduce using rule 68 (var -> prefixexp SDOT names .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 123
   yacc.py:2544:
   yacc.py:2546:    (14) stat -> for namelist in . explist do block end
   yacc.py:2546:    (70) explist -> . exp COMMA explist
   yacc.py:2546:    (71) explist -> . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 121
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    explist                        shift and go to state 187
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 124
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for names EQUALS . exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> for names EQUALS . exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    exp                            shift and go to state 188
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2542:
   yacc.py:2543:state 125
   yacc.py:2544:
   yacc.py:2546:    (50) comid -> empty .
   yacc.py:2547:
   yacc.py:2658:    in              reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    EQUALS          reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    SEMI            reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    return          reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    break           reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    for             reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    while           reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    repeat          reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    do              reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    function        reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    local           reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    if              reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    print           reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    scan            reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    ID              reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    RESID           reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    $end            reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    end             reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    until           reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    elseif          reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    else            reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    COMMA           reduce using rule 50 (comid -> empty .)
   yacc.py:2658:    RPAREN          reduce using rule 50 (comid -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 126
   yacc.py:2544:
   yacc.py:2546:    (49) comid -> COMMA . names comid
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    names                          shift and go to state 189
   yacc.py:2542:
   yacc.py:2543:state 127
   yacc.py:2544:
   yacc.py:2546:    (69) namelist -> names comid .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    RPAREN          reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    EQUALS          reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    SEMI            reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    return          reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    break           reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    for             reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    while           reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    repeat          reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    do              reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    function        reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    local           reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    if              reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    print           reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    scan            reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    LPAREN          reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    ID              reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    RESID           reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    $end            reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    end             reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    until           reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    elseif          reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    else            reduce using rule 69 (namelist -> names comid .)
   yacc.py:2658:    in              reduce using rule 69 (namelist -> names comid .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 128
   yacc.py:2544:
   yacc.py:2546:    (11) stat -> varlist EQUALS explist .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    return          reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    break           reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    for             reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    while           reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    repeat          reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    do              reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    function        reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    local           reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    if              reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    print           reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    scan            reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    LPAREN          reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    ID              reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    RESID           reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    end             reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    $end            reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    until           reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    elseif          reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    else            reduce using rule 11 (stat -> varlist EQUALS explist .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 129
   yacc.py:2544:
   yacc.py:2546:    (67) var -> prefixexp . LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> prefixexp . SDOT names
   yacc.py:2546:    (29) functioncall -> prefixexp . args
   yacc.py:2546:    (32) args -> . LPAREN RPAREN
   yacc.py:2546:    (33) args -> . LPAREN explist RPAREN
   yacc.py:2546:    (34) args -> . STRING
   yacc.py:2546:    (35) args -> . tableconstructor
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         shift and go to state 51
   yacc.py:2658:    SDOT            shift and go to state 54
   yacc.py:2658:    LPAREN          shift and go to state 53
   yacc.py:2658:    STRING          shift and go to state 55
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2660:
   yacc.py:2685:    tableconstructor               shift and go to state 50
   yacc.py:2685:    args                           shift and go to state 52
   yacc.py:2542:
   yacc.py:2543:state 130
   yacc.py:2544:
   yacc.py:2546:    (47) comvar -> COMMA var . comvar
   yacc.py:2546:    (128) prefixexp -> var .
   yacc.py:2546:    (47) comvar -> . COMMA var comvar
   yacc.py:2546:    (48) comvar -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    SDOT            reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    LPAREN          reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    STRING          reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    LCURLY          reduce using rule 128 (prefixexp -> var .)
   yacc.py:2658:    COMMA           shift and go to state 61
   yacc.py:2658:    EQUALS          reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    comvar                         shift and go to state 190
   yacc.py:2685:    empty                          shift and go to state 63
   yacc.py:2542:
   yacc.py:2543:state 131
   yacc.py:2544:
   yacc.py:2546:    (19) stat -> do M_sc_beg block . M_sc_end end
   yacc.py:2546:    (21) M_sc_end -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    M_sc_end                       shift and go to state 191
   yacc.py:2685:    empty                          shift and go to state 192
   yacc.py:2542:
   yacc.py:2543:state 132
   yacc.py:2544:
   yacc.py:2546:    (10) block -> sdash .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 10 (block -> sdash .)
   yacc.py:2658:    elseif          reduce using rule 10 (block -> sdash .)
   yacc.py:2658:    else            reduce using rule 10 (block -> sdash .)
   yacc.py:2658:    until           reduce using rule 10 (block -> sdash .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 133
   yacc.py:2544:
   yacc.py:2546:    (18) stat -> repeat M_while1 block . until M_while2 exp
   yacc.py:2547:
   yacc.py:2658:    until           shift and go to state 193
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 134
   yacc.py:2544:
   yacc.py:2546:    (98) retexplist -> retexplist COMMA . retexp
   yacc.py:2546:    (100) retexp -> . nil
   yacc.py:2546:    (101) retexp -> . Number
   yacc.py:2546:    (102) retexp -> . STRING
   yacc.py:2546:    (103) retexp -> . true
   yacc.py:2546:    (104) retexp -> . false
   yacc.py:2546:    (105) retexp -> . TRPLDOTS
   yacc.py:2546:    (106) retexp -> . prefixexp
   yacc.py:2546:    (107) retexp -> . exp PLUS exp
   yacc.py:2546:    (108) retexp -> . exp MINUS exp
   yacc.py:2546:    (109) retexp -> . exp TIMES exp
   yacc.py:2546:    (110) retexp -> . exp DIVIDE exp
   yacc.py:2546:    (111) retexp -> . exp POWER exp
   yacc.py:2546:    (112) retexp -> . exp LT exp
   yacc.py:2546:    (113) retexp -> . exp LE exp
   yacc.py:2546:    (114) retexp -> . exp GT exp
   yacc.py:2546:    (115) retexp -> . exp GE exp
   yacc.py:2546:    (116) retexp -> . exp NE exp
   yacc.py:2546:    (117) retexp -> . exp CHECKEQ exp
   yacc.py:2546:    (118) retexp -> . exp and M_andor exp
   yacc.py:2546:    (119) retexp -> . exp or M_andor exp
   yacc.py:2546:    (120) retexp -> . exp MODULO exp
   yacc.py:2546:    (121) retexp -> . exp DBLDOTS exp
   yacc.py:2546:    (122) retexp -> . tableconstructor
   yacc.py:2546:    (123) retexp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 75
   yacc.py:2658:    STRING          shift and go to state 74
   yacc.py:2658:    true            shift and go to state 76
   yacc.py:2658:    false           shift and go to state 70
   yacc.py:2658:    TRPLDOTS        shift and go to state 71
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 72
   yacc.py:2685:    tableconstructor               shift and go to state 69
   yacc.py:2685:    retexp                         shift and go to state 194
   yacc.py:2685:    Number                         shift and go to state 77
   yacc.py:2685:    unop                           shift and go to state 80
   yacc.py:2685:    exp                            shift and go to state 79
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 135
   yacc.py:2544:
   yacc.py:2546:    (118) retexp -> exp and . M_andor exp
   yacc.py:2546:    (92) exp -> exp and . M_andor exp
   yacc.py:2546:    (93) M_andor -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 127 (empty -> .)
   yacc.py:2658:    STRING          reduce using rule 127 (empty -> .)
   yacc.py:2658:    true            reduce using rule 127 (empty -> .)
   yacc.py:2658:    false           reduce using rule 127 (empty -> .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 127 (empty -> .)
   yacc.py:2658:    function        reduce using rule 127 (empty -> .)
   yacc.py:2658:    INTEGER         reduce using rule 127 (empty -> .)
   yacc.py:2658:    FLOAT           reduce using rule 127 (empty -> .)
   yacc.py:2658:    HEX             reduce using rule 127 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 127 (empty -> .)
   yacc.py:2658:    LCURLY          reduce using rule 127 (empty -> .)
   yacc.py:2658:    not             reduce using rule 127 (empty -> .)
   yacc.py:2658:    MINUS           reduce using rule 127 (empty -> .)
   yacc.py:2658:    HASH            reduce using rule 127 (empty -> .)
   yacc.py:2658:    print           reduce using rule 127 (empty -> .)
   yacc.py:2658:    scan            reduce using rule 127 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 127 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 165
   yacc.py:2685:    M_andor                        shift and go to state 195
   yacc.py:2542:
   yacc.py:2543:state 136
   yacc.py:2544:
   yacc.py:2546:    (113) retexp -> exp LE . exp
   yacc.py:2546:    (86) exp -> exp LE . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 196
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 137
   yacc.py:2544:
   yacc.py:2546:    (120) retexp -> exp MODULO . exp
   yacc.py:2546:    (94) exp -> exp MODULO . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 197
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 138
   yacc.py:2544:
   yacc.py:2546:    (110) retexp -> exp DIVIDE . exp
   yacc.py:2546:    (83) exp -> exp DIVIDE . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 198
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 139
   yacc.py:2544:
   yacc.py:2546:    (111) retexp -> exp POWER . exp
   yacc.py:2546:    (84) exp -> exp POWER . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 199
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 140
   yacc.py:2544:
   yacc.py:2546:    (119) retexp -> exp or . M_andor exp
   yacc.py:2546:    (91) exp -> exp or . M_andor exp
   yacc.py:2546:    (93) M_andor -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 127 (empty -> .)
   yacc.py:2658:    STRING          reduce using rule 127 (empty -> .)
   yacc.py:2658:    true            reduce using rule 127 (empty -> .)
   yacc.py:2658:    false           reduce using rule 127 (empty -> .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 127 (empty -> .)
   yacc.py:2658:    function        reduce using rule 127 (empty -> .)
   yacc.py:2658:    INTEGER         reduce using rule 127 (empty -> .)
   yacc.py:2658:    FLOAT           reduce using rule 127 (empty -> .)
   yacc.py:2658:    HEX             reduce using rule 127 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 127 (empty -> .)
   yacc.py:2658:    LCURLY          reduce using rule 127 (empty -> .)
   yacc.py:2658:    not             reduce using rule 127 (empty -> .)
   yacc.py:2658:    MINUS           reduce using rule 127 (empty -> .)
   yacc.py:2658:    HASH            reduce using rule 127 (empty -> .)
   yacc.py:2658:    print           reduce using rule 127 (empty -> .)
   yacc.py:2658:    scan            reduce using rule 127 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 127 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 165
   yacc.py:2685:    M_andor                        shift and go to state 200
   yacc.py:2542:
   yacc.py:2543:state 141
   yacc.py:2544:
   yacc.py:2546:    (115) retexp -> exp GE . exp
   yacc.py:2546:    (88) exp -> exp GE . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 201
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 142
   yacc.py:2544:
   yacc.py:2546:    (109) retexp -> exp TIMES . exp
   yacc.py:2546:    (82) exp -> exp TIMES . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 202
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 143
   yacc.py:2544:
   yacc.py:2546:    (117) retexp -> exp CHECKEQ . exp
   yacc.py:2546:    (90) exp -> exp CHECKEQ . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 203
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 144
   yacc.py:2544:
   yacc.py:2546:    (112) retexp -> exp LT . exp
   yacc.py:2546:    (85) exp -> exp LT . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 204
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 145
   yacc.py:2544:
   yacc.py:2546:    (114) retexp -> exp GT . exp
   yacc.py:2546:    (87) exp -> exp GT . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 205
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 146
   yacc.py:2544:
   yacc.py:2546:    (107) retexp -> exp PLUS . exp
   yacc.py:2546:    (80) exp -> exp PLUS . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 206
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 147
   yacc.py:2544:
   yacc.py:2546:    (121) retexp -> exp DBLDOTS . exp
   yacc.py:2546:    (95) exp -> exp DBLDOTS . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 207
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 148
   yacc.py:2544:
   yacc.py:2546:    (108) retexp -> exp MINUS . exp
   yacc.py:2546:    (81) exp -> exp MINUS . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 208
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 149
   yacc.py:2544:
   yacc.py:2546:    (116) retexp -> exp NE . exp
   yacc.py:2546:    (89) exp -> exp NE . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 209
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 150
   yacc.py:2544:
   yacc.py:2546:    (123) retexp -> unop exp .
   yacc.py:2546:    (97) exp -> unop exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 123 (retexp -> unop exp .)
   yacc.py:2658:    $end            reduce using rule 123 (retexp -> unop exp .)
   yacc.py:2658:    SEMI            reduce using rule 123 (retexp -> unop exp .)
   yacc.py:2658:    end             reduce using rule 123 (retexp -> unop exp .)
   yacc.py:2658:    until           reduce using rule 123 (retexp -> unop exp .)
   yacc.py:2658:    elseif          reduce using rule 123 (retexp -> unop exp .)
   yacc.py:2658:    else            reduce using rule 123 (retexp -> unop exp .)
   yacc.py:2658:    PLUS            reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    MINUS           reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    TIMES           reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    LT              reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    LE              reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    GT              reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    GE              reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    NE              reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    and             reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    or              reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    MODULO          reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 97 (exp -> unop exp .)
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 97 (exp -> unop exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 107 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 110 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 103 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 112 ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 108 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 109 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 151
   yacc.py:2544:
   yacc.py:2546:    (23) stat -> local function names . funcbody
   yacc.py:2546:    (27) funcbody -> . LPAREN RPAREN block end
   yacc.py:2546:    (28) funcbody -> . LPAREN parlist RPAREN block end
   yacc.py:2547:
   yacc.py:2658:    LPAREN          shift and go to state 87
   yacc.py:2660:
   yacc.py:2685:    funcbody                       shift and go to state 210
   yacc.py:2542:
   yacc.py:2543:state 152
   yacc.py:2544:
   yacc.py:2546:    (25) stat -> local namelist EQUALS . explist
   yacc.py:2546:    (70) explist -> . exp COMMA explist
   yacc.py:2546:    (71) explist -> . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 121
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    explist                        shift and go to state 211
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 153
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> while M_while1 exp . do M_while2 block end
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    do              shift and go to state 212
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    or              shift and go to state 101
   yacc.py:2658:    and             shift and go to state 97
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 154
   yacc.py:2544:
   yacc.py:2546:    (36) parlist -> namelist .
   yacc.py:2546:    (37) parlist -> namelist . comtrp
   yacc.py:2546:    (39) comtrp -> . COMMA TRPLDOTS
   yacc.py:2547:
   yacc.py:2658:    RPAREN          reduce using rule 36 (parlist -> namelist .)
   yacc.py:2658:    COMMA           shift and go to state 213
   yacc.py:2660:
   yacc.py:2685:    comtrp                         shift and go to state 214
   yacc.py:2542:
   yacc.py:2543:state 155
   yacc.py:2544:
   yacc.py:2546:    (38) parlist -> TRPLDOTS .
   yacc.py:2547:
   yacc.py:2658:    RPAREN          reduce using rule 38 (parlist -> TRPLDOTS .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 156
   yacc.py:2544:
   yacc.py:2546:    (28) funcbody -> LPAREN parlist . RPAREN block end
   yacc.py:2547:
   yacc.py:2658:    RPAREN          shift and go to state 215
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 157
   yacc.py:2544:
   yacc.py:2546:    (27) funcbody -> LPAREN RPAREN . block end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (40) laststat -> . return retexplist
   yacc.py:2546:    (41) laststat -> . return
   yacc.py:2546:    (42) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat M_while1 block until M_while2 exp
   yacc.py:2546:    (19) stat -> . do M_sc_beg block M_sc_end end
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (24) stat -> . local namelist
   yacc.py:2546:    (25) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (26) stat -> . functioncall
   yacc.py:2546:    (51) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (65) varlist -> . var comvar
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 17
   yacc.py:2658:    break           shift and go to state 18
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 22
   yacc.py:2658:    repeat          shift and go to state 16
   yacc.py:2658:    do              shift and go to state 14
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 21
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 11
   yacc.py:2685:    var                            shift and go to state 12
   yacc.py:2685:    functioncall                   shift and go to state 13
   yacc.py:2685:    stat                           shift and go to state 15
   yacc.py:2685:    sdash                          shift and go to state 132
   yacc.py:2685:    block                          shift and go to state 216
   yacc.py:2542:
   yacc.py:2543:state 158
   yacc.py:2544:
   yacc.py:2546:    (45) dotid -> SDOT names . dotid
   yacc.py:2546:    (45) dotid -> . SDOT names dotid
   yacc.py:2546:    (46) dotid -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    SDOT            shift and go to state 88
   yacc.py:2658:    COLON           reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    dotid                          shift and go to state 217
   yacc.py:2685:    empty                          shift and go to state 90
   yacc.py:2542:
   yacc.py:2543:state 159
   yacc.py:2544:
   yacc.py:2546:    (43) funcname -> names dotid COLON .
   yacc.py:2547:
   yacc.py:2658:    LPAREN          reduce using rule 43 (funcname -> names dotid COLON .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 160
   yacc.py:2544:
   yacc.py:2546:    (141) field -> names EQUALS . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    exp                            shift and go to state 218
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2542:
   yacc.py:2543:state 161
   yacc.py:2544:
   yacc.py:2546:    (136) fieldlist -> field fieldseplist . fieldsep
   yacc.py:2546:    (137) fieldlist -> field fieldseplist .
   yacc.py:2546:    (138) fieldseplist -> fieldseplist . fieldsep field
   yacc.py:2546:    (143) fieldsep -> . COMMA
   yacc.py:2546:    (144) fieldsep -> . SEMI
   yacc.py:2547:
   yacc.py:2658:    RCURLY          reduce using rule 137 (fieldlist -> field fieldseplist .)
   yacc.py:2658:    COMMA           shift and go to state 220
   yacc.py:2658:    SEMI            shift and go to state 221
   yacc.py:2660:
   yacc.py:2685:    fieldsep                       shift and go to state 219
   yacc.py:2542:
   yacc.py:2543:state 162
   yacc.py:2544:
   yacc.py:2546:    (139) fieldseplist -> empty .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 139 (fieldseplist -> empty .)
   yacc.py:2658:    SEMI            reduce using rule 139 (fieldseplist -> empty .)
   yacc.py:2658:    RCURLY          reduce using rule 139 (fieldseplist -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 163
   yacc.py:2544:
   yacc.py:2546:    (134) tableconstructor -> LCURLY fieldlist RCURLY .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    MINUS           reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    TIMES           reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    DIVIDE          reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    POWER           reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    LT              reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    LE              reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    GT              reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    GE              reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    NE              reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    CHECKEQ         reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    or              reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    and             reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    MODULO          reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    DBLDOTS         reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    RPAREN          reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    then            reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    COMMA           reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    SEMI            reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    RCURLY          reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    RSQUARE         reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    return          reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    break           reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    for             reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    while           reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    repeat          reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    do              reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    function        reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    local           reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    if              reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    print           reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    scan            reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    LPAREN          reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    ID              reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    RESID           reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    $end            reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    end             reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    until           reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    elseif          reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    else            reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    LSQUARE         reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    SDOT            reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    STRING          reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    LCURLY          reduce using rule 134 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 164
   yacc.py:2544:
   yacc.py:2546:    (140) field -> LSQUARE exp . RSQUARE EQUALS exp
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    RSQUARE         shift and go to state 222
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    or              shift and go to state 101
   yacc.py:2658:    and             shift and go to state 97
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 165
   yacc.py:2544:
   yacc.py:2546:    (93) M_andor -> empty .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 93 (M_andor -> empty .)
   yacc.py:2658:    STRING          reduce using rule 93 (M_andor -> empty .)
   yacc.py:2658:    true            reduce using rule 93 (M_andor -> empty .)
   yacc.py:2658:    false           reduce using rule 93 (M_andor -> empty .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 93 (M_andor -> empty .)
   yacc.py:2658:    function        reduce using rule 93 (M_andor -> empty .)
   yacc.py:2658:    INTEGER         reduce using rule 93 (M_andor -> empty .)
   yacc.py:2658:    FLOAT           reduce using rule 93 (M_andor -> empty .)
   yacc.py:2658:    HEX             reduce using rule 93 (M_andor -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 93 (M_andor -> empty .)
   yacc.py:2658:    LCURLY          reduce using rule 93 (M_andor -> empty .)
   yacc.py:2658:    not             reduce using rule 93 (M_andor -> empty .)
   yacc.py:2658:    MINUS           reduce using rule 93 (M_andor -> empty .)
   yacc.py:2658:    HASH            reduce using rule 93 (M_andor -> empty .)
   yacc.py:2658:    print           reduce using rule 93 (M_andor -> empty .)
   yacc.py:2658:    scan            reduce using rule 93 (M_andor -> empty .)
   yacc.py:2658:    ID              reduce using rule 93 (M_andor -> empty .)
   yacc.py:2658:    RESID           reduce using rule 93 (M_andor -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 166
   yacc.py:2544:
   yacc.py:2546:    (92) exp -> exp and M_andor . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 223
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 167
   yacc.py:2544:
   yacc.py:2546:    (86) exp -> exp LE exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    LE              reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    GT              reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    GE              reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    NE              reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    or              reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    and             reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    RPAREN          reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    then            reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    COMMA           reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    SEMI            reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    RCURLY          reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    return          reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    break           reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    for             reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    while           reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    repeat          reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    do              reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    function        reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    local           reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    if              reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    print           reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    scan            reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    LPAREN          reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    ID              reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    RESID           reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    $end            reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    end             reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    until           reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    elseif          reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    else            reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 86 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 86 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 86 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 86 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 86 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 86 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 86 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 168
   yacc.py:2544:
   yacc.py:2546:    (84) exp -> exp POWER exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    MINUS           reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    TIMES           reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    LT              reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    LE              reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    GT              reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    GE              reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    NE              reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    or              reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    and             reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    MODULO          reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    RPAREN          reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    then            reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    COMMA           reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    SEMI            reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    RCURLY          reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    return          reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    break           reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    for             reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    while           reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    repeat          reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    do              reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    function        reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    local           reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    if              reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    print           reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    scan            reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    LPAREN          reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    ID              reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    RESID           reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    $end            reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    end             reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    until           reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    elseif          reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    else            reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 84 (exp -> exp POWER exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 107 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 110 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 103 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 112 ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 108 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 109 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 169
   yacc.py:2544:
   yacc.py:2546:    (91) exp -> exp or M_andor . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 224
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 170
   yacc.py:2544:
   yacc.py:2546:    (88) exp -> exp GE exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    LE              reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    GT              reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    GE              reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    NE              reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    or              reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    and             reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    RPAREN          reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    then            reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    COMMA           reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    SEMI            reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    RCURLY          reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    return          reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    break           reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    for             reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    while           reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    repeat          reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    do              reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    function        reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    local           reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    if              reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    print           reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    scan            reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    LPAREN          reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    ID              reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    RESID           reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    $end            reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    end             reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    until           reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    elseif          reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    else            reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 88 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 88 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 88 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 88 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 88 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 88 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 88 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 171
   yacc.py:2544:
   yacc.py:2546:    (82) exp -> exp TIMES exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    MINUS           reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    TIMES           reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    LT              reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    LE              reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    GT              reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    GE              reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    NE              reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    or              reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    and             reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    MODULO          reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    RPAREN          reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    then            reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    COMMA           reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    SEMI            reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    RCURLY          reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    return          reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    break           reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    for             reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    while           reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    repeat          reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    do              reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    function        reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    local           reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    if              reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    print           reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    scan            reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    LPAREN          reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    ID              reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    RESID           reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    $end            reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    end             reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    until           reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    elseif          reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    else            reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 82 (exp -> exp TIMES exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 107 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 110 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 103 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 112 ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 108 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 109 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 172
   yacc.py:2544:
   yacc.py:2546:    (90) exp -> exp CHECKEQ exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    LE              reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    GT              reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    GE              reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    NE              reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    or              reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    and             reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    RPAREN          reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    then            reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    COMMA           reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    SEMI            reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    RCURLY          reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    return          reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    break           reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    for             reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    while           reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    repeat          reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    do              reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    function        reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    local           reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    if              reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    print           reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    scan            reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    LPAREN          reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    ID              reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    RESID           reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    $end            reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    end             reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    until           reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    elseif          reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    else            reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 90 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 90 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 90 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 90 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 90 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 90 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 90 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 173
   yacc.py:2544:
   yacc.py:2546:    (85) exp -> exp LT exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    LE              reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    GT              reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    GE              reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    NE              reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    or              reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    and             reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    RPAREN          reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    then            reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    COMMA           reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    SEMI            reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    RCURLY          reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    return          reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    break           reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    for             reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    while           reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    repeat          reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    do              reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    function        reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    local           reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    if              reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    print           reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    scan            reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    LPAREN          reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    ID              reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    RESID           reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    $end            reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    end             reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    until           reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    elseif          reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    else            reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 85 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 85 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 85 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 85 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 85 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 85 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 85 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 174
   yacc.py:2544:
   yacc.py:2546:    (87) exp -> exp GT exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    LE              reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    GT              reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    GE              reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    NE              reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    or              reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    and             reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    RPAREN          reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    then            reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    COMMA           reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    SEMI            reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    RCURLY          reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    return          reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    break           reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    for             reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    while           reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    repeat          reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    do              reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    function        reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    local           reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    if              reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    print           reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    scan            reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    LPAREN          reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    ID              reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    RESID           reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    $end            reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    end             reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    until           reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    elseif          reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    else            reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 87 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 87 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 87 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 87 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 87 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 87 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 87 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 175
   yacc.py:2544:
   yacc.py:2546:    (80) exp -> exp PLUS exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    MINUS           reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    LT              reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    LE              reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    GT              reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    GE              reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    NE              reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    or              reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    and             reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    RPAREN          reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    then            reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    COMMA           reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    SEMI            reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    RCURLY          reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    return          reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    break           reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    for             reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    while           reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    repeat          reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    do              reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    function        reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    local           reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    if              reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    print           reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    scan            reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    LPAREN          reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    ID              reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    RESID           reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    $end            reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    end             reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    until           reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    elseif          reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    else            reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2660:
   yacc.py:2667:  ! TIMES           [ reduce using rule 80 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 80 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 80 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 80 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 107 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 110 ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 109 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 176
   yacc.py:2544:
   yacc.py:2546:    (94) exp -> exp MODULO exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    MINUS           reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    TIMES           reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    LT              reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    LE              reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    GT              reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    GE              reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    NE              reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    or              reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    and             reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    MODULO          reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    RPAREN          reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    then            reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    COMMA           reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    SEMI            reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    RCURLY          reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    return          reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    break           reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    for             reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    while           reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    repeat          reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    do              reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    function        reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    local           reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    if              reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    print           reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    scan            reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    LPAREN          reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    ID              reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    RESID           reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    $end            reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    end             reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    until           reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    elseif          reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    else            reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 94 (exp -> exp MODULO exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 107 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 110 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 103 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 112 ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 108 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 109 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 177
   yacc.py:2544:
   yacc.py:2546:    (95) exp -> exp DBLDOTS exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    LE              reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    GT              reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    GE              reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    NE              reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    or              reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    and             reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    RPAREN          reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    then            reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    COMMA           reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    SEMI            reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    RCURLY          reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    return          reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    break           reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    for             reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    while           reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    repeat          reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    do              reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    function        reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    local           reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    if              reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    print           reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    scan            reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    LPAREN          reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    ID              reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    RESID           reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    $end            reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    end             reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    until           reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    elseif          reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    else            reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 95 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 95 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 95 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 95 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 95 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 95 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 95 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 178
   yacc.py:2544:
   yacc.py:2546:    (81) exp -> exp MINUS exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    MINUS           reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    LT              reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    LE              reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    GT              reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    GE              reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    NE              reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    or              reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    and             reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    RPAREN          reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    then            reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    COMMA           reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    SEMI            reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    RCURLY          reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    return          reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    break           reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    for             reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    while           reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    repeat          reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    do              reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    function        reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    local           reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    if              reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    print           reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    scan            reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    LPAREN          reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    ID              reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    RESID           reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    $end            reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    end             reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    until           reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    elseif          reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    else            reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2660:
   yacc.py:2667:  ! TIMES           [ reduce using rule 81 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 81 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 81 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 81 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 107 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 110 ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 109 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 179
   yacc.py:2544:
   yacc.py:2546:    (89) exp -> exp NE exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    LE              reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    GT              reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    GE              reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    NE              reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    or              reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    and             reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    RPAREN          reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    then            reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    COMMA           reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    SEMI            reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    RCURLY          reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    return          reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    break           reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    for             reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    while           reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    repeat          reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    do              reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    function        reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    local           reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    if              reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    print           reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    scan            reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    LPAREN          reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    ID              reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    RESID           reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    $end            reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    end             reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    until           reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    elseif          reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    else            reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 89 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 89 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 89 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 89 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 89 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 89 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 89 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 180
   yacc.py:2544:
   yacc.py:2546:    (83) exp -> exp DIVIDE exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    MINUS           reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    TIMES           reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    LT              reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    LE              reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    GT              reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    GE              reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    NE              reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    or              reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    and             reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    MODULO          reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    RPAREN          reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    then            reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    COMMA           reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    SEMI            reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    RCURLY          reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    return          reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    break           reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    for             reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    while           reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    repeat          reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    do              reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    function        reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    local           reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    if              reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    print           reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    scan            reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    LPAREN          reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    ID              reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    RESID           reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    $end            reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    end             reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    until           reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    elseif          reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    else            reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 83 (exp -> exp DIVIDE exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 107 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 110 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 103 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 112 ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 108 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 109 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 181
   yacc.py:2544:
   yacc.py:2546:    (5) chunk -> chunk M_chunk stat SEMI .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    break           reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    for             reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    while           reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    repeat          reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    do              reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    function        reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    local           reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    if              reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    print           reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    scan            reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    LPAREN          reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    ID              reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    RESID           reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    end             reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    elseif          reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    else            reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    until           reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2658:    $end            reduce using rule 5 (chunk -> chunk M_chunk stat SEMI .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 182
   yacc.py:2544:
   yacc.py:2546:    (4) sdash -> chunk laststat M_chunk SEMI .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 4 (sdash -> chunk laststat M_chunk SEMI .)
   yacc.py:2658:    elseif          reduce using rule 4 (sdash -> chunk laststat M_chunk SEMI .)
   yacc.py:2658:    else            reduce using rule 4 (sdash -> chunk laststat M_chunk SEMI .)
   yacc.py:2658:    $end            reduce using rule 4 (sdash -> chunk laststat M_chunk SEMI .)
   yacc.py:2658:    until           reduce using rule 4 (sdash -> chunk laststat M_chunk SEMI .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 183
   yacc.py:2544:
   yacc.py:2546:    (51) stat -> if exp M_bool then . M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (53) M_if1 -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 127 (empty -> .)
   yacc.py:2658:    break           reduce using rule 127 (empty -> .)
   yacc.py:2658:    for             reduce using rule 127 (empty -> .)
   yacc.py:2658:    while           reduce using rule 127 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 127 (empty -> .)
   yacc.py:2658:    do              reduce using rule 127 (empty -> .)
   yacc.py:2658:    function        reduce using rule 127 (empty -> .)
   yacc.py:2658:    local           reduce using rule 127 (empty -> .)
   yacc.py:2658:    if              reduce using rule 127 (empty -> .)
   yacc.py:2658:    print           reduce using rule 127 (empty -> .)
   yacc.py:2658:    scan            reduce using rule 127 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 127 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 127 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 225
   yacc.py:2685:    M_if1                          shift and go to state 226
   yacc.py:2542:
   yacc.py:2543:state 184
   yacc.py:2544:
   yacc.py:2546:    (67) var -> prefixexp LSQUARE exp RSQUARE .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    SDOT            reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    LPAREN          reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    STRING          reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    LCURLY          reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    PLUS            reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    MINUS           reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    TIMES           reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    DIVIDE          reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    POWER           reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    LT              reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    LE              reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    GT              reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    GE              reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    NE              reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    CHECKEQ         reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    or              reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    and             reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    MODULO          reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    DBLDOTS         reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    COMMA           reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    SEMI            reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    RCURLY          reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    EQUALS          reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    $end            reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    end             reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    until           reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    elseif          reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    else            reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    RSQUARE         reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    then            reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    RPAREN          reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    return          reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    break           reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    for             reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    while           reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    repeat          reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    do              reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    function        reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    local           reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    if              reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    print           reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    scan            reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    ID              reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    RESID           reduce using rule 67 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 185
   yacc.py:2544:
   yacc.py:2546:    (33) args -> LPAREN explist RPAREN .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    SDOT            reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    LPAREN          reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    STRING          reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    LCURLY          reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    SEMI            reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    return          reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    break           reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    for             reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    while           reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    repeat          reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    do              reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    function        reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    local           reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    if              reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    print           reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    scan            reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    ID              reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    RESID           reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    $end            reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    end             reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    until           reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    elseif          reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    else            reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    RPAREN          reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    PLUS            reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    MINUS           reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    TIMES           reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    DIVIDE          reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    POWER           reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    LT              reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    LE              reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    GT              reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    GE              reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    NE              reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    CHECKEQ         reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    or              reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    and             reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    MODULO          reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    DBLDOTS         reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    then            reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    COMMA           reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    RCURLY          reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    RSQUARE         reduce using rule 33 (args -> LPAREN explist RPAREN .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 186
   yacc.py:2544:
   yacc.py:2546:    (70) explist -> exp COMMA . explist
   yacc.py:2546:    (70) explist -> . exp COMMA explist
   yacc.py:2546:    (71) explist -> . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 121
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    explist                        shift and go to state 227
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 187
   yacc.py:2544:
   yacc.py:2546:    (14) stat -> for namelist in explist . do block end
   yacc.py:2547:
   yacc.py:2658:    do              shift and go to state 228
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 188
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for names EQUALS exp . COMMA exp do block end
   yacc.py:2546:    (13) stat -> for names EQUALS exp . COMMA exp COMMA exp do block end
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           shift and go to state 229
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    or              shift and go to state 101
   yacc.py:2658:    and             shift and go to state 97
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 189
   yacc.py:2544:
   yacc.py:2546:    (49) comid -> COMMA names . comid
   yacc.py:2546:    (49) comid -> . COMMA names comid
   yacc.py:2546:    (50) comid -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    COMMA           shift and go to state 126
   yacc.py:2658:    in              reduce using rule 127 (empty -> .)
   yacc.py:2658:    EQUALS          reduce using rule 127 (empty -> .)
   yacc.py:2658:    SEMI            reduce using rule 127 (empty -> .)
   yacc.py:2658:    return          reduce using rule 127 (empty -> .)
   yacc.py:2658:    break           reduce using rule 127 (empty -> .)
   yacc.py:2658:    for             reduce using rule 127 (empty -> .)
   yacc.py:2658:    while           reduce using rule 127 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 127 (empty -> .)
   yacc.py:2658:    do              reduce using rule 127 (empty -> .)
   yacc.py:2658:    function        reduce using rule 127 (empty -> .)
   yacc.py:2658:    local           reduce using rule 127 (empty -> .)
   yacc.py:2658:    if              reduce using rule 127 (empty -> .)
   yacc.py:2658:    print           reduce using rule 127 (empty -> .)
   yacc.py:2658:    scan            reduce using rule 127 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 127 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 127 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 127 (empty -> .)
   yacc.py:2658:    $end            reduce using rule 127 (empty -> .)
   yacc.py:2658:    end             reduce using rule 127 (empty -> .)
   yacc.py:2658:    until           reduce using rule 127 (empty -> .)
   yacc.py:2658:    elseif          reduce using rule 127 (empty -> .)
   yacc.py:2658:    else            reduce using rule 127 (empty -> .)
   yacc.py:2658:    RPAREN          reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2667:  ! COMMA           [ reduce using rule 127 (empty -> .) ]
   yacc.py:2671:
   yacc.py:2685:    empty                          shift and go to state 125
   yacc.py:2685:    comid                          shift and go to state 230
   yacc.py:2542:
   yacc.py:2543:state 190
   yacc.py:2544:
   yacc.py:2546:    (47) comvar -> COMMA var comvar .
   yacc.py:2547:
   yacc.py:2658:    EQUALS          reduce using rule 47 (comvar -> COMMA var comvar .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 191
   yacc.py:2544:
   yacc.py:2546:    (19) stat -> do M_sc_beg block M_sc_end . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 231
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 192
   yacc.py:2544:
   yacc.py:2546:    (21) M_sc_end -> empty .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 21 (M_sc_end -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 193
   yacc.py:2544:
   yacc.py:2546:    (18) stat -> repeat M_while1 block until . M_while2 exp
   yacc.py:2546:    (17) M_while2 -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 127 (empty -> .)
   yacc.py:2658:    STRING          reduce using rule 127 (empty -> .)
   yacc.py:2658:    true            reduce using rule 127 (empty -> .)
   yacc.py:2658:    false           reduce using rule 127 (empty -> .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 127 (empty -> .)
   yacc.py:2658:    function        reduce using rule 127 (empty -> .)
   yacc.py:2658:    INTEGER         reduce using rule 127 (empty -> .)
   yacc.py:2658:    FLOAT           reduce using rule 127 (empty -> .)
   yacc.py:2658:    HEX             reduce using rule 127 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 127 (empty -> .)
   yacc.py:2658:    LCURLY          reduce using rule 127 (empty -> .)
   yacc.py:2658:    not             reduce using rule 127 (empty -> .)
   yacc.py:2658:    MINUS           reduce using rule 127 (empty -> .)
   yacc.py:2658:    HASH            reduce using rule 127 (empty -> .)
   yacc.py:2658:    print           reduce using rule 127 (empty -> .)
   yacc.py:2658:    scan            reduce using rule 127 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 127 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 232
   yacc.py:2685:    M_while2                       shift and go to state 233
   yacc.py:2542:
   yacc.py:2543:state 194
   yacc.py:2544:
   yacc.py:2546:    (98) retexplist -> retexplist COMMA retexp .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 98 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    $end            reduce using rule 98 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    SEMI            reduce using rule 98 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    end             reduce using rule 98 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    until           reduce using rule 98 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    elseif          reduce using rule 98 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    else            reduce using rule 98 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 195
   yacc.py:2544:
   yacc.py:2546:    (118) retexp -> exp and M_andor . exp
   yacc.py:2546:    (92) exp -> exp and M_andor . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 234
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 196
   yacc.py:2544:
   yacc.py:2546:    (113) retexp -> exp LE exp .
   yacc.py:2546:    (86) exp -> exp LE exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 113 (retexp -> exp LE exp .)
   yacc.py:2658:    $end            reduce using rule 113 (retexp -> exp LE exp .)
   yacc.py:2658:    SEMI            reduce using rule 113 (retexp -> exp LE exp .)
   yacc.py:2658:    end             reduce using rule 113 (retexp -> exp LE exp .)
   yacc.py:2658:    until           reduce using rule 113 (retexp -> exp LE exp .)
   yacc.py:2658:    elseif          reduce using rule 113 (retexp -> exp LE exp .)
   yacc.py:2658:    else            reduce using rule 113 (retexp -> exp LE exp .)
   yacc.py:2658:    LT              reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    LE              reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    GT              reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    GE              reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    NE              reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    and             reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    or              reduce using rule 86 (exp -> exp LE exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 86 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 86 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 86 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 86 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 86 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 86 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 86 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 197
   yacc.py:2544:
   yacc.py:2546:    (120) retexp -> exp MODULO exp .
   yacc.py:2546:    (94) exp -> exp MODULO exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 120 (retexp -> exp MODULO exp .)
   yacc.py:2658:    $end            reduce using rule 120 (retexp -> exp MODULO exp .)
   yacc.py:2658:    SEMI            reduce using rule 120 (retexp -> exp MODULO exp .)
   yacc.py:2658:    end             reduce using rule 120 (retexp -> exp MODULO exp .)
   yacc.py:2658:    until           reduce using rule 120 (retexp -> exp MODULO exp .)
   yacc.py:2658:    elseif          reduce using rule 120 (retexp -> exp MODULO exp .)
   yacc.py:2658:    else            reduce using rule 120 (retexp -> exp MODULO exp .)
   yacc.py:2658:    PLUS            reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    MINUS           reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    TIMES           reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    LT              reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    LE              reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    GT              reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    GE              reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    NE              reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    and             reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    or              reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    MODULO          reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 94 (exp -> exp MODULO exp .)
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 94 (exp -> exp MODULO exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 107 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 110 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 103 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 112 ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 108 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 109 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 198
   yacc.py:2544:
   yacc.py:2546:    (110) retexp -> exp DIVIDE exp .
   yacc.py:2546:    (83) exp -> exp DIVIDE exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 110 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    $end            reduce using rule 110 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    SEMI            reduce using rule 110 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    end             reduce using rule 110 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    until           reduce using rule 110 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    elseif          reduce using rule 110 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    else            reduce using rule 110 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    PLUS            reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    MINUS           reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    TIMES           reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    LT              reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    LE              reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    GT              reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    GE              reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    NE              reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    and             reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    or              reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    MODULO          reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 83 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 83 (exp -> exp DIVIDE exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 107 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 110 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 103 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 112 ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 108 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 109 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 199
   yacc.py:2544:
   yacc.py:2546:    (111) retexp -> exp POWER exp .
   yacc.py:2546:    (84) exp -> exp POWER exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 111 (retexp -> exp POWER exp .)
   yacc.py:2658:    $end            reduce using rule 111 (retexp -> exp POWER exp .)
   yacc.py:2658:    SEMI            reduce using rule 111 (retexp -> exp POWER exp .)
   yacc.py:2658:    end             reduce using rule 111 (retexp -> exp POWER exp .)
   yacc.py:2658:    until           reduce using rule 111 (retexp -> exp POWER exp .)
   yacc.py:2658:    elseif          reduce using rule 111 (retexp -> exp POWER exp .)
   yacc.py:2658:    else            reduce using rule 111 (retexp -> exp POWER exp .)
   yacc.py:2658:    PLUS            reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    MINUS           reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    TIMES           reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    LT              reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    LE              reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    GT              reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    GE              reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    NE              reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    and             reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    or              reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    MODULO          reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 84 (exp -> exp POWER exp .)
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 84 (exp -> exp POWER exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 107 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 110 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 103 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 112 ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 108 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 109 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 200
   yacc.py:2544:
   yacc.py:2546:    (119) retexp -> exp or M_andor . exp
   yacc.py:2546:    (91) exp -> exp or M_andor . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 235
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 201
   yacc.py:2544:
   yacc.py:2546:    (115) retexp -> exp GE exp .
   yacc.py:2546:    (88) exp -> exp GE exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 115 (retexp -> exp GE exp .)
   yacc.py:2658:    $end            reduce using rule 115 (retexp -> exp GE exp .)
   yacc.py:2658:    SEMI            reduce using rule 115 (retexp -> exp GE exp .)
   yacc.py:2658:    end             reduce using rule 115 (retexp -> exp GE exp .)
   yacc.py:2658:    until           reduce using rule 115 (retexp -> exp GE exp .)
   yacc.py:2658:    elseif          reduce using rule 115 (retexp -> exp GE exp .)
   yacc.py:2658:    else            reduce using rule 115 (retexp -> exp GE exp .)
   yacc.py:2658:    LT              reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    LE              reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    GT              reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    GE              reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    NE              reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    and             reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    or              reduce using rule 88 (exp -> exp GE exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 88 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 88 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 88 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 88 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 88 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 88 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 88 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 202
   yacc.py:2544:
   yacc.py:2546:    (109) retexp -> exp TIMES exp .
   yacc.py:2546:    (82) exp -> exp TIMES exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 109 (retexp -> exp TIMES exp .)
   yacc.py:2658:    $end            reduce using rule 109 (retexp -> exp TIMES exp .)
   yacc.py:2658:    SEMI            reduce using rule 109 (retexp -> exp TIMES exp .)
   yacc.py:2658:    end             reduce using rule 109 (retexp -> exp TIMES exp .)
   yacc.py:2658:    until           reduce using rule 109 (retexp -> exp TIMES exp .)
   yacc.py:2658:    elseif          reduce using rule 109 (retexp -> exp TIMES exp .)
   yacc.py:2658:    else            reduce using rule 109 (retexp -> exp TIMES exp .)
   yacc.py:2658:    PLUS            reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    MINUS           reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    TIMES           reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    LT              reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    LE              reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    GT              reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    GE              reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    NE              reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    and             reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    or              reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    MODULO          reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 82 (exp -> exp TIMES exp .)
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 82 (exp -> exp TIMES exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 107 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 110 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 103 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 112 ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 108 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 109 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 203
   yacc.py:2544:
   yacc.py:2546:    (117) retexp -> exp CHECKEQ exp .
   yacc.py:2546:    (90) exp -> exp CHECKEQ exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 117 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    $end            reduce using rule 117 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    SEMI            reduce using rule 117 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    end             reduce using rule 117 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    until           reduce using rule 117 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    elseif          reduce using rule 117 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    else            reduce using rule 117 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    LT              reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    LE              reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    GT              reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    GE              reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    NE              reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    and             reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    or              reduce using rule 90 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 90 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 90 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 90 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 90 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 90 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 90 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 90 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 204
   yacc.py:2544:
   yacc.py:2546:    (112) retexp -> exp LT exp .
   yacc.py:2546:    (85) exp -> exp LT exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 112 (retexp -> exp LT exp .)
   yacc.py:2658:    $end            reduce using rule 112 (retexp -> exp LT exp .)
   yacc.py:2658:    SEMI            reduce using rule 112 (retexp -> exp LT exp .)
   yacc.py:2658:    end             reduce using rule 112 (retexp -> exp LT exp .)
   yacc.py:2658:    until           reduce using rule 112 (retexp -> exp LT exp .)
   yacc.py:2658:    elseif          reduce using rule 112 (retexp -> exp LT exp .)
   yacc.py:2658:    else            reduce using rule 112 (retexp -> exp LT exp .)
   yacc.py:2658:    LT              reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    LE              reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    GT              reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    GE              reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    NE              reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    and             reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    or              reduce using rule 85 (exp -> exp LT exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 85 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 85 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 85 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 85 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 85 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 85 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 85 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 205
   yacc.py:2544:
   yacc.py:2546:    (114) retexp -> exp GT exp .
   yacc.py:2546:    (87) exp -> exp GT exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 114 (retexp -> exp GT exp .)
   yacc.py:2658:    $end            reduce using rule 114 (retexp -> exp GT exp .)
   yacc.py:2658:    SEMI            reduce using rule 114 (retexp -> exp GT exp .)
   yacc.py:2658:    end             reduce using rule 114 (retexp -> exp GT exp .)
   yacc.py:2658:    until           reduce using rule 114 (retexp -> exp GT exp .)
   yacc.py:2658:    elseif          reduce using rule 114 (retexp -> exp GT exp .)
   yacc.py:2658:    else            reduce using rule 114 (retexp -> exp GT exp .)
   yacc.py:2658:    LT              reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    LE              reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    GT              reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    GE              reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    NE              reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    and             reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    or              reduce using rule 87 (exp -> exp GT exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 87 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 87 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 87 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 87 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 87 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 87 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 87 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 206
   yacc.py:2544:
   yacc.py:2546:    (107) retexp -> exp PLUS exp .
   yacc.py:2546:    (80) exp -> exp PLUS exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 107 (retexp -> exp PLUS exp .)
   yacc.py:2658:    $end            reduce using rule 107 (retexp -> exp PLUS exp .)
   yacc.py:2658:    SEMI            reduce using rule 107 (retexp -> exp PLUS exp .)
   yacc.py:2658:    end             reduce using rule 107 (retexp -> exp PLUS exp .)
   yacc.py:2658:    until           reduce using rule 107 (retexp -> exp PLUS exp .)
   yacc.py:2658:    elseif          reduce using rule 107 (retexp -> exp PLUS exp .)
   yacc.py:2658:    else            reduce using rule 107 (retexp -> exp PLUS exp .)
   yacc.py:2658:    PLUS            reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    MINUS           reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    LT              reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    LE              reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    GT              reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    GE              reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    NE              reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    and             reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    or              reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 80 (exp -> exp PLUS exp .)
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2660:
   yacc.py:2667:  ! TIMES           [ reduce using rule 80 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 80 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 80 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 80 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 107 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 110 ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 109 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 207
   yacc.py:2544:
   yacc.py:2546:    (121) retexp -> exp DBLDOTS exp .
   yacc.py:2546:    (95) exp -> exp DBLDOTS exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 121 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    $end            reduce using rule 121 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    SEMI            reduce using rule 121 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    end             reduce using rule 121 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    until           reduce using rule 121 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    elseif          reduce using rule 121 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    else            reduce using rule 121 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    LT              reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    LE              reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    GT              reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    GE              reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    NE              reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    and             reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    or              reduce using rule 95 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 95 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 95 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 95 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 95 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 95 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 95 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 95 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 208
   yacc.py:2544:
   yacc.py:2546:    (108) retexp -> exp MINUS exp .
   yacc.py:2546:    (81) exp -> exp MINUS exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 108 (retexp -> exp MINUS exp .)
   yacc.py:2658:    $end            reduce using rule 108 (retexp -> exp MINUS exp .)
   yacc.py:2658:    SEMI            reduce using rule 108 (retexp -> exp MINUS exp .)
   yacc.py:2658:    end             reduce using rule 108 (retexp -> exp MINUS exp .)
   yacc.py:2658:    until           reduce using rule 108 (retexp -> exp MINUS exp .)
   yacc.py:2658:    elseif          reduce using rule 108 (retexp -> exp MINUS exp .)
   yacc.py:2658:    else            reduce using rule 108 (retexp -> exp MINUS exp .)
   yacc.py:2658:    PLUS            reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    MINUS           reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    LT              reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    LE              reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    GT              reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    GE              reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    NE              reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    and             reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    or              reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 81 (exp -> exp MINUS exp .)
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2660:
   yacc.py:2667:  ! TIMES           [ reduce using rule 81 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 81 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 81 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 81 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 107 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 110 ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 109 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 209
   yacc.py:2544:
   yacc.py:2546:    (116) retexp -> exp NE exp .
   yacc.py:2546:    (89) exp -> exp NE exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 116 (retexp -> exp NE exp .)
   yacc.py:2658:    $end            reduce using rule 116 (retexp -> exp NE exp .)
   yacc.py:2658:    SEMI            reduce using rule 116 (retexp -> exp NE exp .)
   yacc.py:2658:    end             reduce using rule 116 (retexp -> exp NE exp .)
   yacc.py:2658:    until           reduce using rule 116 (retexp -> exp NE exp .)
   yacc.py:2658:    elseif          reduce using rule 116 (retexp -> exp NE exp .)
   yacc.py:2658:    else            reduce using rule 116 (retexp -> exp NE exp .)
   yacc.py:2658:    LT              reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    LE              reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    GT              reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    GE              reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    NE              reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    and             reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    or              reduce using rule 89 (exp -> exp NE exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 89 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 89 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 89 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 89 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 89 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 89 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 89 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 105 ]
   yacc.py:2667:  ! LE              [ shift and go to state 98 ]
   yacc.py:2667:  ! GT              [ shift and go to state 106 ]
   yacc.py:2667:  ! GE              [ shift and go to state 102 ]
   yacc.py:2667:  ! NE              [ shift and go to state 111 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 104 ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 210
   yacc.py:2544:
   yacc.py:2546:    (23) stat -> local function names funcbody .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    return          reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    break           reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    for             reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    while           reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    repeat          reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    do              reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    function        reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    local           reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    if              reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    print           reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    scan            reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    LPAREN          reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    ID              reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    RESID           reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    end             reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    $end            reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    until           reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    elseif          reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    else            reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 211
   yacc.py:2544:
   yacc.py:2546:    (25) stat -> local namelist EQUALS explist .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    return          reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    break           reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    for             reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    while           reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    repeat          reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    do              reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    function        reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    local           reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    if              reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    print           reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    scan            reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    LPAREN          reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    ID              reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    RESID           reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    end             reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    $end            reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    until           reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    elseif          reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    else            reduce using rule 25 (stat -> local namelist EQUALS explist .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 212
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> while M_while1 exp do . M_while2 block end
   yacc.py:2546:    (17) M_while2 -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 127 (empty -> .)
   yacc.py:2658:    break           reduce using rule 127 (empty -> .)
   yacc.py:2658:    for             reduce using rule 127 (empty -> .)
   yacc.py:2658:    while           reduce using rule 127 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 127 (empty -> .)
   yacc.py:2658:    do              reduce using rule 127 (empty -> .)
   yacc.py:2658:    function        reduce using rule 127 (empty -> .)
   yacc.py:2658:    local           reduce using rule 127 (empty -> .)
   yacc.py:2658:    if              reduce using rule 127 (empty -> .)
   yacc.py:2658:    print           reduce using rule 127 (empty -> .)
   yacc.py:2658:    scan            reduce using rule 127 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 127 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 127 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 232
   yacc.py:2685:    M_while2                       shift and go to state 236
   yacc.py:2542:
   yacc.py:2543:state 213
   yacc.py:2544:
   yacc.py:2546:    (39) comtrp -> COMMA . TRPLDOTS
   yacc.py:2547:
   yacc.py:2658:    TRPLDOTS        shift and go to state 237
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 214
   yacc.py:2544:
   yacc.py:2546:    (37) parlist -> namelist comtrp .
   yacc.py:2547:
   yacc.py:2658:    RPAREN          reduce using rule 37 (parlist -> namelist comtrp .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 215
   yacc.py:2544:
   yacc.py:2546:    (28) funcbody -> LPAREN parlist RPAREN . block end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (40) laststat -> . return retexplist
   yacc.py:2546:    (41) laststat -> . return
   yacc.py:2546:    (42) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat M_while1 block until M_while2 exp
   yacc.py:2546:    (19) stat -> . do M_sc_beg block M_sc_end end
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (24) stat -> . local namelist
   yacc.py:2546:    (25) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (26) stat -> . functioncall
   yacc.py:2546:    (51) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (65) varlist -> . var comvar
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 17
   yacc.py:2658:    break           shift and go to state 18
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 22
   yacc.py:2658:    repeat          shift and go to state 16
   yacc.py:2658:    do              shift and go to state 14
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 21
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 11
   yacc.py:2685:    var                            shift and go to state 12
   yacc.py:2685:    stat                           shift and go to state 15
   yacc.py:2685:    functioncall                   shift and go to state 13
   yacc.py:2685:    block                          shift and go to state 238
   yacc.py:2685:    sdash                          shift and go to state 132
   yacc.py:2542:
   yacc.py:2543:state 216
   yacc.py:2544:
   yacc.py:2546:    (27) funcbody -> LPAREN RPAREN block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 239
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 217
   yacc.py:2544:
   yacc.py:2546:    (45) dotid -> SDOT names dotid .
   yacc.py:2547:
   yacc.py:2658:    COLON           reduce using rule 45 (dotid -> SDOT names dotid .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 218
   yacc.py:2544:
   yacc.py:2546:    (141) field -> names EQUALS exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 141 (field -> names EQUALS exp .)
   yacc.py:2658:    SEMI            reduce using rule 141 (field -> names EQUALS exp .)
   yacc.py:2658:    RCURLY          reduce using rule 141 (field -> names EQUALS exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    or              shift and go to state 101
   yacc.py:2658:    and             shift and go to state 97
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 219
   yacc.py:2544:
   yacc.py:2546:    (136) fieldlist -> field fieldseplist fieldsep .
   yacc.py:2546:    (138) fieldseplist -> fieldseplist fieldsep . field
   yacc.py:2546:    (140) field -> . LSQUARE exp RSQUARE EQUALS exp
   yacc.py:2546:    (141) field -> . names EQUALS exp
   yacc.py:2546:    (142) field -> . exp
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2547:
   yacc.py:2658:    RCURLY          reduce using rule 136 (fieldlist -> field fieldseplist fieldsep .)
   yacc.py:2658:    LSQUARE         shift and go to state 96
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    field                          shift and go to state 240
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    names                          shift and go to state 91
   yacc.py:2685:    exp                            shift and go to state 95
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2542:
   yacc.py:2543:state 220
   yacc.py:2544:
   yacc.py:2546:    (143) fieldsep -> COMMA .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    ID              reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    RESID           reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    nil             reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    STRING          reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    true            reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    false           reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    function        reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    INTEGER         reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    FLOAT           reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    HEX             reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    LPAREN          reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    LCURLY          reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    not             reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    MINUS           reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    HASH            reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    print           reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    scan            reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2658:    RCURLY          reduce using rule 143 (fieldsep -> COMMA .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 221
   yacc.py:2544:
   yacc.py:2546:    (144) fieldsep -> SEMI .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    ID              reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    RESID           reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    nil             reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    STRING          reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    true            reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    false           reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    function        reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    INTEGER         reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    FLOAT           reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    HEX             reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    LPAREN          reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    LCURLY          reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    not             reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    MINUS           reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    HASH            reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    print           reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    scan            reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2658:    RCURLY          reduce using rule 144 (fieldsep -> SEMI .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 222
   yacc.py:2544:
   yacc.py:2546:    (140) field -> LSQUARE exp RSQUARE . EQUALS exp
   yacc.py:2547:
   yacc.py:2658:    EQUALS          shift and go to state 241
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 223
   yacc.py:2544:
   yacc.py:2546:    (92) exp -> exp and M_andor exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    or              reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    and             reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    RPAREN          reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    then            reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    COMMA           reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    SEMI            reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    RCURLY          reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    return          reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    break           reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    for             reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    while           reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    repeat          reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    do              reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    function        reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    local           reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    if              reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    print           reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    scan            reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    LPAREN          reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    ID              reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    RESID           reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    $end            reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    end             reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    until           reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    elseif          reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    else            reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! LT              [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! LE              [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! GT              [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! GE              [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! NE              [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! CHECKEQ         [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 224
   yacc.py:2544:
   yacc.py:2546:    (91) exp -> exp or M_andor exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    or              reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    and             reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    RPAREN          reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    then            reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    COMMA           reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    SEMI            reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    RCURLY          reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    return          reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    break           reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    for             reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    while           reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    repeat          reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    do              reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    function        reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    local           reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    if              reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    print           reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    scan            reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    LPAREN          reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    ID              reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    RESID           reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    $end            reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    end             reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    until           reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    elseif          reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    else            reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! LT              [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! LE              [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! GT              [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! GE              [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! NE              [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! CHECKEQ         [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 225
   yacc.py:2544:
   yacc.py:2546:    (53) M_if1 -> empty .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 53 (M_if1 -> empty .)
   yacc.py:2658:    break           reduce using rule 53 (M_if1 -> empty .)
   yacc.py:2658:    for             reduce using rule 53 (M_if1 -> empty .)
   yacc.py:2658:    while           reduce using rule 53 (M_if1 -> empty .)
   yacc.py:2658:    repeat          reduce using rule 53 (M_if1 -> empty .)
   yacc.py:2658:    do              reduce using rule 53 (M_if1 -> empty .)
   yacc.py:2658:    function        reduce using rule 53 (M_if1 -> empty .)
   yacc.py:2658:    local           reduce using rule 53 (M_if1 -> empty .)
   yacc.py:2658:    if              reduce using rule 53 (M_if1 -> empty .)
   yacc.py:2658:    print           reduce using rule 53 (M_if1 -> empty .)
   yacc.py:2658:    scan            reduce using rule 53 (M_if1 -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 53 (M_if1 -> empty .)
   yacc.py:2658:    ID              reduce using rule 53 (M_if1 -> empty .)
   yacc.py:2658:    RESID           reduce using rule 53 (M_if1 -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 226
   yacc.py:2544:
   yacc.py:2546:    (51) stat -> if exp M_bool then M_if1 . block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (40) laststat -> . return retexplist
   yacc.py:2546:    (41) laststat -> . return
   yacc.py:2546:    (42) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat M_while1 block until M_while2 exp
   yacc.py:2546:    (19) stat -> . do M_sc_beg block M_sc_end end
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (24) stat -> . local namelist
   yacc.py:2546:    (25) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (26) stat -> . functioncall
   yacc.py:2546:    (51) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (65) varlist -> . var comvar
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 17
   yacc.py:2658:    break           shift and go to state 18
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 22
   yacc.py:2658:    repeat          shift and go to state 16
   yacc.py:2658:    do              shift and go to state 14
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 21
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 11
   yacc.py:2685:    var                            shift and go to state 12
   yacc.py:2685:    functioncall                   shift and go to state 13
   yacc.py:2685:    stat                           shift and go to state 15
   yacc.py:2685:    block                          shift and go to state 242
   yacc.py:2685:    sdash                          shift and go to state 132
   yacc.py:2542:
   yacc.py:2543:state 227
   yacc.py:2544:
   yacc.py:2546:    (70) explist -> exp COMMA explist .
   yacc.py:2547:
   yacc.py:2658:    RPAREN          reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    SEMI            reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    return          reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    break           reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    for             reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    while           reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    repeat          reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    do              reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    function        reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    local           reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    if              reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    print           reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    scan            reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    LPAREN          reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    ID              reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    RESID           reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    $end            reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    end             reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    until           reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    elseif          reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2658:    else            reduce using rule 70 (explist -> exp COMMA explist .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 228
   yacc.py:2544:
   yacc.py:2546:    (14) stat -> for namelist in explist do . block end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (40) laststat -> . return retexplist
   yacc.py:2546:    (41) laststat -> . return
   yacc.py:2546:    (42) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat M_while1 block until M_while2 exp
   yacc.py:2546:    (19) stat -> . do M_sc_beg block M_sc_end end
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (24) stat -> . local namelist
   yacc.py:2546:    (25) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (26) stat -> . functioncall
   yacc.py:2546:    (51) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (65) varlist -> . var comvar
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 17
   yacc.py:2658:    break           shift and go to state 18
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 22
   yacc.py:2658:    repeat          shift and go to state 16
   yacc.py:2658:    do              shift and go to state 14
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 21
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 11
   yacc.py:2685:    var                            shift and go to state 12
   yacc.py:2685:    functioncall                   shift and go to state 13
   yacc.py:2685:    stat                           shift and go to state 15
   yacc.py:2685:    sdash                          shift and go to state 132
   yacc.py:2685:    block                          shift and go to state 243
   yacc.py:2542:
   yacc.py:2543:state 229
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for names EQUALS exp COMMA . exp do block end
   yacc.py:2546:    (13) stat -> for names EQUALS exp COMMA . exp COMMA exp do block end
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    exp                            shift and go to state 244
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2542:
   yacc.py:2543:state 230
   yacc.py:2544:
   yacc.py:2546:    (49) comid -> COMMA names comid .
   yacc.py:2547:
   yacc.py:2658:    in              reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    EQUALS          reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    SEMI            reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    return          reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    break           reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    for             reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    while           reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    repeat          reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    do              reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    function        reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    local           reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    if              reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    print           reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    scan            reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    LPAREN          reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    ID              reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    RESID           reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    $end            reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    end             reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    until           reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    elseif          reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    else            reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    COMMA           reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2658:    RPAREN          reduce using rule 49 (comid -> COMMA names comid .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 231
   yacc.py:2544:
   yacc.py:2546:    (19) stat -> do M_sc_beg block M_sc_end end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    return          reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    break           reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    for             reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    while           reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    repeat          reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    do              reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    function        reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    local           reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    if              reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    print           reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    scan            reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    LPAREN          reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    ID              reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    RESID           reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    end             reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    $end            reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    until           reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    elseif          reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2658:    else            reduce using rule 19 (stat -> do M_sc_beg block M_sc_end end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 232
   yacc.py:2544:
   yacc.py:2546:    (17) M_while2 -> empty .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    break           reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    for             reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    while           reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    repeat          reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    do              reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    function        reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    local           reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    if              reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    print           reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    scan            reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    ID              reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    RESID           reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    nil             reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    STRING          reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    true            reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    false           reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    INTEGER         reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    FLOAT           reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    HEX             reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    LCURLY          reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    not             reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    MINUS           reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2658:    HASH            reduce using rule 17 (M_while2 -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 233
   yacc.py:2544:
   yacc.py:2546:    (18) stat -> repeat M_while1 block until M_while2 . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    exp                            shift and go to state 245
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 234
   yacc.py:2544:
   yacc.py:2546:    (118) retexp -> exp and M_andor exp .
   yacc.py:2546:    (92) exp -> exp and M_andor exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 118 (retexp -> exp and M_andor exp .)
   yacc.py:2658:    $end            reduce using rule 118 (retexp -> exp and M_andor exp .)
   yacc.py:2658:    SEMI            reduce using rule 118 (retexp -> exp and M_andor exp .)
   yacc.py:2658:    end             reduce using rule 118 (retexp -> exp and M_andor exp .)
   yacc.py:2658:    until           reduce using rule 118 (retexp -> exp and M_andor exp .)
   yacc.py:2658:    elseif          reduce using rule 118 (retexp -> exp and M_andor exp .)
   yacc.py:2658:    else            reduce using rule 118 (retexp -> exp and M_andor exp .)
   yacc.py:2658:    and             reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    or              reduce using rule 92 (exp -> exp and M_andor exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! LT              [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! LE              [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! GT              [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! GE              [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! NE              [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! CHECKEQ         [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 92 (exp -> exp and M_andor exp .) ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 235
   yacc.py:2544:
   yacc.py:2546:    (119) retexp -> exp or M_andor exp .
   yacc.py:2546:    (91) exp -> exp or M_andor exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 119 (retexp -> exp or M_andor exp .)
   yacc.py:2658:    $end            reduce using rule 119 (retexp -> exp or M_andor exp .)
   yacc.py:2658:    SEMI            reduce using rule 119 (retexp -> exp or M_andor exp .)
   yacc.py:2658:    end             reduce using rule 119 (retexp -> exp or M_andor exp .)
   yacc.py:2658:    until           reduce using rule 119 (retexp -> exp or M_andor exp .)
   yacc.py:2658:    elseif          reduce using rule 119 (retexp -> exp or M_andor exp .)
   yacc.py:2658:    else            reduce using rule 119 (retexp -> exp or M_andor exp .)
   yacc.py:2658:    and             reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    or              reduce using rule 91 (exp -> exp or M_andor exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! LT              [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! LE              [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! GT              [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! GE              [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! NE              [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! CHECKEQ         [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 91 (exp -> exp or M_andor exp .) ]
   yacc.py:2667:  ! or              [ shift and go to state 101 ]
   yacc.py:2667:  ! and             [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 236
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> while M_while1 exp do M_while2 . block end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (40) laststat -> . return retexplist
   yacc.py:2546:    (41) laststat -> . return
   yacc.py:2546:    (42) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat M_while1 block until M_while2 exp
   yacc.py:2546:    (19) stat -> . do M_sc_beg block M_sc_end end
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (24) stat -> . local namelist
   yacc.py:2546:    (25) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (26) stat -> . functioncall
   yacc.py:2546:    (51) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (65) varlist -> . var comvar
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 17
   yacc.py:2658:    break           shift and go to state 18
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 22
   yacc.py:2658:    repeat          shift and go to state 16
   yacc.py:2658:    do              shift and go to state 14
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 21
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 11
   yacc.py:2685:    var                            shift and go to state 12
   yacc.py:2685:    functioncall                   shift and go to state 13
   yacc.py:2685:    stat                           shift and go to state 15
   yacc.py:2685:    sdash                          shift and go to state 132
   yacc.py:2685:    block                          shift and go to state 246
   yacc.py:2542:
   yacc.py:2543:state 237
   yacc.py:2544:
   yacc.py:2546:    (39) comtrp -> COMMA TRPLDOTS .
   yacc.py:2547:
   yacc.py:2658:    RPAREN          reduce using rule 39 (comtrp -> COMMA TRPLDOTS .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 238
   yacc.py:2544:
   yacc.py:2546:    (28) funcbody -> LPAREN parlist RPAREN block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 247
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 239
   yacc.py:2544:
   yacc.py:2546:    (27) funcbody -> LPAREN RPAREN block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    return          reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    break           reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    for             reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    while           reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    repeat          reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    do              reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    function        reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    local           reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    if              reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    print           reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    scan            reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    LPAREN          reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    ID              reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    RESID           reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    $end            reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    end             reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    until           reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    elseif          reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    else            reduce using rule 27 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 240
   yacc.py:2544:
   yacc.py:2546:    (138) fieldseplist -> fieldseplist fieldsep field .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 138 (fieldseplist -> fieldseplist fieldsep field .)
   yacc.py:2658:    SEMI            reduce using rule 138 (fieldseplist -> fieldseplist fieldsep field .)
   yacc.py:2658:    RCURLY          reduce using rule 138 (fieldseplist -> fieldseplist fieldsep field .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 241
   yacc.py:2544:
   yacc.py:2546:    (140) field -> LSQUARE exp RSQUARE EQUALS . exp
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 248
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2542:
   yacc.py:2543:state 242
   yacc.py:2544:
   yacc.py:2546:    (51) stat -> if exp M_bool then M_if1 block . M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (54) M_if_block_end -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    elseif          reduce using rule 127 (empty -> .)
   yacc.py:2658:    else            reduce using rule 127 (empty -> .)
   yacc.py:2658:    end             reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 249
   yacc.py:2685:    M_if_block_end                 shift and go to state 250
   yacc.py:2542:
   yacc.py:2543:state 243
   yacc.py:2544:
   yacc.py:2546:    (14) stat -> for namelist in explist do block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 251
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 244
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for names EQUALS exp COMMA exp . do block end
   yacc.py:2546:    (13) stat -> for names EQUALS exp COMMA exp . COMMA exp do block end
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    do              shift and go to state 253
   yacc.py:2658:    COMMA           shift and go to state 252
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    or              shift and go to state 101
   yacc.py:2658:    and             shift and go to state 97
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 245
   yacc.py:2544:
   yacc.py:2546:    (18) stat -> repeat M_while1 block until M_while2 exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    return          reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    break           reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    for             reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    while           reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    repeat          reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    do              reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    function        reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    local           reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    if              reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    print           reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    scan            reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    LPAREN          reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    ID              reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    RESID           reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    end             reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    $end            reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    until           reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    elseif          reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    else            reduce using rule 18 (stat -> repeat M_while1 block until M_while2 exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    or              shift and go to state 101
   yacc.py:2658:    and             shift and go to state 97
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 246
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> while M_while1 exp do M_while2 block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 254
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 247
   yacc.py:2544:
   yacc.py:2546:    (28) funcbody -> LPAREN parlist RPAREN block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    return          reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    break           reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    for             reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    while           reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    repeat          reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    do              reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    function        reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    local           reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    if              reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    print           reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    scan            reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    LPAREN          reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    ID              reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    RESID           reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    $end            reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    end             reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    until           reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    elseif          reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    else            reduce using rule 28 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 248
   yacc.py:2544:
   yacc.py:2546:    (140) field -> LSQUARE exp RSQUARE EQUALS exp .
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 140 (field -> LSQUARE exp RSQUARE EQUALS exp .)
   yacc.py:2658:    SEMI            reduce using rule 140 (field -> LSQUARE exp RSQUARE EQUALS exp .)
   yacc.py:2658:    RCURLY          reduce using rule 140 (field -> LSQUARE exp RSQUARE EQUALS exp .)
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    or              shift and go to state 101
   yacc.py:2658:    and             shift and go to state 97
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 249
   yacc.py:2544:
   yacc.py:2546:    (54) M_if_block_end -> empty .
   yacc.py:2547:
   yacc.py:2658:    elseif          reduce using rule 54 (M_if_block_end -> empty .)
   yacc.py:2658:    else            reduce using rule 54 (M_if_block_end -> empty .)
   yacc.py:2658:    end             reduce using rule 54 (M_if_block_end -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 250
   yacc.py:2544:
   yacc.py:2546:    (51) stat -> if exp M_bool then M_if1 block M_if_block_end . ifblock M_if_tail end
   yacc.py:2546:    (60) ifblock -> . elseif exp M_bool then M_else_block1 block M_else_block_end ifblock M_ifblock_end
   yacc.py:2546:    (61) ifblock -> . opt_else
   yacc.py:2546:    (56) opt_else -> . else M_else block M_else_block
   yacc.py:2546:    (57) opt_else -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    elseif          shift and go to state 259
   yacc.py:2658:    else            shift and go to state 258
   yacc.py:2658:    end             reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    opt_else                       shift and go to state 255
   yacc.py:2685:    empty                          shift and go to state 256
   yacc.py:2685:    ifblock                        shift and go to state 257
   yacc.py:2542:
   yacc.py:2543:state 251
   yacc.py:2544:
   yacc.py:2546:    (14) stat -> for namelist in explist do block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    return          reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    break           reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    for             reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    while           reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    repeat          reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    do              reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    function        reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    local           reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    if              reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    print           reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    scan            reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    LPAREN          reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    ID              reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    RESID           reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    end             reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    $end            reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    until           reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    elseif          reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    else            reduce using rule 14 (stat -> for namelist in explist do block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 252
   yacc.py:2544:
   yacc.py:2546:    (13) stat -> for names EQUALS exp COMMA exp COMMA . exp do block end
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    exp                            shift and go to state 260
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2542:
   yacc.py:2543:state 253
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for names EQUALS exp COMMA exp do . block end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (40) laststat -> . return retexplist
   yacc.py:2546:    (41) laststat -> . return
   yacc.py:2546:    (42) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat M_while1 block until M_while2 exp
   yacc.py:2546:    (19) stat -> . do M_sc_beg block M_sc_end end
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (24) stat -> . local namelist
   yacc.py:2546:    (25) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (26) stat -> . functioncall
   yacc.py:2546:    (51) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (65) varlist -> . var comvar
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 17
   yacc.py:2658:    break           shift and go to state 18
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 22
   yacc.py:2658:    repeat          shift and go to state 16
   yacc.py:2658:    do              shift and go to state 14
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 21
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 11
   yacc.py:2685:    var                            shift and go to state 12
   yacc.py:2685:    stat                           shift and go to state 15
   yacc.py:2685:    functioncall                   shift and go to state 13
   yacc.py:2685:    block                          shift and go to state 261
   yacc.py:2685:    sdash                          shift and go to state 132
   yacc.py:2542:
   yacc.py:2543:state 254
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> while M_while1 exp do M_while2 block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    return          reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    break           reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    for             reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    while           reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    repeat          reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    do              reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    function        reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    local           reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    if              reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    print           reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    scan            reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    LPAREN          reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    ID              reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    RESID           reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    end             reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    $end            reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    until           reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    elseif          reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2658:    else            reduce using rule 15 (stat -> while M_while1 exp do M_while2 block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 255
   yacc.py:2544:
   yacc.py:2546:    (61) ifblock -> opt_else .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 61 (ifblock -> opt_else .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 256
   yacc.py:2544:
   yacc.py:2546:    (57) opt_else -> empty .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 57 (opt_else -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 257
   yacc.py:2544:
   yacc.py:2546:    (51) stat -> if exp M_bool then M_if1 block M_if_block_end ifblock . M_if_tail end
   yacc.py:2546:    (55) M_if_tail -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 262
   yacc.py:2685:    M_if_tail                      shift and go to state 263
   yacc.py:2542:
   yacc.py:2543:state 258
   yacc.py:2544:
   yacc.py:2546:    (56) opt_else -> else . M_else block M_else_block
   yacc.py:2546:    (58) M_else -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 127 (empty -> .)
   yacc.py:2658:    break           reduce using rule 127 (empty -> .)
   yacc.py:2658:    for             reduce using rule 127 (empty -> .)
   yacc.py:2658:    while           reduce using rule 127 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 127 (empty -> .)
   yacc.py:2658:    do              reduce using rule 127 (empty -> .)
   yacc.py:2658:    function        reduce using rule 127 (empty -> .)
   yacc.py:2658:    local           reduce using rule 127 (empty -> .)
   yacc.py:2658:    if              reduce using rule 127 (empty -> .)
   yacc.py:2658:    print           reduce using rule 127 (empty -> .)
   yacc.py:2658:    scan            reduce using rule 127 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 127 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 127 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 264
   yacc.py:2685:    M_else                         shift and go to state 265
   yacc.py:2542:
   yacc.py:2543:state 259
   yacc.py:2544:
   yacc.py:2546:    (60) ifblock -> elseif . exp M_bool then M_else_block1 block M_else_block_end ifblock M_ifblock_end
   yacc.py:2546:    (72) exp -> . nil
   yacc.py:2546:    (73) exp -> . Number
   yacc.py:2546:    (74) exp -> . STRING
   yacc.py:2546:    (75) exp -> . true
   yacc.py:2546:    (76) exp -> . false
   yacc.py:2546:    (77) exp -> . TRPLDOTS
   yacc.py:2546:    (78) exp -> . function
   yacc.py:2546:    (79) exp -> . prefixexp
   yacc.py:2546:    (80) exp -> . exp PLUS exp
   yacc.py:2546:    (81) exp -> . exp MINUS exp
   yacc.py:2546:    (82) exp -> . exp TIMES exp
   yacc.py:2546:    (83) exp -> . exp DIVIDE exp
   yacc.py:2546:    (84) exp -> . exp POWER exp
   yacc.py:2546:    (85) exp -> . exp LT exp
   yacc.py:2546:    (86) exp -> . exp LE exp
   yacc.py:2546:    (87) exp -> . exp GT exp
   yacc.py:2546:    (88) exp -> . exp GE exp
   yacc.py:2546:    (89) exp -> . exp NE exp
   yacc.py:2546:    (90) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (91) exp -> . exp or M_andor exp
   yacc.py:2546:    (92) exp -> . exp and M_andor exp
   yacc.py:2546:    (94) exp -> . exp MODULO exp
   yacc.py:2546:    (95) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (96) exp -> . tableconstructor
   yacc.py:2546:    (97) exp -> . unop exp
   yacc.py:2546:    (124) Number -> . INTEGER
   yacc.py:2546:    (125) Number -> . FLOAT
   yacc.py:2546:    (126) Number -> . HEX
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (134) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (135) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (131) unop -> . not
   yacc.py:2546:    (132) unop -> . MINUS
   yacc.py:2546:    (133) unop -> . HASH
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 36
   yacc.py:2658:    STRING          shift and go to state 35
   yacc.py:2658:    true            shift and go to state 39
   yacc.py:2658:    false           shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 45
   yacc.py:2658:    function        shift and go to state 34
   yacc.py:2658:    INTEGER         shift and go to state 33
   yacc.py:2658:    FLOAT           shift and go to state 40
   yacc.py:2658:    HEX             shift and go to state 37
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    LCURLY          shift and go to state 28
   yacc.py:2658:    not             shift and go to state 38
   yacc.py:2658:    MINUS           shift and go to state 30
   yacc.py:2658:    HASH            shift and go to state 29
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 31
   yacc.py:2685:    tableconstructor               shift and go to state 26
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    Number                         shift and go to state 41
   yacc.py:2685:    unop                           shift and go to state 44
   yacc.py:2685:    functioncall                   shift and go to state 42
   yacc.py:2685:    exp                            shift and go to state 266
   yacc.py:2685:    var                            shift and go to state 32
   yacc.py:2542:
   yacc.py:2543:state 260
   yacc.py:2544:
   yacc.py:2546:    (13) stat -> for names EQUALS exp COMMA exp COMMA exp . do block end
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    do              shift and go to state 267
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    or              shift and go to state 101
   yacc.py:2658:    and             shift and go to state 97
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 261
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for names EQUALS exp COMMA exp do block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 268
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 262
   yacc.py:2544:
   yacc.py:2546:    (55) M_if_tail -> empty .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 55 (M_if_tail -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 263
   yacc.py:2544:
   yacc.py:2546:    (51) stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 269
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 264
   yacc.py:2544:
   yacc.py:2546:    (58) M_else -> empty .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 58 (M_else -> empty .)
   yacc.py:2658:    break           reduce using rule 58 (M_else -> empty .)
   yacc.py:2658:    for             reduce using rule 58 (M_else -> empty .)
   yacc.py:2658:    while           reduce using rule 58 (M_else -> empty .)
   yacc.py:2658:    repeat          reduce using rule 58 (M_else -> empty .)
   yacc.py:2658:    do              reduce using rule 58 (M_else -> empty .)
   yacc.py:2658:    function        reduce using rule 58 (M_else -> empty .)
   yacc.py:2658:    local           reduce using rule 58 (M_else -> empty .)
   yacc.py:2658:    if              reduce using rule 58 (M_else -> empty .)
   yacc.py:2658:    print           reduce using rule 58 (M_else -> empty .)
   yacc.py:2658:    scan            reduce using rule 58 (M_else -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 58 (M_else -> empty .)
   yacc.py:2658:    ID              reduce using rule 58 (M_else -> empty .)
   yacc.py:2658:    RESID           reduce using rule 58 (M_else -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 265
   yacc.py:2544:
   yacc.py:2546:    (56) opt_else -> else M_else . block M_else_block
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (40) laststat -> . return retexplist
   yacc.py:2546:    (41) laststat -> . return
   yacc.py:2546:    (42) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat M_while1 block until M_while2 exp
   yacc.py:2546:    (19) stat -> . do M_sc_beg block M_sc_end end
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (24) stat -> . local namelist
   yacc.py:2546:    (25) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (26) stat -> . functioncall
   yacc.py:2546:    (51) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (65) varlist -> . var comvar
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 17
   yacc.py:2658:    break           shift and go to state 18
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 22
   yacc.py:2658:    repeat          shift and go to state 16
   yacc.py:2658:    do              shift and go to state 14
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 21
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 11
   yacc.py:2685:    var                            shift and go to state 12
   yacc.py:2685:    stat                           shift and go to state 15
   yacc.py:2685:    functioncall                   shift and go to state 13
   yacc.py:2685:    block                          shift and go to state 270
   yacc.py:2685:    sdash                          shift and go to state 132
   yacc.py:2542:
   yacc.py:2543:state 266
   yacc.py:2544:
   yacc.py:2546:    (60) ifblock -> elseif exp . M_bool then M_else_block1 block M_else_block_end ifblock M_ifblock_end
   yacc.py:2546:    (80) exp -> exp . PLUS exp
   yacc.py:2546:    (81) exp -> exp . MINUS exp
   yacc.py:2546:    (82) exp -> exp . TIMES exp
   yacc.py:2546:    (83) exp -> exp . DIVIDE exp
   yacc.py:2546:    (84) exp -> exp . POWER exp
   yacc.py:2546:    (85) exp -> exp . LT exp
   yacc.py:2546:    (86) exp -> exp . LE exp
   yacc.py:2546:    (87) exp -> exp . GT exp
   yacc.py:2546:    (88) exp -> exp . GE exp
   yacc.py:2546:    (89) exp -> exp . NE exp
   yacc.py:2546:    (90) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (91) exp -> exp . or M_andor exp
   yacc.py:2546:    (92) exp -> exp . and M_andor exp
   yacc.py:2546:    (94) exp -> exp . MODULO exp
   yacc.py:2546:    (95) exp -> exp . DBLDOTS exp
   yacc.py:2546:    (52) M_bool -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    PLUS            shift and go to state 107
   yacc.py:2658:    MINUS           shift and go to state 110
   yacc.py:2658:    TIMES           shift and go to state 103
   yacc.py:2658:    DIVIDE          shift and go to state 112
   yacc.py:2658:    POWER           shift and go to state 100
   yacc.py:2658:    LT              shift and go to state 105
   yacc.py:2658:    LE              shift and go to state 98
   yacc.py:2658:    GT              shift and go to state 106
   yacc.py:2658:    GE              shift and go to state 102
   yacc.py:2658:    NE              shift and go to state 111
   yacc.py:2658:    CHECKEQ         shift and go to state 104
   yacc.py:2658:    or              shift and go to state 101
   yacc.py:2658:    and             shift and go to state 97
   yacc.py:2658:    MODULO          shift and go to state 108
   yacc.py:2658:    DBLDOTS         shift and go to state 109
   yacc.py:2658:    then            reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 117
   yacc.py:2685:    M_bool                         shift and go to state 271
   yacc.py:2542:
   yacc.py:2543:state 267
   yacc.py:2544:
   yacc.py:2546:    (13) stat -> for names EQUALS exp COMMA exp COMMA exp do . block end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (40) laststat -> . return retexplist
   yacc.py:2546:    (41) laststat -> . return
   yacc.py:2546:    (42) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat M_while1 block until M_while2 exp
   yacc.py:2546:    (19) stat -> . do M_sc_beg block M_sc_end end
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (24) stat -> . local namelist
   yacc.py:2546:    (25) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (26) stat -> . functioncall
   yacc.py:2546:    (51) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (65) varlist -> . var comvar
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 17
   yacc.py:2658:    break           shift and go to state 18
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 22
   yacc.py:2658:    repeat          shift and go to state 16
   yacc.py:2658:    do              shift and go to state 14
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 21
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 11
   yacc.py:2685:    var                            shift and go to state 12
   yacc.py:2685:    stat                           shift and go to state 15
   yacc.py:2685:    functioncall                   shift and go to state 13
   yacc.py:2685:    block                          shift and go to state 272
   yacc.py:2685:    sdash                          shift and go to state 132
   yacc.py:2542:
   yacc.py:2543:state 268
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> for names EQUALS exp COMMA exp do block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    return          reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    break           reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    for             reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    while           reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    repeat          reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    do              reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    function        reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    local           reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    if              reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    print           reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    scan            reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    LPAREN          reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    ID              reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    RESID           reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    end             reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    $end            reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    until           reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    elseif          reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    else            reduce using rule 12 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 269
   yacc.py:2544:
   yacc.py:2546:    (51) stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    return          reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    break           reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    for             reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    while           reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    repeat          reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    do              reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    function        reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    local           reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    if              reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    print           reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    scan            reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    LPAREN          reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    ID              reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    RESID           reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    end             reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    $end            reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    until           reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    elseif          reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2658:    else            reduce using rule 51 (stat -> if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 270
   yacc.py:2544:
   yacc.py:2546:    (56) opt_else -> else M_else block . M_else_block
   yacc.py:2546:    (59) M_else_block -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    M_else_block                   shift and go to state 273
   yacc.py:2685:    empty                          shift and go to state 274
   yacc.py:2542:
   yacc.py:2543:state 271
   yacc.py:2544:
   yacc.py:2546:    (60) ifblock -> elseif exp M_bool . then M_else_block1 block M_else_block_end ifblock M_ifblock_end
   yacc.py:2547:
   yacc.py:2658:    then            shift and go to state 275
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 272
   yacc.py:2544:
   yacc.py:2546:    (13) stat -> for names EQUALS exp COMMA exp COMMA exp do block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 276
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 273
   yacc.py:2544:
   yacc.py:2546:    (56) opt_else -> else M_else block M_else_block .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 56 (opt_else -> else M_else block M_else_block .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 274
   yacc.py:2544:
   yacc.py:2546:    (59) M_else_block -> empty .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 59 (M_else_block -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 275
   yacc.py:2544:
   yacc.py:2546:    (60) ifblock -> elseif exp M_bool then . M_else_block1 block M_else_block_end ifblock M_ifblock_end
   yacc.py:2546:    (62) M_else_block1 -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 127 (empty -> .)
   yacc.py:2658:    break           reduce using rule 127 (empty -> .)
   yacc.py:2658:    for             reduce using rule 127 (empty -> .)
   yacc.py:2658:    while           reduce using rule 127 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 127 (empty -> .)
   yacc.py:2658:    do              reduce using rule 127 (empty -> .)
   yacc.py:2658:    function        reduce using rule 127 (empty -> .)
   yacc.py:2658:    local           reduce using rule 127 (empty -> .)
   yacc.py:2658:    if              reduce using rule 127 (empty -> .)
   yacc.py:2658:    print           reduce using rule 127 (empty -> .)
   yacc.py:2658:    scan            reduce using rule 127 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 127 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 127 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    M_else_block1                  shift and go to state 277
   yacc.py:2685:    empty                          shift and go to state 278
   yacc.py:2542:
   yacc.py:2543:state 276
   yacc.py:2544:
   yacc.py:2546:    (13) stat -> for names EQUALS exp COMMA exp COMMA exp do block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    return          reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    break           reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    for             reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    while           reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    repeat          reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    do              reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    function        reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    local           reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    if              reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    print           reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    scan            reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    LPAREN          reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    ID              reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    RESID           reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    end             reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    $end            reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    until           reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    elseif          reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    else            reduce using rule 13 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 277
   yacc.py:2544:
   yacc.py:2546:    (60) ifblock -> elseif exp M_bool then M_else_block1 . block M_else_block_end ifblock M_ifblock_end
   yacc.py:2546:    (10) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk M_chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat M_chunk
   yacc.py:2546:    (3) sdash -> . laststat M_chunk
   yacc.py:2546:    (4) sdash -> . chunk laststat M_chunk SEMI
   yacc.py:2546:    (5) chunk -> . chunk M_chunk stat SEMI
   yacc.py:2546:    (6) chunk -> . stat SEMI
   yacc.py:2546:    (7) chunk -> . chunk M_chunk stat
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (40) laststat -> . return retexplist
   yacc.py:2546:    (41) laststat -> . return
   yacc.py:2546:    (42) laststat -> . break
   yacc.py:2546:    (11) stat -> . varlist EQUALS explist
   yacc.py:2546:    (12) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (13) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (14) stat -> . for namelist in explist do block end
   yacc.py:2546:    (15) stat -> . while M_while1 exp do M_while2 block end
   yacc.py:2546:    (18) stat -> . repeat M_while1 block until M_while2 exp
   yacc.py:2546:    (19) stat -> . do M_sc_beg block M_sc_end end
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (24) stat -> . local namelist
   yacc.py:2546:    (25) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (26) stat -> . functioncall
   yacc.py:2546:    (51) stat -> . if exp M_bool then M_if1 block M_if_block_end ifblock M_if_tail end
   yacc.py:2546:    (65) varlist -> . var comvar
   yacc.py:2546:    (29) functioncall -> . prefixexp args
   yacc.py:2546:    (30) functioncall -> . print args
   yacc.py:2546:    (31) functioncall -> . scan args
   yacc.py:2546:    (66) var -> . names
   yacc.py:2546:    (67) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (68) var -> . prefixexp SDOT names
   yacc.py:2546:    (128) prefixexp -> . var
   yacc.py:2546:    (129) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (130) prefixexp -> . functioncall
   yacc.py:2546:    (145) names -> . ID
   yacc.py:2546:    (146) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 17
   yacc.py:2658:    break           shift and go to state 18
   yacc.py:2658:    for             shift and go to state 8
   yacc.py:2658:    while           shift and go to state 22
   yacc.py:2658:    repeat          shift and go to state 16
   yacc.py:2658:    do              shift and go to state 14
   yacc.py:2658:    function        shift and go to state 1
   yacc.py:2658:    local           shift and go to state 21
   yacc.py:2658:    if              shift and go to state 6
   yacc.py:2658:    print           shift and go to state 19
   yacc.py:2658:    scan            shift and go to state 10
   yacc.py:2658:    LPAREN          shift and go to state 3
   yacc.py:2658:    ID              shift and go to state 20
   yacc.py:2658:    RESID           shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    chunk                          shift and go to state 4
   yacc.py:2685:    names                          shift and go to state 5
   yacc.py:2685:    prefixexp                      shift and go to state 7
   yacc.py:2685:    varlist                        shift and go to state 9
   yacc.py:2685:    laststat                       shift and go to state 11
   yacc.py:2685:    var                            shift and go to state 12
   yacc.py:2685:    functioncall                   shift and go to state 13
   yacc.py:2685:    stat                           shift and go to state 15
   yacc.py:2685:    block                          shift and go to state 279
   yacc.py:2685:    sdash                          shift and go to state 132
   yacc.py:2542:
   yacc.py:2543:state 278
   yacc.py:2544:
   yacc.py:2546:    (62) M_else_block1 -> empty .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 62 (M_else_block1 -> empty .)
   yacc.py:2658:    break           reduce using rule 62 (M_else_block1 -> empty .)
   yacc.py:2658:    for             reduce using rule 62 (M_else_block1 -> empty .)
   yacc.py:2658:    while           reduce using rule 62 (M_else_block1 -> empty .)
   yacc.py:2658:    repeat          reduce using rule 62 (M_else_block1 -> empty .)
   yacc.py:2658:    do              reduce using rule 62 (M_else_block1 -> empty .)
   yacc.py:2658:    function        reduce using rule 62 (M_else_block1 -> empty .)
   yacc.py:2658:    local           reduce using rule 62 (M_else_block1 -> empty .)
   yacc.py:2658:    if              reduce using rule 62 (M_else_block1 -> empty .)
   yacc.py:2658:    print           reduce using rule 62 (M_else_block1 -> empty .)
   yacc.py:2658:    scan            reduce using rule 62 (M_else_block1 -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 62 (M_else_block1 -> empty .)
   yacc.py:2658:    ID              reduce using rule 62 (M_else_block1 -> empty .)
   yacc.py:2658:    RESID           reduce using rule 62 (M_else_block1 -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 279
   yacc.py:2544:
   yacc.py:2546:    (60) ifblock -> elseif exp M_bool then M_else_block1 block . M_else_block_end ifblock M_ifblock_end
   yacc.py:2546:    (63) M_else_block_end -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    elseif          reduce using rule 127 (empty -> .)
   yacc.py:2658:    else            reduce using rule 127 (empty -> .)
   yacc.py:2658:    end             reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 280
   yacc.py:2685:    M_else_block_end               shift and go to state 281
   yacc.py:2542:
   yacc.py:2543:state 280
   yacc.py:2544:
   yacc.py:2546:    (63) M_else_block_end -> empty .
   yacc.py:2547:
   yacc.py:2658:    elseif          reduce using rule 63 (M_else_block_end -> empty .)
   yacc.py:2658:    else            reduce using rule 63 (M_else_block_end -> empty .)
   yacc.py:2658:    end             reduce using rule 63 (M_else_block_end -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 281
   yacc.py:2544:
   yacc.py:2546:    (60) ifblock -> elseif exp M_bool then M_else_block1 block M_else_block_end . ifblock M_ifblock_end
   yacc.py:2546:    (60) ifblock -> . elseif exp M_bool then M_else_block1 block M_else_block_end ifblock M_ifblock_end
   yacc.py:2546:    (61) ifblock -> . opt_else
   yacc.py:2546:    (56) opt_else -> . else M_else block M_else_block
   yacc.py:2546:    (57) opt_else -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    elseif          shift and go to state 259
   yacc.py:2658:    else            shift and go to state 258
   yacc.py:2658:    end             reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    opt_else                       shift and go to state 255
   yacc.py:2685:    ifblock                        shift and go to state 282
   yacc.py:2685:    empty                          shift and go to state 256
   yacc.py:2542:
   yacc.py:2543:state 282
   yacc.py:2544:
   yacc.py:2546:    (60) ifblock -> elseif exp M_bool then M_else_block1 block M_else_block_end ifblock . M_ifblock_end
   yacc.py:2546:    (64) M_ifblock_end -> . empty
   yacc.py:2546:    (127) empty -> .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 127 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    M_ifblock_end                  shift and go to state 283
   yacc.py:2685:    empty                          shift and go to state 284
   yacc.py:2542:
   yacc.py:2543:state 283
   yacc.py:2544:
   yacc.py:2546:    (60) ifblock -> elseif exp M_bool then M_else_block1 block M_else_block_end ifblock M_ifblock_end .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 60 (ifblock -> elseif exp M_bool then M_else_block1 block M_else_block_end ifblock M_ifblock_end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 284
   yacc.py:2544:
   yacc.py:2546:    (64) M_ifblock_end -> empty .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 64 (M_ifblock_end -> empty .)
   yacc.py:2660:
   yacc.py:3428:
   yacc.py:3429:Conflicts:
   yacc.py:3430:
   yacc.py:3433:shift/reduce conflict for LPAREN in state 31 resolved as shift
   yacc.py:3439:reduce/reduce conflict in state 13 resolved using rule (stat -> functioncall)
   yacc.py:3440:rejected rule (prefixexp -> functioncall) in state 13
   yacc.py: 360:PLY: PARSE DEBUG START
   yacc.py: 408:
   yacc.py: 409:State  : 0
   yacc.py: 433:Stack  : . LexToken(ID,'x',1,0)
   yacc.py: 443:Action : Shift and goto state 20
   yacc.py: 408:
   yacc.py: 409:State  : 20
   yacc.py: 433:Stack  : ID . LexToken(EQUALS,'=',1,2)
   yacc.py: 469:Action : Reduce rule [names -> ID] with ['x'] and goto state 5
   yacc.py: 503:Result : <str @ 0x7fc6917ddd00> ('x')
   yacc.py: 408:
   yacc.py: 409:State  : 5
   yacc.py: 433:Stack  : names . LexToken(EQUALS,'=',1,2)
   yacc.py: 469:Action : Reduce rule [var -> names] with ['x'] and goto state 12
   yacc.py: 503:Result : <Symbol @ 0x7fc68aabd610> (<SymbolTable.Symbol object at 0x7fc68aab ...)
   yacc.py: 408:
   yacc.py: 409:State  : 12
   yacc.py: 433:Stack  : var . LexToken(EQUALS,'=',1,2)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 63
   yacc.py: 542:Result : <NoneType @ 0x7fc6915fada0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 63
   yacc.py: 428:Defaulted state 63: Reduce using 48
   yacc.py: 433:Stack  : var empty . LexToken(EQUALS,'=',1,2)
   yacc.py: 469:Action : Reduce rule [comvar -> empty] with [None] and goto state 62
   yacc.py: 503:Result : <list @ 0x7fc68a99fb00> ([])
   yacc.py: 408:
   yacc.py: 409:State  : 62
   yacc.py: 428:Defaulted state 62: Reduce using 65
   yacc.py: 433:Stack  : var comvar . LexToken(EQUALS,'=',1,2)
   yacc.py: 469:Action : Reduce rule [varlist -> var comvar] with [<Symbol @ 0x7fc68aabd610>,[]] and goto state 9
   yacc.py: 503:Result : <list @ 0x7fc68a99be60> ([<SymbolTable.Symbol object at 0x7fc68aa ...)
   yacc.py: 408:
   yacc.py: 409:State  : 9
   yacc.py: 433:Stack  : varlist . LexToken(EQUALS,'=',1,2)
   yacc.py: 443:Action : Shift and goto state 58
   yacc.py: 408:
   yacc.py: 409:State  : 58
   yacc.py: 433:Stack  : varlist EQUALS . LexToken(FLOAT,'2.0',1,4)
   yacc.py: 443:Action : Shift and goto state 40
   yacc.py: 408:
   yacc.py: 409:State  : 40
   yacc.py: 433:Stack  : varlist EQUALS FLOAT . LexToken(print,'print',1,8)
   yacc.py: 469:Action : Reduce rule [Number -> FLOAT] with ['2.0'] and goto state 41
   yacc.py: 503:Result : <Symbol @ 0x7fc68a73abd0> (<SymbolTable.Symbol object at 0x7fc68a73 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 41
   yacc.py: 433:Stack  : varlist EQUALS Number . LexToken(print,'print',1,8)
   yacc.py: 469:Action : Reduce rule [exp -> Number] with [<Symbol @ 0x7fc68a73abd0>] and goto state 121
   yacc.py: 503:Result : <Symbol @ 0x7fc68a73abd0> (<SymbolTable.Symbol object at 0x7fc68a73 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 121
   yacc.py: 433:Stack  : varlist EQUALS exp . LexToken(print,'print',1,8)
   yacc.py: 469:Action : Reduce rule [explist -> exp] with [<Symbol @ 0x7fc68a73abd0>] and goto state 128
   yacc.py: 503:Result : <list @ 0x7fc68a99b560> ([<SymbolTable.Symbol object at 0x7fc68a7 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 128
   yacc.py: 433:Stack  : varlist EQUALS explist . LexToken(print,'print',1,8)
   yacc.py: 469:Action : Reduce rule [stat -> varlist EQUALS explist] with [<list @ 0x7fc68a99be60>,'=',<list @ 0x7fc68a99b560>] and goto state 15
   yacc.py: 503:Result : <Symbol @ 0x7fc68a73a8d0> (<SymbolTable.Symbol object at 0x7fc68a73 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 15
   yacc.py: 433:Stack  : stat . LexToken(print,'print',1,8)
   yacc.py: 469:Action : Reduce rule [chunk -> stat] with [<Symbol @ 0x7fc68a73a8d0>] and goto state 4
   yacc.py: 503:Result : <Symbol @ 0x7fc68aabd610> (<SymbolTable.Symbol object at 0x7fc68aab ...)
   yacc.py: 408:
   yacc.py: 409:State  : 4
   yacc.py: 433:Stack  : chunk . LexToken(print,'print',1,8)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 48
   yacc.py: 542:Result : <NoneType @ 0x7fc6915fada0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 48
   yacc.py: 433:Stack  : chunk empty . LexToken(print,'print',1,8)
   yacc.py: 469:Action : Reduce rule [M_chunk -> empty] with [None] and goto state 46
   yacc.py: 503:Result : <Symbol @ 0x7fc68a73a8d0> (<SymbolTable.Symbol object at 0x7fc68a73 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 46
   yacc.py: 433:Stack  : chunk M_chunk . LexToken(print,'print',1,8)
   yacc.py: 443:Action : Shift and goto state 19
   yacc.py: 408:
   yacc.py: 409:State  : 19
   yacc.py: 433:Stack  : chunk M_chunk print . LexToken(LPAREN,'(',1,13)
   yacc.py: 443:Action : Shift and goto state 53
   yacc.py: 408:
   yacc.py: 409:State  : 53
   yacc.py: 433:Stack  : chunk M_chunk print LPAREN . LexToken(ID,'x',1,14)
   yacc.py: 443:Action : Shift and goto state 20
   yacc.py: 408:
   yacc.py: 409:State  : 20
   yacc.py: 433:Stack  : chunk M_chunk print LPAREN ID . LexToken(RPAREN,')',1,15)
   yacc.py: 469:Action : Reduce rule [names -> ID] with ['x'] and goto state 5
   yacc.py: 503:Result : <str @ 0x7fc6917ddd00> ('x')
   yacc.py: 408:
   yacc.py: 409:State  : 5
   yacc.py: 433:Stack  : chunk M_chunk print LPAREN names . LexToken(RPAREN,')',1,15)
   yacc.py: 469:Action : Reduce rule [var -> names] with ['x'] and goto state 32
   yacc.py: 503:Result : <Symbol @ 0x7fc68a73ae90> (<SymbolTable.Symbol object at 0x7fc68a73 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 32
   yacc.py: 433:Stack  : chunk M_chunk print LPAREN var . LexToken(RPAREN,')',1,15)
   yacc.py: 469:Action : Reduce rule [prefixexp -> var] with [<Symbol @ 0x7fc68a73ae90>] and goto state 31
   yacc.py: 503:Result : <Symbol @ 0x7fc68a73ae90> (<SymbolTable.Symbol object at 0x7fc68a73 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 31
   yacc.py: 433:Stack  : chunk M_chunk print LPAREN prefixexp . LexToken(RPAREN,')',1,15)
   yacc.py: 469:Action : Reduce rule [exp -> prefixexp] with [<Symbol @ 0x7fc68a73ae90>] and goto state 121
   yacc.py: 503:Result : <Symbol @ 0x7fc68a73add0> (<SymbolTable.Symbol object at 0x7fc68a73 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 121
   yacc.py: 433:Stack  : chunk M_chunk print LPAREN exp . LexToken(RPAREN,')',1,15)
   yacc.py: 469:Action : Reduce rule [explist -> exp] with [<Symbol @ 0x7fc68a73add0>] and goto state 120
   yacc.py: 503:Result : <list @ 0x7fc68a99fb00> ([<SymbolTable.Symbol object at 0x7fc68a7 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 120
   yacc.py: 433:Stack  : chunk M_chunk print LPAREN explist . LexToken(RPAREN,')',1,15)
   yacc.py: 443:Action : Shift and goto state 185
   yacc.py: 408:
   yacc.py: 409:State  : 185
   yacc.py: 433:Stack  : chunk M_chunk print LPAREN explist RPAREN . $end
   yacc.py: 469:Action : Reduce rule [args -> LPAREN explist RPAREN] with ['(',<list @ 0x7fc68a99fb00>,')'] and goto state 81
   yacc.py: 503:Result : <list @ 0x7fc68a99fb00> ([<SymbolTable.Symbol object at 0x7fc68a7 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 81
   yacc.py: 433:Stack  : chunk M_chunk print args . $end
   yacc.py: 469:Action : Reduce rule [functioncall -> print args] with ['print',<list @ 0x7fc68a99fb00>] and goto state 13
   yacc.py: 503:Result : <Symbol @ 0x7fc68a73abd0> (<SymbolTable.Symbol object at 0x7fc68a73 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 13
   yacc.py: 433:Stack  : chunk M_chunk functioncall . $end
   yacc.py: 469:Action : Reduce rule [stat -> functioncall] with [<Symbol @ 0x7fc68a73abd0>] and goto state 114
   yacc.py: 503:Result : <Symbol @ 0x7fc68a73abd0> (<SymbolTable.Symbol object at 0x7fc68a73 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 114
   yacc.py: 433:Stack  : chunk M_chunk stat . $end
   yacc.py: 469:Action : Reduce rule [chunk -> chunk M_chunk stat] with [<Symbol @ 0x7fc68aabd610>,<Symbol @ 0x7fc68a73a8d0>,<Symbol @ 0x7fc68a73abd0>] and goto state 4
   yacc.py: 503:Result : <Symbol @ 0x7fc68a73ae90> (<SymbolTable.Symbol object at 0x7fc68a73 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 4
   yacc.py: 433:Stack  : chunk . $end
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 48
   yacc.py: 542:Result : <NoneType @ 0x7fc6915fada0> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 48
   yacc.py: 433:Stack  : chunk empty . $end
   yacc.py: 469:Action : Reduce rule [M_chunk -> empty] with [None] and goto state 46
   yacc.py: 503:Result : <Symbol @ 0x7fc68aabd610> (<SymbolTable.Symbol object at 0x7fc68aab ...)
   yacc.py: 408:
   yacc.py: 409:State  : 46
   yacc.py: 433:Stack  : chunk M_chunk . $end
   yacc.py: 469:Action : Reduce rule [sdash -> chunk M_chunk] with [<Symbol @ 0x7fc68a73ae90>,<Symbol @ 0x7fc68aabd610>] and goto state 23
   yacc.py: 503:Result : <Symbol @ 0x7fc68a73ae90> (<SymbolTable.Symbol object at 0x7fc68a73 ...)
   yacc.py: 408:
   yacc.py: 409:State  : 23
   yacc.py: 433:Stack  : sdash . $end
   yacc.py: 564:Done   : Returning <Symbol @ 0x7fc68a73ae90> (<SymbolTable.Symbol object at 0x7fc68a73 ...)
   yacc.py: 565:PLY: PARSE DEBUG END
