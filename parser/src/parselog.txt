   yacc.py:3288:Created by PLY version 3.8 (http://www.dabeaz.com/ply)
   yacc.py:3339:
   yacc.py:3340:Unused terminals:
   yacc.py:3341:
   yacc.py:3344:    NEWLINE
   yacc.py:3344:    TDASH
   yacc.py:3348:
   yacc.py:3349:Grammar
   yacc.py:3350:
   yacc.py:3352:Rule 0     S' -> sdash
   yacc.py:3352:Rule 1     sdash -> chunk
   yacc.py:3352:Rule 2     sdash -> chunk laststat
   yacc.py:3352:Rule 3     sdash -> laststat
   yacc.py:3352:Rule 4     sdash -> chunk laststat SEMI
   yacc.py:3352:Rule 5     chunk -> chunk stat
   yacc.py:3352:Rule 6     chunk -> chunk stat SEMI
   yacc.py:3352:Rule 7     chunk -> stat SEMI
   yacc.py:3352:Rule 8     chunk -> stat
   yacc.py:3352:Rule 9     block -> sdash
   yacc.py:3352:Rule 10    stat -> varlist EQUALS explist
   yacc.py:3352:Rule 11    stat -> do block end
   yacc.py:3352:Rule 12    stat -> functioncall
   yacc.py:3352:Rule 13    stat -> while exp do block end
   yacc.py:3352:Rule 14    stat -> repeat block until exp
   yacc.py:3352:Rule 15    stat -> if exp then block ifblock else block end
   yacc.py:3352:Rule 16    stat -> if exp then block ifblock end
   yacc.py:3352:Rule 17    stat -> for names EQUALS exp COMMA exp do block end
   yacc.py:3352:Rule 18    stat -> for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:3352:Rule 19    stat -> for namelist in explist do block end
   yacc.py:3352:Rule 20    stat -> local namelist
   yacc.py:3352:Rule 21    stat -> local namelist EQUALS explist
   yacc.py:3352:Rule 22    stat -> function funcname funcbody
   yacc.py:3352:Rule 23    stat -> local function names funcbody
   yacc.py:3352:Rule 24    funcbody -> LPAREN RPAREN block end
   yacc.py:3352:Rule 25    funcbody -> LPAREN parlist RPAREN block end
   yacc.py:3352:Rule 26    functioncall -> prefixexp args
   yacc.py:3352:Rule 27    args -> LPAREN RPAREN
   yacc.py:3352:Rule 28    args -> LPAREN explist RPAREN
   yacc.py:3352:Rule 29    args -> tableconstructor
   yacc.py:3352:Rule 30    args -> STRING
   yacc.py:3352:Rule 31    parlist -> namelist
   yacc.py:3352:Rule 32    parlist -> namelist comtrp
   yacc.py:3352:Rule 33    parlist -> TRPLDOTS
   yacc.py:3352:Rule 34    comtrp -> COMMA TRPLDOTS
   yacc.py:3352:Rule 35    laststat -> return retexplist
   yacc.py:3352:Rule 36    laststat -> return
   yacc.py:3352:Rule 37    laststat -> break
   yacc.py:3352:Rule 38    funcname -> names dotid COLON
   yacc.py:3352:Rule 39    funcname -> names
   yacc.py:3352:Rule 40    dotid -> SDOT names dotid
   yacc.py:3352:Rule 41    dotid -> empty
   yacc.py:3352:Rule 42    comvar -> COMMA var comvar
   yacc.py:3352:Rule 43    comvar -> empty
   yacc.py:3352:Rule 44    comid -> COMMA names comid
   yacc.py:3352:Rule 45    comid -> empty
   yacc.py:3352:Rule 46    ifblock -> ifblock elseif exp then block
   yacc.py:3352:Rule 47    ifblock -> empty
   yacc.py:3352:Rule 48    varlist -> var comvar
   yacc.py:3352:Rule 49    var -> names
   yacc.py:3352:Rule 50    var -> prefixexp LSQUARE exp RSQUARE
   yacc.py:3352:Rule 51    var -> prefixexp SDOT names
   yacc.py:3352:Rule 52    namelist -> names comid
   yacc.py:3352:Rule 53    explist -> explist COMMA exp
   yacc.py:3352:Rule 54    explist -> exp
   yacc.py:3352:Rule 55    exp -> nil
   yacc.py:3352:Rule 56    exp -> false
   yacc.py:3352:Rule 57    exp -> true
   yacc.py:3352:Rule 58    exp -> Number
   yacc.py:3352:Rule 59    exp -> STRING
   yacc.py:3352:Rule 60    exp -> TRPLDOTS
   yacc.py:3352:Rule 61    exp -> function
   yacc.py:3352:Rule 62    exp -> prefixexp
   yacc.py:3352:Rule 63    exp -> exp PLUS exp
   yacc.py:3352:Rule 64    exp -> exp MINUS exp
   yacc.py:3352:Rule 65    exp -> exp TIMES exp
   yacc.py:3352:Rule 66    exp -> exp DIVIDE exp
   yacc.py:3352:Rule 67    exp -> exp POWER exp
   yacc.py:3352:Rule 68    exp -> exp LT exp
   yacc.py:3352:Rule 69    exp -> exp LE exp
   yacc.py:3352:Rule 70    exp -> exp GT exp
   yacc.py:3352:Rule 71    exp -> exp GE exp
   yacc.py:3352:Rule 72    exp -> exp NE exp
   yacc.py:3352:Rule 73    exp -> exp CHECKEQ exp
   yacc.py:3352:Rule 74    exp -> exp and exp
   yacc.py:3352:Rule 75    exp -> exp or exp
   yacc.py:3352:Rule 76    exp -> exp MODULO exp
   yacc.py:3352:Rule 77    exp -> exp DBLDOTS exp
   yacc.py:3352:Rule 78    exp -> tableconstructor
   yacc.py:3352:Rule 79    exp -> unop exp
   yacc.py:3352:Rule 80    retexplist -> retexplist COMMA retexp
   yacc.py:3352:Rule 81    retexplist -> retexp
   yacc.py:3352:Rule 82    retexp -> nil
   yacc.py:3352:Rule 83    retexp -> false
   yacc.py:3352:Rule 84    retexp -> true
   yacc.py:3352:Rule 85    retexp -> Number
   yacc.py:3352:Rule 86    retexp -> STRING
   yacc.py:3352:Rule 87    retexp -> TRPLDOTS
   yacc.py:3352:Rule 88    retexp -> prefixexp
   yacc.py:3352:Rule 89    retexp -> exp PLUS exp
   yacc.py:3352:Rule 90    retexp -> exp MINUS exp
   yacc.py:3352:Rule 91    retexp -> exp TIMES exp
   yacc.py:3352:Rule 92    retexp -> exp DIVIDE exp
   yacc.py:3352:Rule 93    retexp -> exp POWER exp
   yacc.py:3352:Rule 94    retexp -> exp LT exp
   yacc.py:3352:Rule 95    retexp -> exp LE exp
   yacc.py:3352:Rule 96    retexp -> exp GT exp
   yacc.py:3352:Rule 97    retexp -> exp GE exp
   yacc.py:3352:Rule 98    retexp -> exp NE exp
   yacc.py:3352:Rule 99    retexp -> exp CHECKEQ exp
   yacc.py:3352:Rule 100   retexp -> exp and exp
   yacc.py:3352:Rule 101   retexp -> exp or exp
   yacc.py:3352:Rule 102   retexp -> exp MODULO exp
   yacc.py:3352:Rule 103   retexp -> exp DBLDOTS exp
   yacc.py:3352:Rule 104   retexp -> tableconstructor
   yacc.py:3352:Rule 105   retexp -> unop exp
   yacc.py:3352:Rule 106   Number -> INTEGER
   yacc.py:3352:Rule 107   Number -> FLOAT
   yacc.py:3352:Rule 108   Number -> HEX
   yacc.py:3352:Rule 109   empty -> <empty>
   yacc.py:3352:Rule 110   prefixexp -> var
   yacc.py:3352:Rule 111   prefixexp -> LPAREN exp RPAREN
   yacc.py:3352:Rule 112   prefixexp -> functioncall
   yacc.py:3352:Rule 113   unop -> MINUS
   yacc.py:3352:Rule 114   unop -> not
   yacc.py:3352:Rule 115   unop -> HASH
   yacc.py:3352:Rule 116   tableconstructor -> LCURLY fieldlist RCURLY
   yacc.py:3352:Rule 117   tableconstructor -> LCURLY RCURLY
   yacc.py:3352:Rule 118   fieldlist -> field fieldseplist fieldsep
   yacc.py:3352:Rule 119   fieldlist -> field fieldseplist
   yacc.py:3352:Rule 120   fieldseplist -> fieldseplist fieldsep field
   yacc.py:3352:Rule 121   fieldseplist -> empty
   yacc.py:3352:Rule 122   field -> LSQUARE exp RSQUARE EQUALS exp
   yacc.py:3352:Rule 123   field -> names EQUALS exp
   yacc.py:3352:Rule 124   field -> exp
   yacc.py:3352:Rule 125   fieldsep -> COMMA
   yacc.py:3352:Rule 126   fieldsep -> SEMI
   yacc.py:3352:Rule 127   names -> ID
   yacc.py:3352:Rule 128   names -> RESID
   yacc.py:3370:
   yacc.py:3371:Terminals, with rules where they appear
   yacc.py:3372:
   yacc.py:3376:CHECKEQ              : 73 99
   yacc.py:3376:COLON                : 38
   yacc.py:3376:COMMA                : 17 18 18 34 42 44 53 80 125
   yacc.py:3376:DBLDOTS              : 77 103
   yacc.py:3376:DIVIDE               : 66 92
   yacc.py:3376:EQUALS               : 10 17 18 21 122 123
   yacc.py:3376:FLOAT                : 107
   yacc.py:3376:GE                   : 71 97
   yacc.py:3376:GT                   : 70 96
   yacc.py:3376:HASH                 : 115
   yacc.py:3376:HEX                  : 108
   yacc.py:3376:ID                   : 127
   yacc.py:3376:INTEGER              : 106
   yacc.py:3376:LCURLY               : 116 117
   yacc.py:3376:LE                   : 69 95
   yacc.py:3376:LPAREN               : 24 25 27 28 111
   yacc.py:3376:LSQUARE              : 50 122
   yacc.py:3376:LT                   : 68 94
   yacc.py:3376:MINUS                : 64 90 113
   yacc.py:3376:MODULO               : 76 102
   yacc.py:3376:NE                   : 72 98
   yacc.py:3376:NEWLINE              : 
   yacc.py:3376:PLUS                 : 63 89
   yacc.py:3376:POWER                : 67 93
   yacc.py:3376:RCURLY               : 116 117
   yacc.py:3376:RESID                : 128
   yacc.py:3376:RPAREN               : 24 25 27 28 111
   yacc.py:3376:RSQUARE              : 50 122
   yacc.py:3376:SDOT                 : 40 51
   yacc.py:3376:SEMI                 : 4 6 7 126
   yacc.py:3376:STRING               : 30 59 86
   yacc.py:3376:TDASH                : 
   yacc.py:3376:TIMES                : 65 91
   yacc.py:3376:TRPLDOTS             : 33 34 60 87
   yacc.py:3376:and                  : 74 100
   yacc.py:3376:break                : 37
   yacc.py:3376:do                   : 11 13 17 18 19
   yacc.py:3376:else                 : 15
   yacc.py:3376:elseif               : 46
   yacc.py:3376:end                  : 11 13 15 16 17 18 19 24 25
   yacc.py:3376:error                : 
   yacc.py:3376:false                : 56 83
   yacc.py:3376:for                  : 17 18 19
   yacc.py:3376:function             : 22 23 61
   yacc.py:3376:if                   : 15 16
   yacc.py:3376:in                   : 19
   yacc.py:3376:local                : 20 21 23
   yacc.py:3376:nil                  : 55 82
   yacc.py:3376:not                  : 114
   yacc.py:3376:or                   : 75 101
   yacc.py:3376:repeat               : 14
   yacc.py:3376:return               : 35 36
   yacc.py:3376:then                 : 15 16 46
   yacc.py:3376:true                 : 57 84
   yacc.py:3376:until                : 14
   yacc.py:3376:while                : 13
   yacc.py:3378:
   yacc.py:3379:Nonterminals, with rules where they appear
   yacc.py:3380:
   yacc.py:3384:Number               : 58 85
   yacc.py:3384:args                 : 26
   yacc.py:3384:block                : 11 13 14 15 15 16 17 18 19 24 25 46
   yacc.py:3384:chunk                : 1 2 4 5 6
   yacc.py:3384:comid                : 44 52
   yacc.py:3384:comtrp               : 32
   yacc.py:3384:comvar               : 42 48
   yacc.py:3384:dotid                : 38 40
   yacc.py:3384:empty                : 41 43 45 47 121
   yacc.py:3384:exp                  : 13 14 15 16 17 17 18 18 18 46 50 53 54 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 79 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 103 105 111 122 122 123 124
   yacc.py:3384:explist              : 10 19 21 28 53
   yacc.py:3384:field                : 118 119 120
   yacc.py:3384:fieldlist            : 116
   yacc.py:3384:fieldsep             : 118 120
   yacc.py:3384:fieldseplist         : 118 119 120
   yacc.py:3384:funcbody             : 22 23
   yacc.py:3384:funcname             : 22
   yacc.py:3384:functioncall         : 12 112
   yacc.py:3384:ifblock              : 15 16 46
   yacc.py:3384:laststat             : 2 3 4
   yacc.py:3384:namelist             : 19 20 21 31 32
   yacc.py:3384:names                : 17 18 23 38 39 40 44 49 51 52 123
   yacc.py:3384:parlist              : 25
   yacc.py:3384:prefixexp            : 26 50 51 62 88
   yacc.py:3384:retexp               : 80 81
   yacc.py:3384:retexplist           : 35 80
   yacc.py:3384:sdash                : 9 0
   yacc.py:3384:stat                 : 5 6 7 8
   yacc.py:3384:tableconstructor     : 29 78 104
   yacc.py:3384:unop                 : 79 105
   yacc.py:3384:var                  : 42 48 110
   yacc.py:3384:varlist              : 10
   yacc.py:3385:
   yacc.py:2524:Parsing method: LALR
   yacc.py:2542:
   yacc.py:2543:state 0
   yacc.py:2544:
   yacc.py:2546:    (0) S' -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat
   yacc.py:2546:    (3) sdash -> . laststat
   yacc.py:2546:    (4) sdash -> . chunk laststat SEMI
   yacc.py:2546:    (5) chunk -> . chunk stat
   yacc.py:2546:    (6) chunk -> . chunk stat SEMI
   yacc.py:2546:    (7) chunk -> . stat SEMI
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (35) laststat -> . return retexplist
   yacc.py:2546:    (36) laststat -> . return
   yacc.py:2546:    (37) laststat -> . break
   yacc.py:2546:    (10) stat -> . varlist EQUALS explist
   yacc.py:2546:    (11) stat -> . do block end
   yacc.py:2546:    (12) stat -> . functioncall
   yacc.py:2546:    (13) stat -> . while exp do block end
   yacc.py:2546:    (14) stat -> . repeat block until exp
   yacc.py:2546:    (15) stat -> . if exp then block ifblock else block end
   yacc.py:2546:    (16) stat -> . if exp then block ifblock end
   yacc.py:2546:    (17) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (18) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (19) stat -> . for namelist in explist do block end
   yacc.py:2546:    (20) stat -> . local namelist
   yacc.py:2546:    (21) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (48) varlist -> . var comvar
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    if              shift and go to state 5
   yacc.py:2658:    for             shift and go to state 19
   yacc.py:2658:    local           shift and go to state 11
   yacc.py:2658:    function        shift and go to state 12
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 6
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    varlist                        shift and go to state 7
   yacc.py:2685:    chunk                          shift and go to state 3
   yacc.py:2685:    laststat                       shift and go to state 8
   yacc.py:2685:    var                            shift and go to state 9
   yacc.py:2685:    functioncall                   shift and go to state 10
   yacc.py:2685:    sdash                          shift and go to state 21
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 1
   yacc.py:2544:
   yacc.py:2546:    (128) names -> RESID .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    EQUALS          reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    LSQUARE         reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    SDOT            reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    LPAREN          reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    STRING          reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    LCURLY          reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    PLUS            reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    MINUS           reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    TIMES           reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    DIVIDE          reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    POWER           reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    LT              reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    LE              reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    GT              reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    GE              reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    NE              reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    CHECKEQ         reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    and             reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    or              reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    MODULO          reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    DBLDOTS         reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    RPAREN          reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    SEMI            reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    return          reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    break           reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    do              reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    while           reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    repeat          reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    if              reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    for             reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    local           reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    function        reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    ID              reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    RESID           reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    $end            reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    end             reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    until           reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    else            reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    elseif          reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    then            reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    RCURLY          reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    RSQUARE         reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    in              reduce using rule 128 (names -> RESID .)
   yacc.py:2658:    COLON           reduce using rule 128 (names -> RESID .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 2
   yacc.py:2544:
   yacc.py:2546:    (111) prefixexp -> LPAREN . exp RPAREN
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 39
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 3
   yacc.py:2544:
   yacc.py:2546:    (1) sdash -> chunk .
   yacc.py:2546:    (2) sdash -> chunk . laststat
   yacc.py:2546:    (4) sdash -> chunk . laststat SEMI
   yacc.py:2546:    (5) chunk -> chunk . stat
   yacc.py:2546:    (6) chunk -> chunk . stat SEMI
   yacc.py:2546:    (35) laststat -> . return retexplist
   yacc.py:2546:    (36) laststat -> . return
   yacc.py:2546:    (37) laststat -> . break
   yacc.py:2546:    (10) stat -> . varlist EQUALS explist
   yacc.py:2546:    (11) stat -> . do block end
   yacc.py:2546:    (12) stat -> . functioncall
   yacc.py:2546:    (13) stat -> . while exp do block end
   yacc.py:2546:    (14) stat -> . repeat block until exp
   yacc.py:2546:    (15) stat -> . if exp then block ifblock else block end
   yacc.py:2546:    (16) stat -> . if exp then block ifblock end
   yacc.py:2546:    (17) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (18) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (19) stat -> . for namelist in explist do block end
   yacc.py:2546:    (20) stat -> . local namelist
   yacc.py:2546:    (21) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (48) varlist -> . var comvar
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 1 (sdash -> chunk .)
   yacc.py:2658:    else            reduce using rule 1 (sdash -> chunk .)
   yacc.py:2658:    elseif          reduce using rule 1 (sdash -> chunk .)
   yacc.py:2658:    $end            reduce using rule 1 (sdash -> chunk .)
   yacc.py:2658:    until           reduce using rule 1 (sdash -> chunk .)
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    if              shift and go to state 5
   yacc.py:2658:    for             shift and go to state 19
   yacc.py:2658:    local           shift and go to state 11
   yacc.py:2658:    function        shift and go to state 12
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 6
   yacc.py:2685:    stat                           shift and go to state 43
   yacc.py:2685:    varlist                        shift and go to state 7
   yacc.py:2685:    laststat                       shift and go to state 42
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2685:    var                            shift and go to state 9
   yacc.py:2685:    functioncall                   shift and go to state 10
   yacc.py:2542:
   yacc.py:2543:state 4
   yacc.py:2544:
   yacc.py:2546:    (49) var -> names .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 49 (var -> names .)
   yacc.py:2658:    SDOT            reduce using rule 49 (var -> names .)
   yacc.py:2658:    LPAREN          reduce using rule 49 (var -> names .)
   yacc.py:2658:    STRING          reduce using rule 49 (var -> names .)
   yacc.py:2658:    LCURLY          reduce using rule 49 (var -> names .)
   yacc.py:2658:    PLUS            reduce using rule 49 (var -> names .)
   yacc.py:2658:    MINUS           reduce using rule 49 (var -> names .)
   yacc.py:2658:    TIMES           reduce using rule 49 (var -> names .)
   yacc.py:2658:    DIVIDE          reduce using rule 49 (var -> names .)
   yacc.py:2658:    POWER           reduce using rule 49 (var -> names .)
   yacc.py:2658:    LT              reduce using rule 49 (var -> names .)
   yacc.py:2658:    LE              reduce using rule 49 (var -> names .)
   yacc.py:2658:    GT              reduce using rule 49 (var -> names .)
   yacc.py:2658:    GE              reduce using rule 49 (var -> names .)
   yacc.py:2658:    NE              reduce using rule 49 (var -> names .)
   yacc.py:2658:    CHECKEQ         reduce using rule 49 (var -> names .)
   yacc.py:2658:    and             reduce using rule 49 (var -> names .)
   yacc.py:2658:    or              reduce using rule 49 (var -> names .)
   yacc.py:2658:    MODULO          reduce using rule 49 (var -> names .)
   yacc.py:2658:    DBLDOTS         reduce using rule 49 (var -> names .)
   yacc.py:2658:    COMMA           reduce using rule 49 (var -> names .)
   yacc.py:2658:    $end            reduce using rule 49 (var -> names .)
   yacc.py:2658:    SEMI            reduce using rule 49 (var -> names .)
   yacc.py:2658:    end             reduce using rule 49 (var -> names .)
   yacc.py:2658:    until           reduce using rule 49 (var -> names .)
   yacc.py:2658:    else            reduce using rule 49 (var -> names .)
   yacc.py:2658:    elseif          reduce using rule 49 (var -> names .)
   yacc.py:2658:    EQUALS          reduce using rule 49 (var -> names .)
   yacc.py:2658:    RPAREN          reduce using rule 49 (var -> names .)
   yacc.py:2658:    then            reduce using rule 49 (var -> names .)
   yacc.py:2658:    do              reduce using rule 49 (var -> names .)
   yacc.py:2658:    RCURLY          reduce using rule 49 (var -> names .)
   yacc.py:2658:    RSQUARE         reduce using rule 49 (var -> names .)
   yacc.py:2658:    return          reduce using rule 49 (var -> names .)
   yacc.py:2658:    break           reduce using rule 49 (var -> names .)
   yacc.py:2658:    while           reduce using rule 49 (var -> names .)
   yacc.py:2658:    repeat          reduce using rule 49 (var -> names .)
   yacc.py:2658:    if              reduce using rule 49 (var -> names .)
   yacc.py:2658:    for             reduce using rule 49 (var -> names .)
   yacc.py:2658:    local           reduce using rule 49 (var -> names .)
   yacc.py:2658:    function        reduce using rule 49 (var -> names .)
   yacc.py:2658:    ID              reduce using rule 49 (var -> names .)
   yacc.py:2658:    RESID           reduce using rule 49 (var -> names .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 5
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> if . exp then block ifblock else block end
   yacc.py:2546:    (16) stat -> if . exp then block ifblock end
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 44
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 6
   yacc.py:2544:
   yacc.py:2546:    (26) functioncall -> prefixexp . args
   yacc.py:2546:    (50) var -> prefixexp . LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> prefixexp . SDOT names
   yacc.py:2546:    (27) args -> . LPAREN RPAREN
   yacc.py:2546:    (28) args -> . LPAREN explist RPAREN
   yacc.py:2546:    (29) args -> . tableconstructor
   yacc.py:2546:    (30) args -> . STRING
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         shift and go to state 46
   yacc.py:2658:    SDOT            shift and go to state 49
   yacc.py:2658:    LPAREN          shift and go to state 48
   yacc.py:2658:    STRING          shift and go to state 50
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2660:
   yacc.py:2685:    tableconstructor               shift and go to state 45
   yacc.py:2685:    args                           shift and go to state 47
   yacc.py:2542:
   yacc.py:2543:state 7
   yacc.py:2544:
   yacc.py:2546:    (10) stat -> varlist . EQUALS explist
   yacc.py:2547:
   yacc.py:2658:    EQUALS          shift and go to state 51
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 8
   yacc.py:2544:
   yacc.py:2546:    (3) sdash -> laststat .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 3 (sdash -> laststat .)
   yacc.py:2658:    else            reduce using rule 3 (sdash -> laststat .)
   yacc.py:2658:    elseif          reduce using rule 3 (sdash -> laststat .)
   yacc.py:2658:    $end            reduce using rule 3 (sdash -> laststat .)
   yacc.py:2658:    until           reduce using rule 3 (sdash -> laststat .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 9
   yacc.py:2544:
   yacc.py:2546:    (48) varlist -> var . comvar
   yacc.py:2546:    (110) prefixexp -> var .
   yacc.py:2546:    (42) comvar -> . COMMA var comvar
   yacc.py:2546:    (43) comvar -> . empty
   yacc.py:2546:    (109) empty -> .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    SDOT            reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    LPAREN          reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    STRING          reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    LCURLY          reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    COMMA           shift and go to state 52
   yacc.py:2658:    EQUALS          reduce using rule 109 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    comvar                         shift and go to state 53
   yacc.py:2685:    empty                          shift and go to state 54
   yacc.py:2542:
   yacc.py:2543:state 10
   yacc.py:2544:
   yacc.py:2546:    (12) stat -> functioncall .
   yacc.py:2546:    (112) prefixexp -> functioncall .
   yacc.py:2547:
   yacc.py:2602:  ! reduce/reduce conflict for LPAREN resolved using rule 12 (stat -> functioncall .)
   yacc.py:2658:    SEMI            reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    return          reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    break           reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    do              reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    while           reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    repeat          reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    if              reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    for             reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    local           reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    function        reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    LPAREN          reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    ID              reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    RESID           reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    end             reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    else            reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    elseif          reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    $end            reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    until           reduce using rule 12 (stat -> functioncall .)
   yacc.py:2658:    LSQUARE         reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    SDOT            reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    STRING          reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    LCURLY          reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2660:
   yacc.py:2667:  ! LPAREN          [ reduce using rule 112 (prefixexp -> functioncall .) ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 11
   yacc.py:2544:
   yacc.py:2546:    (20) stat -> local . namelist
   yacc.py:2546:    (21) stat -> local . namelist EQUALS explist
   yacc.py:2546:    (23) stat -> local . function names funcbody
   yacc.py:2546:    (52) namelist -> . names comid
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    function        shift and go to state 55
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    namelist                       shift and go to state 56
   yacc.py:2685:    names                          shift and go to state 57
   yacc.py:2542:
   yacc.py:2543:state 12
   yacc.py:2544:
   yacc.py:2546:    (22) stat -> function . funcname funcbody
   yacc.py:2546:    (38) funcname -> . names dotid COLON
   yacc.py:2546:    (39) funcname -> . names
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    names                          shift and go to state 59
   yacc.py:2685:    funcname                       shift and go to state 58
   yacc.py:2542:
   yacc.py:2543:state 13
   yacc.py:2544:
   yacc.py:2546:    (11) stat -> do . block end
   yacc.py:2546:    (9) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat
   yacc.py:2546:    (3) sdash -> . laststat
   yacc.py:2546:    (4) sdash -> . chunk laststat SEMI
   yacc.py:2546:    (5) chunk -> . chunk stat
   yacc.py:2546:    (6) chunk -> . chunk stat SEMI
   yacc.py:2546:    (7) chunk -> . stat SEMI
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (35) laststat -> . return retexplist
   yacc.py:2546:    (36) laststat -> . return
   yacc.py:2546:    (37) laststat -> . break
   yacc.py:2546:    (10) stat -> . varlist EQUALS explist
   yacc.py:2546:    (11) stat -> . do block end
   yacc.py:2546:    (12) stat -> . functioncall
   yacc.py:2546:    (13) stat -> . while exp do block end
   yacc.py:2546:    (14) stat -> . repeat block until exp
   yacc.py:2546:    (15) stat -> . if exp then block ifblock else block end
   yacc.py:2546:    (16) stat -> . if exp then block ifblock end
   yacc.py:2546:    (17) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (18) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (19) stat -> . for namelist in explist do block end
   yacc.py:2546:    (20) stat -> . local namelist
   yacc.py:2546:    (21) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (48) varlist -> . var comvar
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    if              shift and go to state 5
   yacc.py:2658:    for             shift and go to state 19
   yacc.py:2658:    local           shift and go to state 11
   yacc.py:2658:    function        shift and go to state 12
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 6
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    varlist                        shift and go to state 7
   yacc.py:2685:    chunk                          shift and go to state 3
   yacc.py:2685:    laststat                       shift and go to state 8
   yacc.py:2685:    block                          shift and go to state 61
   yacc.py:2685:    var                            shift and go to state 9
   yacc.py:2685:    functioncall                   shift and go to state 10
   yacc.py:2685:    sdash                          shift and go to state 60
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 14
   yacc.py:2544:
   yacc.py:2546:    (7) chunk -> stat . SEMI
   yacc.py:2546:    (8) chunk -> stat .
   yacc.py:2547:
   yacc.py:2658:    SEMI            shift and go to state 62
   yacc.py:2658:    return          reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    break           reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    do              reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    while           reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    repeat          reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    if              reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    for             reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    local           reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    function        reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    LPAREN          reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    ID              reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    RESID           reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    end             reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    else            reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    elseif          reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    until           reduce using rule 8 (chunk -> stat .)
   yacc.py:2658:    $end            reduce using rule 8 (chunk -> stat .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 15
   yacc.py:2544:
   yacc.py:2546:    (14) stat -> repeat . block until exp
   yacc.py:2546:    (9) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat
   yacc.py:2546:    (3) sdash -> . laststat
   yacc.py:2546:    (4) sdash -> . chunk laststat SEMI
   yacc.py:2546:    (5) chunk -> . chunk stat
   yacc.py:2546:    (6) chunk -> . chunk stat SEMI
   yacc.py:2546:    (7) chunk -> . stat SEMI
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (35) laststat -> . return retexplist
   yacc.py:2546:    (36) laststat -> . return
   yacc.py:2546:    (37) laststat -> . break
   yacc.py:2546:    (10) stat -> . varlist EQUALS explist
   yacc.py:2546:    (11) stat -> . do block end
   yacc.py:2546:    (12) stat -> . functioncall
   yacc.py:2546:    (13) stat -> . while exp do block end
   yacc.py:2546:    (14) stat -> . repeat block until exp
   yacc.py:2546:    (15) stat -> . if exp then block ifblock else block end
   yacc.py:2546:    (16) stat -> . if exp then block ifblock end
   yacc.py:2546:    (17) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (18) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (19) stat -> . for namelist in explist do block end
   yacc.py:2546:    (20) stat -> . local namelist
   yacc.py:2546:    (21) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (48) varlist -> . var comvar
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    if              shift and go to state 5
   yacc.py:2658:    for             shift and go to state 19
   yacc.py:2658:    local           shift and go to state 11
   yacc.py:2658:    function        shift and go to state 12
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 6
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    varlist                        shift and go to state 7
   yacc.py:2685:    chunk                          shift and go to state 3
   yacc.py:2685:    laststat                       shift and go to state 8
   yacc.py:2685:    sdash                          shift and go to state 60
   yacc.py:2685:    var                            shift and go to state 9
   yacc.py:2685:    functioncall                   shift and go to state 10
   yacc.py:2685:    block                          shift and go to state 63
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 16
   yacc.py:2544:
   yacc.py:2546:    (35) laststat -> return . retexplist
   yacc.py:2546:    (36) laststat -> return .
   yacc.py:2546:    (80) retexplist -> . retexplist COMMA retexp
   yacc.py:2546:    (81) retexplist -> . retexp
   yacc.py:2546:    (82) retexp -> . nil
   yacc.py:2546:    (83) retexp -> . false
   yacc.py:2546:    (84) retexp -> . true
   yacc.py:2546:    (85) retexp -> . Number
   yacc.py:2546:    (86) retexp -> . STRING
   yacc.py:2546:    (87) retexp -> . TRPLDOTS
   yacc.py:2546:    (88) retexp -> . prefixexp
   yacc.py:2546:    (89) retexp -> . exp PLUS exp
   yacc.py:2546:    (90) retexp -> . exp MINUS exp
   yacc.py:2546:    (91) retexp -> . exp TIMES exp
   yacc.py:2546:    (92) retexp -> . exp DIVIDE exp
   yacc.py:2546:    (93) retexp -> . exp POWER exp
   yacc.py:2546:    (94) retexp -> . exp LT exp
   yacc.py:2546:    (95) retexp -> . exp LE exp
   yacc.py:2546:    (96) retexp -> . exp GT exp
   yacc.py:2546:    (97) retexp -> . exp GE exp
   yacc.py:2546:    (98) retexp -> . exp NE exp
   yacc.py:2546:    (99) retexp -> . exp CHECKEQ exp
   yacc.py:2546:    (100) retexp -> . exp and exp
   yacc.py:2546:    (101) retexp -> . exp or exp
   yacc.py:2546:    (102) retexp -> . exp MODULO exp
   yacc.py:2546:    (103) retexp -> . exp DBLDOTS exp
   yacc.py:2546:    (104) retexp -> . tableconstructor
   yacc.py:2546:    (105) retexp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    else            reduce using rule 36 (laststat -> return .)
   yacc.py:2658:    end             reduce using rule 36 (laststat -> return .)
   yacc.py:2658:    elseif          reduce using rule 36 (laststat -> return .)
   yacc.py:2658:    $end            reduce using rule 36 (laststat -> return .)
   yacc.py:2658:    SEMI            reduce using rule 36 (laststat -> return .)
   yacc.py:2658:    until           reduce using rule 36 (laststat -> return .)
   yacc.py:2658:    nil             shift and go to state 70
   yacc.py:2658:    false           shift and go to state 65
   yacc.py:2658:    true            shift and go to state 71
   yacc.py:2658:    STRING          shift and go to state 69
   yacc.py:2658:    TRPLDOTS        shift and go to state 66
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 67
   yacc.py:2685:    tableconstructor               shift and go to state 64
   yacc.py:2685:    retexp                         shift and go to state 68
   yacc.py:2685:    Number                         shift and go to state 72
   yacc.py:2685:    unop                           shift and go to state 75
   yacc.py:2685:    retexplist                     shift and go to state 73
   yacc.py:2685:    exp                            shift and go to state 74
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 17
   yacc.py:2544:
   yacc.py:2546:    (37) laststat -> break .
   yacc.py:2547:
   yacc.py:2658:    else            reduce using rule 37 (laststat -> break .)
   yacc.py:2658:    end             reduce using rule 37 (laststat -> break .)
   yacc.py:2658:    elseif          reduce using rule 37 (laststat -> break .)
   yacc.py:2658:    $end            reduce using rule 37 (laststat -> break .)
   yacc.py:2658:    SEMI            reduce using rule 37 (laststat -> break .)
   yacc.py:2658:    until           reduce using rule 37 (laststat -> break .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 18
   yacc.py:2544:
   yacc.py:2546:    (127) names -> ID .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 127 (names -> ID .)
   yacc.py:2658:    EQUALS          reduce using rule 127 (names -> ID .)
   yacc.py:2658:    LSQUARE         reduce using rule 127 (names -> ID .)
   yacc.py:2658:    SDOT            reduce using rule 127 (names -> ID .)
   yacc.py:2658:    LPAREN          reduce using rule 127 (names -> ID .)
   yacc.py:2658:    STRING          reduce using rule 127 (names -> ID .)
   yacc.py:2658:    LCURLY          reduce using rule 127 (names -> ID .)
   yacc.py:2658:    PLUS            reduce using rule 127 (names -> ID .)
   yacc.py:2658:    MINUS           reduce using rule 127 (names -> ID .)
   yacc.py:2658:    TIMES           reduce using rule 127 (names -> ID .)
   yacc.py:2658:    DIVIDE          reduce using rule 127 (names -> ID .)
   yacc.py:2658:    POWER           reduce using rule 127 (names -> ID .)
   yacc.py:2658:    LT              reduce using rule 127 (names -> ID .)
   yacc.py:2658:    LE              reduce using rule 127 (names -> ID .)
   yacc.py:2658:    GT              reduce using rule 127 (names -> ID .)
   yacc.py:2658:    GE              reduce using rule 127 (names -> ID .)
   yacc.py:2658:    NE              reduce using rule 127 (names -> ID .)
   yacc.py:2658:    CHECKEQ         reduce using rule 127 (names -> ID .)
   yacc.py:2658:    and             reduce using rule 127 (names -> ID .)
   yacc.py:2658:    or              reduce using rule 127 (names -> ID .)
   yacc.py:2658:    MODULO          reduce using rule 127 (names -> ID .)
   yacc.py:2658:    DBLDOTS         reduce using rule 127 (names -> ID .)
   yacc.py:2658:    RPAREN          reduce using rule 127 (names -> ID .)
   yacc.py:2658:    SEMI            reduce using rule 127 (names -> ID .)
   yacc.py:2658:    return          reduce using rule 127 (names -> ID .)
   yacc.py:2658:    break           reduce using rule 127 (names -> ID .)
   yacc.py:2658:    do              reduce using rule 127 (names -> ID .)
   yacc.py:2658:    while           reduce using rule 127 (names -> ID .)
   yacc.py:2658:    repeat          reduce using rule 127 (names -> ID .)
   yacc.py:2658:    if              reduce using rule 127 (names -> ID .)
   yacc.py:2658:    for             reduce using rule 127 (names -> ID .)
   yacc.py:2658:    local           reduce using rule 127 (names -> ID .)
   yacc.py:2658:    function        reduce using rule 127 (names -> ID .)
   yacc.py:2658:    ID              reduce using rule 127 (names -> ID .)
   yacc.py:2658:    RESID           reduce using rule 127 (names -> ID .)
   yacc.py:2658:    $end            reduce using rule 127 (names -> ID .)
   yacc.py:2658:    end             reduce using rule 127 (names -> ID .)
   yacc.py:2658:    until           reduce using rule 127 (names -> ID .)
   yacc.py:2658:    else            reduce using rule 127 (names -> ID .)
   yacc.py:2658:    elseif          reduce using rule 127 (names -> ID .)
   yacc.py:2658:    then            reduce using rule 127 (names -> ID .)
   yacc.py:2658:    RCURLY          reduce using rule 127 (names -> ID .)
   yacc.py:2658:    RSQUARE         reduce using rule 127 (names -> ID .)
   yacc.py:2658:    in              reduce using rule 127 (names -> ID .)
   yacc.py:2658:    COLON           reduce using rule 127 (names -> ID .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 19
   yacc.py:2544:
   yacc.py:2546:    (17) stat -> for . names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (18) stat -> for . names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (19) stat -> for . namelist in explist do block end
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2546:    (52) namelist -> . names comid
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    namelist                       shift and go to state 76
   yacc.py:2685:    names                          shift and go to state 77
   yacc.py:2542:
   yacc.py:2543:state 20
   yacc.py:2544:
   yacc.py:2546:    (13) stat -> while . exp do block end
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 78
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 21
   yacc.py:2544:
   yacc.py:2546:    (0) S' -> sdash .
   yacc.py:2547:
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 22
   yacc.py:2544:
   yacc.py:2546:    (78) exp -> tableconstructor .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    MINUS           reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    TIMES           reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    DIVIDE          reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    POWER           reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    LT              reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    LE              reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    GT              reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    GE              reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    NE              reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    CHECKEQ         reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    and             reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    or              reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    MODULO          reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    DBLDOTS         reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    RPAREN          reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    then            reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    do              reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    COMMA           reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    SEMI            reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    RCURLY          reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    RSQUARE         reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    return          reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    break           reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    while           reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    repeat          reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    if              reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    for             reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    local           reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    function        reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    LPAREN          reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    ID              reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    RESID           reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    $end            reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    end             reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    until           reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    else            reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    elseif          reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 23
   yacc.py:2544:
   yacc.py:2546:    (56) exp -> false .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 56 (exp -> false .)
   yacc.py:2658:    MINUS           reduce using rule 56 (exp -> false .)
   yacc.py:2658:    TIMES           reduce using rule 56 (exp -> false .)
   yacc.py:2658:    DIVIDE          reduce using rule 56 (exp -> false .)
   yacc.py:2658:    POWER           reduce using rule 56 (exp -> false .)
   yacc.py:2658:    LT              reduce using rule 56 (exp -> false .)
   yacc.py:2658:    LE              reduce using rule 56 (exp -> false .)
   yacc.py:2658:    GT              reduce using rule 56 (exp -> false .)
   yacc.py:2658:    GE              reduce using rule 56 (exp -> false .)
   yacc.py:2658:    NE              reduce using rule 56 (exp -> false .)
   yacc.py:2658:    CHECKEQ         reduce using rule 56 (exp -> false .)
   yacc.py:2658:    and             reduce using rule 56 (exp -> false .)
   yacc.py:2658:    or              reduce using rule 56 (exp -> false .)
   yacc.py:2658:    MODULO          reduce using rule 56 (exp -> false .)
   yacc.py:2658:    DBLDOTS         reduce using rule 56 (exp -> false .)
   yacc.py:2658:    RPAREN          reduce using rule 56 (exp -> false .)
   yacc.py:2658:    then            reduce using rule 56 (exp -> false .)
   yacc.py:2658:    do              reduce using rule 56 (exp -> false .)
   yacc.py:2658:    COMMA           reduce using rule 56 (exp -> false .)
   yacc.py:2658:    SEMI            reduce using rule 56 (exp -> false .)
   yacc.py:2658:    RCURLY          reduce using rule 56 (exp -> false .)
   yacc.py:2658:    RSQUARE         reduce using rule 56 (exp -> false .)
   yacc.py:2658:    return          reduce using rule 56 (exp -> false .)
   yacc.py:2658:    break           reduce using rule 56 (exp -> false .)
   yacc.py:2658:    while           reduce using rule 56 (exp -> false .)
   yacc.py:2658:    repeat          reduce using rule 56 (exp -> false .)
   yacc.py:2658:    if              reduce using rule 56 (exp -> false .)
   yacc.py:2658:    for             reduce using rule 56 (exp -> false .)
   yacc.py:2658:    local           reduce using rule 56 (exp -> false .)
   yacc.py:2658:    function        reduce using rule 56 (exp -> false .)
   yacc.py:2658:    LPAREN          reduce using rule 56 (exp -> false .)
   yacc.py:2658:    ID              reduce using rule 56 (exp -> false .)
   yacc.py:2658:    RESID           reduce using rule 56 (exp -> false .)
   yacc.py:2658:    $end            reduce using rule 56 (exp -> false .)
   yacc.py:2658:    end             reduce using rule 56 (exp -> false .)
   yacc.py:2658:    until           reduce using rule 56 (exp -> false .)
   yacc.py:2658:    else            reduce using rule 56 (exp -> false .)
   yacc.py:2658:    elseif          reduce using rule 56 (exp -> false .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 24
   yacc.py:2544:
   yacc.py:2546:    (116) tableconstructor -> LCURLY . fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> LCURLY . RCURLY
   yacc.py:2546:    (118) fieldlist -> . field fieldseplist fieldsep
   yacc.py:2546:    (119) fieldlist -> . field fieldseplist
   yacc.py:2546:    (122) field -> . LSQUARE exp RSQUARE EQUALS exp
   yacc.py:2546:    (123) field -> . names EQUALS exp
   yacc.py:2546:    (124) field -> . exp
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2547:
   yacc.py:2658:    RCURLY          shift and go to state 80
   yacc.py:2658:    LSQUARE         shift and go to state 84
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    field                          shift and go to state 81
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    fieldlist                      shift and go to state 82
   yacc.py:2685:    exp                            shift and go to state 83
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 79
   yacc.py:2542:
   yacc.py:2543:state 25
   yacc.py:2544:
   yacc.py:2546:    (115) unop -> HASH .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 115 (unop -> HASH .)
   yacc.py:2658:    false           reduce using rule 115 (unop -> HASH .)
   yacc.py:2658:    true            reduce using rule 115 (unop -> HASH .)
   yacc.py:2658:    STRING          reduce using rule 115 (unop -> HASH .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 115 (unop -> HASH .)
   yacc.py:2658:    function        reduce using rule 115 (unop -> HASH .)
   yacc.py:2658:    INTEGER         reduce using rule 115 (unop -> HASH .)
   yacc.py:2658:    FLOAT           reduce using rule 115 (unop -> HASH .)
   yacc.py:2658:    HEX             reduce using rule 115 (unop -> HASH .)
   yacc.py:2658:    LPAREN          reduce using rule 115 (unop -> HASH .)
   yacc.py:2658:    LCURLY          reduce using rule 115 (unop -> HASH .)
   yacc.py:2658:    MINUS           reduce using rule 115 (unop -> HASH .)
   yacc.py:2658:    not             reduce using rule 115 (unop -> HASH .)
   yacc.py:2658:    HASH            reduce using rule 115 (unop -> HASH .)
   yacc.py:2658:    ID              reduce using rule 115 (unop -> HASH .)
   yacc.py:2658:    RESID           reduce using rule 115 (unop -> HASH .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 26
   yacc.py:2544:
   yacc.py:2546:    (113) unop -> MINUS .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 113 (unop -> MINUS .)
   yacc.py:2658:    false           reduce using rule 113 (unop -> MINUS .)
   yacc.py:2658:    true            reduce using rule 113 (unop -> MINUS .)
   yacc.py:2658:    STRING          reduce using rule 113 (unop -> MINUS .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 113 (unop -> MINUS .)
   yacc.py:2658:    function        reduce using rule 113 (unop -> MINUS .)
   yacc.py:2658:    INTEGER         reduce using rule 113 (unop -> MINUS .)
   yacc.py:2658:    FLOAT           reduce using rule 113 (unop -> MINUS .)
   yacc.py:2658:    HEX             reduce using rule 113 (unop -> MINUS .)
   yacc.py:2658:    LPAREN          reduce using rule 113 (unop -> MINUS .)
   yacc.py:2658:    LCURLY          reduce using rule 113 (unop -> MINUS .)
   yacc.py:2658:    MINUS           reduce using rule 113 (unop -> MINUS .)
   yacc.py:2658:    not             reduce using rule 113 (unop -> MINUS .)
   yacc.py:2658:    HASH            reduce using rule 113 (unop -> MINUS .)
   yacc.py:2658:    ID              reduce using rule 113 (unop -> MINUS .)
   yacc.py:2658:    RESID           reduce using rule 113 (unop -> MINUS .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 27
   yacc.py:2544:
   yacc.py:2546:    (59) exp -> STRING .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    MINUS           reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    TIMES           reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    DIVIDE          reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    POWER           reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    LT              reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    LE              reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    GT              reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    GE              reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    NE              reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    CHECKEQ         reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    and             reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    or              reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    MODULO          reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    DBLDOTS         reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    RPAREN          reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    then            reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    do              reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    COMMA           reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    SEMI            reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    RCURLY          reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    RSQUARE         reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    return          reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    break           reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    while           reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    repeat          reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    if              reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    for             reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    local           reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    function        reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    LPAREN          reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    ID              reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    RESID           reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    $end            reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    end             reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    until           reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    else            reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    elseif          reduce using rule 59 (exp -> STRING .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 28
   yacc.py:2544:
   yacc.py:2546:    (62) exp -> prefixexp .
   yacc.py:2546:    (50) var -> prefixexp . LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> prefixexp . SDOT names
   yacc.py:2546:    (26) functioncall -> prefixexp . args
   yacc.py:2546:    (27) args -> . LPAREN RPAREN
   yacc.py:2546:    (28) args -> . LPAREN explist RPAREN
   yacc.py:2546:    (29) args -> . tableconstructor
   yacc.py:2546:    (30) args -> . STRING
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2547:
   yacc.py:2637:  ! shift/reduce conflict for LPAREN resolved as shift
   yacc.py:2658:    PLUS            reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    MINUS           reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    TIMES           reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    DIVIDE          reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    POWER           reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    LT              reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    LE              reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    GT              reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    GE              reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    NE              reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    and             reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    or              reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    MODULO          reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    RPAREN          reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    then            reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    do              reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    COMMA           reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    SEMI            reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    RCURLY          reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    RSQUARE         reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    return          reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    break           reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    while           reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    repeat          reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    if              reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    for             reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    local           reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    function        reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    ID              reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    RESID           reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    $end            reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    end             reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    until           reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    else            reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    elseif          reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    LSQUARE         shift and go to state 46
   yacc.py:2658:    SDOT            shift and go to state 49
   yacc.py:2658:    LPAREN          shift and go to state 48
   yacc.py:2658:    STRING          shift and go to state 50
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2660:
   yacc.py:2667:  ! LPAREN          [ reduce using rule 62 (exp -> prefixexp .) ]
   yacc.py:2671:
   yacc.py:2685:    tableconstructor               shift and go to state 45
   yacc.py:2685:    args                           shift and go to state 47
   yacc.py:2542:
   yacc.py:2543:state 29
   yacc.py:2544:
   yacc.py:2546:    (110) prefixexp -> var .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    SDOT            reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    LPAREN          reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    STRING          reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    LCURLY          reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    PLUS            reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    MINUS           reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    TIMES           reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    DIVIDE          reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    POWER           reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    LT              reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    LE              reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    GT              reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    GE              reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    NE              reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    CHECKEQ         reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    and             reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    or              reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    MODULO          reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    DBLDOTS         reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    RPAREN          reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    COMMA           reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    $end            reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    SEMI            reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    end             reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    until           reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    else            reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    elseif          reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    return          reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    break           reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    do              reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    while           reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    repeat          reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    if              reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    for             reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    local           reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    function        reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    ID              reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    RESID           reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    then            reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    RCURLY          reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    RSQUARE         reduce using rule 110 (prefixexp -> var .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 30
   yacc.py:2544:
   yacc.py:2546:    (106) Number -> INTEGER .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    MINUS           reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    TIMES           reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    DIVIDE          reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    POWER           reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    LT              reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    LE              reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    GT              reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    GE              reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    NE              reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    CHECKEQ         reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    and             reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    or              reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    MODULO          reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    DBLDOTS         reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    COMMA           reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    $end            reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    SEMI            reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    end             reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    until           reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    else            reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    elseif          reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    RPAREN          reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    then            reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    do              reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    RCURLY          reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    RSQUARE         reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    return          reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    break           reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    while           reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    repeat          reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    if              reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    for             reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    local           reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    function        reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    LPAREN          reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    ID              reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2658:    RESID           reduce using rule 106 (Number -> INTEGER .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 31
   yacc.py:2544:
   yacc.py:2546:    (61) exp -> function .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 61 (exp -> function .)
   yacc.py:2658:    MINUS           reduce using rule 61 (exp -> function .)
   yacc.py:2658:    TIMES           reduce using rule 61 (exp -> function .)
   yacc.py:2658:    DIVIDE          reduce using rule 61 (exp -> function .)
   yacc.py:2658:    POWER           reduce using rule 61 (exp -> function .)
   yacc.py:2658:    LT              reduce using rule 61 (exp -> function .)
   yacc.py:2658:    LE              reduce using rule 61 (exp -> function .)
   yacc.py:2658:    GT              reduce using rule 61 (exp -> function .)
   yacc.py:2658:    GE              reduce using rule 61 (exp -> function .)
   yacc.py:2658:    NE              reduce using rule 61 (exp -> function .)
   yacc.py:2658:    CHECKEQ         reduce using rule 61 (exp -> function .)
   yacc.py:2658:    and             reduce using rule 61 (exp -> function .)
   yacc.py:2658:    or              reduce using rule 61 (exp -> function .)
   yacc.py:2658:    MODULO          reduce using rule 61 (exp -> function .)
   yacc.py:2658:    DBLDOTS         reduce using rule 61 (exp -> function .)
   yacc.py:2658:    RPAREN          reduce using rule 61 (exp -> function .)
   yacc.py:2658:    then            reduce using rule 61 (exp -> function .)
   yacc.py:2658:    do              reduce using rule 61 (exp -> function .)
   yacc.py:2658:    COMMA           reduce using rule 61 (exp -> function .)
   yacc.py:2658:    SEMI            reduce using rule 61 (exp -> function .)
   yacc.py:2658:    RCURLY          reduce using rule 61 (exp -> function .)
   yacc.py:2658:    RSQUARE         reduce using rule 61 (exp -> function .)
   yacc.py:2658:    return          reduce using rule 61 (exp -> function .)
   yacc.py:2658:    break           reduce using rule 61 (exp -> function .)
   yacc.py:2658:    while           reduce using rule 61 (exp -> function .)
   yacc.py:2658:    repeat          reduce using rule 61 (exp -> function .)
   yacc.py:2658:    if              reduce using rule 61 (exp -> function .)
   yacc.py:2658:    for             reduce using rule 61 (exp -> function .)
   yacc.py:2658:    local           reduce using rule 61 (exp -> function .)
   yacc.py:2658:    function        reduce using rule 61 (exp -> function .)
   yacc.py:2658:    LPAREN          reduce using rule 61 (exp -> function .)
   yacc.py:2658:    ID              reduce using rule 61 (exp -> function .)
   yacc.py:2658:    RESID           reduce using rule 61 (exp -> function .)
   yacc.py:2658:    $end            reduce using rule 61 (exp -> function .)
   yacc.py:2658:    end             reduce using rule 61 (exp -> function .)
   yacc.py:2658:    until           reduce using rule 61 (exp -> function .)
   yacc.py:2658:    else            reduce using rule 61 (exp -> function .)
   yacc.py:2658:    elseif          reduce using rule 61 (exp -> function .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 32
   yacc.py:2544:
   yacc.py:2546:    (55) exp -> nil .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    MINUS           reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    TIMES           reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    DIVIDE          reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    POWER           reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    LT              reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    LE              reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    GT              reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    GE              reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    NE              reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    CHECKEQ         reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    and             reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    or              reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    MODULO          reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    DBLDOTS         reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    RPAREN          reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    then            reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    do              reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    COMMA           reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    SEMI            reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    RCURLY          reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    RSQUARE         reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    return          reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    break           reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    while           reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    repeat          reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    if              reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    for             reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    local           reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    function        reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    LPAREN          reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    ID              reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    RESID           reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    $end            reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    end             reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    until           reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    else            reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    elseif          reduce using rule 55 (exp -> nil .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 33
   yacc.py:2544:
   yacc.py:2546:    (108) Number -> HEX .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    MINUS           reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    TIMES           reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    DIVIDE          reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    POWER           reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    LT              reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    LE              reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    GT              reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    GE              reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    NE              reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    CHECKEQ         reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    and             reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    or              reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    MODULO          reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    DBLDOTS         reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    COMMA           reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    $end            reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    SEMI            reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    end             reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    until           reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    else            reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    elseif          reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    RPAREN          reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    then            reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    do              reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    RCURLY          reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    RSQUARE         reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    return          reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    break           reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    while           reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    repeat          reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    if              reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    for             reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    local           reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    function        reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    LPAREN          reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    ID              reduce using rule 108 (Number -> HEX .)
   yacc.py:2658:    RESID           reduce using rule 108 (Number -> HEX .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 34
   yacc.py:2544:
   yacc.py:2546:    (114) unop -> not .
   yacc.py:2547:
   yacc.py:2658:    nil             reduce using rule 114 (unop -> not .)
   yacc.py:2658:    false           reduce using rule 114 (unop -> not .)
   yacc.py:2658:    true            reduce using rule 114 (unop -> not .)
   yacc.py:2658:    STRING          reduce using rule 114 (unop -> not .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 114 (unop -> not .)
   yacc.py:2658:    function        reduce using rule 114 (unop -> not .)
   yacc.py:2658:    INTEGER         reduce using rule 114 (unop -> not .)
   yacc.py:2658:    FLOAT           reduce using rule 114 (unop -> not .)
   yacc.py:2658:    HEX             reduce using rule 114 (unop -> not .)
   yacc.py:2658:    LPAREN          reduce using rule 114 (unop -> not .)
   yacc.py:2658:    LCURLY          reduce using rule 114 (unop -> not .)
   yacc.py:2658:    MINUS           reduce using rule 114 (unop -> not .)
   yacc.py:2658:    not             reduce using rule 114 (unop -> not .)
   yacc.py:2658:    HASH            reduce using rule 114 (unop -> not .)
   yacc.py:2658:    ID              reduce using rule 114 (unop -> not .)
   yacc.py:2658:    RESID           reduce using rule 114 (unop -> not .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 35
   yacc.py:2544:
   yacc.py:2546:    (57) exp -> true .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 57 (exp -> true .)
   yacc.py:2658:    MINUS           reduce using rule 57 (exp -> true .)
   yacc.py:2658:    TIMES           reduce using rule 57 (exp -> true .)
   yacc.py:2658:    DIVIDE          reduce using rule 57 (exp -> true .)
   yacc.py:2658:    POWER           reduce using rule 57 (exp -> true .)
   yacc.py:2658:    LT              reduce using rule 57 (exp -> true .)
   yacc.py:2658:    LE              reduce using rule 57 (exp -> true .)
   yacc.py:2658:    GT              reduce using rule 57 (exp -> true .)
   yacc.py:2658:    GE              reduce using rule 57 (exp -> true .)
   yacc.py:2658:    NE              reduce using rule 57 (exp -> true .)
   yacc.py:2658:    CHECKEQ         reduce using rule 57 (exp -> true .)
   yacc.py:2658:    and             reduce using rule 57 (exp -> true .)
   yacc.py:2658:    or              reduce using rule 57 (exp -> true .)
   yacc.py:2658:    MODULO          reduce using rule 57 (exp -> true .)
   yacc.py:2658:    DBLDOTS         reduce using rule 57 (exp -> true .)
   yacc.py:2658:    RPAREN          reduce using rule 57 (exp -> true .)
   yacc.py:2658:    then            reduce using rule 57 (exp -> true .)
   yacc.py:2658:    do              reduce using rule 57 (exp -> true .)
   yacc.py:2658:    COMMA           reduce using rule 57 (exp -> true .)
   yacc.py:2658:    SEMI            reduce using rule 57 (exp -> true .)
   yacc.py:2658:    RCURLY          reduce using rule 57 (exp -> true .)
   yacc.py:2658:    RSQUARE         reduce using rule 57 (exp -> true .)
   yacc.py:2658:    return          reduce using rule 57 (exp -> true .)
   yacc.py:2658:    break           reduce using rule 57 (exp -> true .)
   yacc.py:2658:    while           reduce using rule 57 (exp -> true .)
   yacc.py:2658:    repeat          reduce using rule 57 (exp -> true .)
   yacc.py:2658:    if              reduce using rule 57 (exp -> true .)
   yacc.py:2658:    for             reduce using rule 57 (exp -> true .)
   yacc.py:2658:    local           reduce using rule 57 (exp -> true .)
   yacc.py:2658:    function        reduce using rule 57 (exp -> true .)
   yacc.py:2658:    LPAREN          reduce using rule 57 (exp -> true .)
   yacc.py:2658:    ID              reduce using rule 57 (exp -> true .)
   yacc.py:2658:    RESID           reduce using rule 57 (exp -> true .)
   yacc.py:2658:    $end            reduce using rule 57 (exp -> true .)
   yacc.py:2658:    end             reduce using rule 57 (exp -> true .)
   yacc.py:2658:    until           reduce using rule 57 (exp -> true .)
   yacc.py:2658:    else            reduce using rule 57 (exp -> true .)
   yacc.py:2658:    elseif          reduce using rule 57 (exp -> true .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 36
   yacc.py:2544:
   yacc.py:2546:    (107) Number -> FLOAT .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    MINUS           reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    TIMES           reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    DIVIDE          reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    POWER           reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    LT              reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    LE              reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    GT              reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    GE              reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    NE              reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    CHECKEQ         reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    and             reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    or              reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    MODULO          reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    DBLDOTS         reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    COMMA           reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    $end            reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    SEMI            reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    end             reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    until           reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    else            reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    elseif          reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    RPAREN          reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    then            reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    do              reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    RCURLY          reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    RSQUARE         reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    return          reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    break           reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    while           reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    repeat          reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    if              reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    for             reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    local           reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    function        reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    LPAREN          reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    ID              reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2658:    RESID           reduce using rule 107 (Number -> FLOAT .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 37
   yacc.py:2544:
   yacc.py:2546:    (58) exp -> Number .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    MINUS           reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    TIMES           reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    DIVIDE          reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    POWER           reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    LT              reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    LE              reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    GT              reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    GE              reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    NE              reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    CHECKEQ         reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    and             reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    or              reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    MODULO          reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    DBLDOTS         reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    RPAREN          reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    then            reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    do              reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    COMMA           reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    SEMI            reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    RCURLY          reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    RSQUARE         reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    return          reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    break           reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    while           reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    repeat          reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    if              reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    for             reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    local           reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    function        reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    LPAREN          reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    ID              reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    RESID           reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    $end            reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    end             reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    until           reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    else            reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    elseif          reduce using rule 58 (exp -> Number .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 38
   yacc.py:2544:
   yacc.py:2546:    (112) prefixexp -> functioncall .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    SDOT            reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    LPAREN          reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    STRING          reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    LCURLY          reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    PLUS            reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    MINUS           reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    TIMES           reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    DIVIDE          reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    POWER           reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    LT              reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    LE              reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    GT              reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    GE              reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    NE              reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    CHECKEQ         reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    and             reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    or              reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    MODULO          reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    DBLDOTS         reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    RPAREN          reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    COMMA           reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    $end            reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    SEMI            reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    end             reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    until           reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    else            reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    elseif          reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    return          reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    break           reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    do              reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    while           reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    repeat          reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    if              reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    for             reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    local           reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    function        reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    ID              reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    RESID           reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    then            reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    RCURLY          reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2658:    RSQUARE         reduce using rule 112 (prefixexp -> functioncall .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 39
   yacc.py:2544:
   yacc.py:2546:    (111) prefixexp -> LPAREN exp . RPAREN
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    RPAREN          shift and go to state 87
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    LT              shift and go to state 93
   yacc.py:2658:    LE              shift and go to state 86
   yacc.py:2658:    GT              shift and go to state 94
   yacc.py:2658:    GE              shift and go to state 90
   yacc.py:2658:    NE              shift and go to state 99
   yacc.py:2658:    CHECKEQ         shift and go to state 92
   yacc.py:2658:    and             shift and go to state 85
   yacc.py:2658:    or              shift and go to state 89
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 40
   yacc.py:2544:
   yacc.py:2546:    (79) exp -> unop . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 101
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 41
   yacc.py:2544:
   yacc.py:2546:    (60) exp -> TRPLDOTS .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    MINUS           reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    TIMES           reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    DIVIDE          reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    POWER           reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    LT              reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    LE              reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    GT              reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    GE              reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    NE              reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    CHECKEQ         reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    and             reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    or              reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    MODULO          reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    DBLDOTS         reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    RPAREN          reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    then            reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    do              reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    COMMA           reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    SEMI            reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    RCURLY          reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    RSQUARE         reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    return          reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    break           reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    while           reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    repeat          reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    if              reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    for             reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    local           reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    function        reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    LPAREN          reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    ID              reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    RESID           reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    $end            reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    end             reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    until           reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    else            reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    elseif          reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 42
   yacc.py:2544:
   yacc.py:2546:    (2) sdash -> chunk laststat .
   yacc.py:2546:    (4) sdash -> chunk laststat . SEMI
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 2 (sdash -> chunk laststat .)
   yacc.py:2658:    else            reduce using rule 2 (sdash -> chunk laststat .)
   yacc.py:2658:    elseif          reduce using rule 2 (sdash -> chunk laststat .)
   yacc.py:2658:    $end            reduce using rule 2 (sdash -> chunk laststat .)
   yacc.py:2658:    until           reduce using rule 2 (sdash -> chunk laststat .)
   yacc.py:2658:    SEMI            shift and go to state 102
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 43
   yacc.py:2544:
   yacc.py:2546:    (5) chunk -> chunk stat .
   yacc.py:2546:    (6) chunk -> chunk stat . SEMI
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 5 (chunk -> chunk stat .)
   yacc.py:2658:    break           reduce using rule 5 (chunk -> chunk stat .)
   yacc.py:2658:    do              reduce using rule 5 (chunk -> chunk stat .)
   yacc.py:2658:    while           reduce using rule 5 (chunk -> chunk stat .)
   yacc.py:2658:    repeat          reduce using rule 5 (chunk -> chunk stat .)
   yacc.py:2658:    if              reduce using rule 5 (chunk -> chunk stat .)
   yacc.py:2658:    for             reduce using rule 5 (chunk -> chunk stat .)
   yacc.py:2658:    local           reduce using rule 5 (chunk -> chunk stat .)
   yacc.py:2658:    function        reduce using rule 5 (chunk -> chunk stat .)
   yacc.py:2658:    LPAREN          reduce using rule 5 (chunk -> chunk stat .)
   yacc.py:2658:    ID              reduce using rule 5 (chunk -> chunk stat .)
   yacc.py:2658:    RESID           reduce using rule 5 (chunk -> chunk stat .)
   yacc.py:2658:    end             reduce using rule 5 (chunk -> chunk stat .)
   yacc.py:2658:    else            reduce using rule 5 (chunk -> chunk stat .)
   yacc.py:2658:    elseif          reduce using rule 5 (chunk -> chunk stat .)
   yacc.py:2658:    until           reduce using rule 5 (chunk -> chunk stat .)
   yacc.py:2658:    $end            reduce using rule 5 (chunk -> chunk stat .)
   yacc.py:2658:    SEMI            shift and go to state 103
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 44
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> if exp . then block ifblock else block end
   yacc.py:2546:    (16) stat -> if exp . then block ifblock end
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    then            shift and go to state 104
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    LT              shift and go to state 93
   yacc.py:2658:    LE              shift and go to state 86
   yacc.py:2658:    GT              shift and go to state 94
   yacc.py:2658:    GE              shift and go to state 90
   yacc.py:2658:    NE              shift and go to state 99
   yacc.py:2658:    CHECKEQ         shift and go to state 92
   yacc.py:2658:    and             shift and go to state 85
   yacc.py:2658:    or              shift and go to state 89
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 45
   yacc.py:2544:
   yacc.py:2546:    (29) args -> tableconstructor .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    SDOT            reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    LPAREN          reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    STRING          reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    LCURLY          reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    COMMA           reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    $end            reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    SEMI            reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    end             reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    until           reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    else            reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    elseif          reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    PLUS            reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    MINUS           reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    TIMES           reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    DIVIDE          reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    POWER           reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    LT              reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    LE              reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    GT              reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    GE              reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    NE              reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    CHECKEQ         reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    and             reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    or              reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    MODULO          reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    DBLDOTS         reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    return          reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    break           reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    do              reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    while           reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    repeat          reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    if              reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    for             reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    local           reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    function        reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    ID              reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    RESID           reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    RPAREN          reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    then            reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    RCURLY          reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2658:    RSQUARE         reduce using rule 29 (args -> tableconstructor .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 46
   yacc.py:2544:
   yacc.py:2546:    (50) var -> prefixexp LSQUARE . exp RSQUARE
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 105
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 47
   yacc.py:2544:
   yacc.py:2546:    (26) functioncall -> prefixexp args .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    SDOT            reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    LPAREN          reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    STRING          reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    LCURLY          reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    COMMA           reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    $end            reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    SEMI            reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    end             reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    until           reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    else            reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    elseif          reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    PLUS            reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    MINUS           reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    TIMES           reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    DIVIDE          reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    POWER           reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    LT              reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    LE              reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    GT              reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    GE              reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    NE              reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    CHECKEQ         reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    and             reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    or              reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    MODULO          reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    DBLDOTS         reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    return          reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    break           reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    do              reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    while           reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    repeat          reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    if              reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    for             reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    local           reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    function        reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    ID              reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    RESID           reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    RSQUARE         reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    RPAREN          reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    then            reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2658:    RCURLY          reduce using rule 26 (functioncall -> prefixexp args .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 48
   yacc.py:2544:
   yacc.py:2546:    (27) args -> LPAREN . RPAREN
   yacc.py:2546:    (28) args -> LPAREN . explist RPAREN
   yacc.py:2546:    (53) explist -> . explist COMMA exp
   yacc.py:2546:    (54) explist -> . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    RPAREN          shift and go to state 106
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 108
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    explist                        shift and go to state 107
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 49
   yacc.py:2544:
   yacc.py:2546:    (51) var -> prefixexp SDOT . names
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    names                          shift and go to state 109
   yacc.py:2542:
   yacc.py:2543:state 50
   yacc.py:2544:
   yacc.py:2546:    (30) args -> STRING .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    SDOT            reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    LPAREN          reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    STRING          reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    LCURLY          reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    COMMA           reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    $end            reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    SEMI            reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    end             reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    until           reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    else            reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    elseif          reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    PLUS            reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    MINUS           reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    TIMES           reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    DIVIDE          reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    POWER           reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    LT              reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    LE              reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    GT              reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    GE              reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    NE              reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    CHECKEQ         reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    and             reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    or              reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    MODULO          reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    DBLDOTS         reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    return          reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    break           reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    do              reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    while           reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    repeat          reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    if              reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    for             reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    local           reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    function        reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    ID              reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    RESID           reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    RPAREN          reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    then            reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    RCURLY          reduce using rule 30 (args -> STRING .)
   yacc.py:2658:    RSQUARE         reduce using rule 30 (args -> STRING .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 51
   yacc.py:2544:
   yacc.py:2546:    (10) stat -> varlist EQUALS . explist
   yacc.py:2546:    (53) explist -> . explist COMMA exp
   yacc.py:2546:    (54) explist -> . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 108
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    explist                        shift and go to state 110
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 52
   yacc.py:2544:
   yacc.py:2546:    (42) comvar -> COMMA . var comvar
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 111
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2685:    var                            shift and go to state 112
   yacc.py:2542:
   yacc.py:2543:state 53
   yacc.py:2544:
   yacc.py:2546:    (48) varlist -> var comvar .
   yacc.py:2547:
   yacc.py:2658:    EQUALS          reduce using rule 48 (varlist -> var comvar .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 54
   yacc.py:2544:
   yacc.py:2546:    (43) comvar -> empty .
   yacc.py:2547:
   yacc.py:2658:    EQUALS          reduce using rule 43 (comvar -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 55
   yacc.py:2544:
   yacc.py:2546:    (23) stat -> local function . names funcbody
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    names                          shift and go to state 113
   yacc.py:2542:
   yacc.py:2543:state 56
   yacc.py:2544:
   yacc.py:2546:    (20) stat -> local namelist .
   yacc.py:2546:    (21) stat -> local namelist . EQUALS explist
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    return          reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    break           reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    do              reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    while           reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    repeat          reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    if              reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    for             reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    local           reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    function        reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    LPAREN          reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    ID              reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    RESID           reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    end             reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    else            reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    elseif          reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    $end            reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    until           reduce using rule 20 (stat -> local namelist .)
   yacc.py:2658:    EQUALS          shift and go to state 114
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 57
   yacc.py:2544:
   yacc.py:2546:    (52) namelist -> names . comid
   yacc.py:2546:    (44) comid -> . COMMA names comid
   yacc.py:2546:    (45) comid -> . empty
   yacc.py:2546:    (109) empty -> .
   yacc.py:2547:
   yacc.py:2658:    COMMA           shift and go to state 115
   yacc.py:2658:    EQUALS          reduce using rule 109 (empty -> .)
   yacc.py:2658:    SEMI            reduce using rule 109 (empty -> .)
   yacc.py:2658:    return          reduce using rule 109 (empty -> .)
   yacc.py:2658:    break           reduce using rule 109 (empty -> .)
   yacc.py:2658:    do              reduce using rule 109 (empty -> .)
   yacc.py:2658:    while           reduce using rule 109 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 109 (empty -> .)
   yacc.py:2658:    if              reduce using rule 109 (empty -> .)
   yacc.py:2658:    for             reduce using rule 109 (empty -> .)
   yacc.py:2658:    local           reduce using rule 109 (empty -> .)
   yacc.py:2658:    function        reduce using rule 109 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 109 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 109 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 109 (empty -> .)
   yacc.py:2658:    $end            reduce using rule 109 (empty -> .)
   yacc.py:2658:    end             reduce using rule 109 (empty -> .)
   yacc.py:2658:    until           reduce using rule 109 (empty -> .)
   yacc.py:2658:    else            reduce using rule 109 (empty -> .)
   yacc.py:2658:    elseif          reduce using rule 109 (empty -> .)
   yacc.py:2658:    RPAREN          reduce using rule 109 (empty -> .)
   yacc.py:2660:
   yacc.py:2667:  ! COMMA           [ reduce using rule 109 (empty -> .) ]
   yacc.py:2671:
   yacc.py:2685:    empty                          shift and go to state 116
   yacc.py:2685:    comid                          shift and go to state 117
   yacc.py:2542:
   yacc.py:2543:state 58
   yacc.py:2544:
   yacc.py:2546:    (22) stat -> function funcname . funcbody
   yacc.py:2546:    (24) funcbody -> . LPAREN RPAREN block end
   yacc.py:2546:    (25) funcbody -> . LPAREN parlist RPAREN block end
   yacc.py:2547:
   yacc.py:2658:    LPAREN          shift and go to state 119
   yacc.py:2660:
   yacc.py:2685:    funcbody                       shift and go to state 118
   yacc.py:2542:
   yacc.py:2543:state 59
   yacc.py:2544:
   yacc.py:2546:    (38) funcname -> names . dotid COLON
   yacc.py:2546:    (39) funcname -> names .
   yacc.py:2546:    (40) dotid -> . SDOT names dotid
   yacc.py:2546:    (41) dotid -> . empty
   yacc.py:2546:    (109) empty -> .
   yacc.py:2547:
   yacc.py:2658:    LPAREN          reduce using rule 39 (funcname -> names .)
   yacc.py:2658:    SDOT            shift and go to state 120
   yacc.py:2658:    COLON           reduce using rule 109 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    dotid                          shift and go to state 121
   yacc.py:2685:    empty                          shift and go to state 122
   yacc.py:2542:
   yacc.py:2543:state 60
   yacc.py:2544:
   yacc.py:2546:    (9) block -> sdash .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 9 (block -> sdash .)
   yacc.py:2658:    else            reduce using rule 9 (block -> sdash .)
   yacc.py:2658:    elseif          reduce using rule 9 (block -> sdash .)
   yacc.py:2658:    until           reduce using rule 9 (block -> sdash .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 61
   yacc.py:2544:
   yacc.py:2546:    (11) stat -> do block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 123
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 62
   yacc.py:2544:
   yacc.py:2546:    (7) chunk -> stat SEMI .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 7 (chunk -> stat SEMI .)
   yacc.py:2658:    break           reduce using rule 7 (chunk -> stat SEMI .)
   yacc.py:2658:    do              reduce using rule 7 (chunk -> stat SEMI .)
   yacc.py:2658:    while           reduce using rule 7 (chunk -> stat SEMI .)
   yacc.py:2658:    repeat          reduce using rule 7 (chunk -> stat SEMI .)
   yacc.py:2658:    if              reduce using rule 7 (chunk -> stat SEMI .)
   yacc.py:2658:    for             reduce using rule 7 (chunk -> stat SEMI .)
   yacc.py:2658:    local           reduce using rule 7 (chunk -> stat SEMI .)
   yacc.py:2658:    function        reduce using rule 7 (chunk -> stat SEMI .)
   yacc.py:2658:    LPAREN          reduce using rule 7 (chunk -> stat SEMI .)
   yacc.py:2658:    ID              reduce using rule 7 (chunk -> stat SEMI .)
   yacc.py:2658:    RESID           reduce using rule 7 (chunk -> stat SEMI .)
   yacc.py:2658:    end             reduce using rule 7 (chunk -> stat SEMI .)
   yacc.py:2658:    else            reduce using rule 7 (chunk -> stat SEMI .)
   yacc.py:2658:    elseif          reduce using rule 7 (chunk -> stat SEMI .)
   yacc.py:2658:    until           reduce using rule 7 (chunk -> stat SEMI .)
   yacc.py:2658:    $end            reduce using rule 7 (chunk -> stat SEMI .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 63
   yacc.py:2544:
   yacc.py:2546:    (14) stat -> repeat block . until exp
   yacc.py:2547:
   yacc.py:2658:    until           shift and go to state 124
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 64
   yacc.py:2544:
   yacc.py:2546:    (104) retexp -> tableconstructor .
   yacc.py:2546:    (78) exp -> tableconstructor .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 104 (retexp -> tableconstructor .)
   yacc.py:2658:    $end            reduce using rule 104 (retexp -> tableconstructor .)
   yacc.py:2658:    SEMI            reduce using rule 104 (retexp -> tableconstructor .)
   yacc.py:2658:    end             reduce using rule 104 (retexp -> tableconstructor .)
   yacc.py:2658:    until           reduce using rule 104 (retexp -> tableconstructor .)
   yacc.py:2658:    else            reduce using rule 104 (retexp -> tableconstructor .)
   yacc.py:2658:    elseif          reduce using rule 104 (retexp -> tableconstructor .)
   yacc.py:2658:    PLUS            reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    MINUS           reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    TIMES           reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    DIVIDE          reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    POWER           reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    LT              reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    LE              reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    GT              reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    GE              reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    NE              reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    CHECKEQ         reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    and             reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    or              reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    MODULO          reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2658:    DBLDOTS         reduce using rule 78 (exp -> tableconstructor .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 65
   yacc.py:2544:
   yacc.py:2546:    (83) retexp -> false .
   yacc.py:2546:    (56) exp -> false .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 83 (retexp -> false .)
   yacc.py:2658:    $end            reduce using rule 83 (retexp -> false .)
   yacc.py:2658:    SEMI            reduce using rule 83 (retexp -> false .)
   yacc.py:2658:    end             reduce using rule 83 (retexp -> false .)
   yacc.py:2658:    until           reduce using rule 83 (retexp -> false .)
   yacc.py:2658:    else            reduce using rule 83 (retexp -> false .)
   yacc.py:2658:    elseif          reduce using rule 83 (retexp -> false .)
   yacc.py:2658:    PLUS            reduce using rule 56 (exp -> false .)
   yacc.py:2658:    MINUS           reduce using rule 56 (exp -> false .)
   yacc.py:2658:    TIMES           reduce using rule 56 (exp -> false .)
   yacc.py:2658:    DIVIDE          reduce using rule 56 (exp -> false .)
   yacc.py:2658:    POWER           reduce using rule 56 (exp -> false .)
   yacc.py:2658:    LT              reduce using rule 56 (exp -> false .)
   yacc.py:2658:    LE              reduce using rule 56 (exp -> false .)
   yacc.py:2658:    GT              reduce using rule 56 (exp -> false .)
   yacc.py:2658:    GE              reduce using rule 56 (exp -> false .)
   yacc.py:2658:    NE              reduce using rule 56 (exp -> false .)
   yacc.py:2658:    CHECKEQ         reduce using rule 56 (exp -> false .)
   yacc.py:2658:    and             reduce using rule 56 (exp -> false .)
   yacc.py:2658:    or              reduce using rule 56 (exp -> false .)
   yacc.py:2658:    MODULO          reduce using rule 56 (exp -> false .)
   yacc.py:2658:    DBLDOTS         reduce using rule 56 (exp -> false .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 66
   yacc.py:2544:
   yacc.py:2546:    (87) retexp -> TRPLDOTS .
   yacc.py:2546:    (60) exp -> TRPLDOTS .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 87 (retexp -> TRPLDOTS .)
   yacc.py:2658:    $end            reduce using rule 87 (retexp -> TRPLDOTS .)
   yacc.py:2658:    SEMI            reduce using rule 87 (retexp -> TRPLDOTS .)
   yacc.py:2658:    end             reduce using rule 87 (retexp -> TRPLDOTS .)
   yacc.py:2658:    until           reduce using rule 87 (retexp -> TRPLDOTS .)
   yacc.py:2658:    else            reduce using rule 87 (retexp -> TRPLDOTS .)
   yacc.py:2658:    elseif          reduce using rule 87 (retexp -> TRPLDOTS .)
   yacc.py:2658:    PLUS            reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    MINUS           reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    TIMES           reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    DIVIDE          reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    POWER           reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    LT              reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    LE              reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    GT              reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    GE              reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    NE              reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    CHECKEQ         reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    and             reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    or              reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    MODULO          reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2658:    DBLDOTS         reduce using rule 60 (exp -> TRPLDOTS .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 67
   yacc.py:2544:
   yacc.py:2546:    (88) retexp -> prefixexp .
   yacc.py:2546:    (62) exp -> prefixexp .
   yacc.py:2546:    (50) var -> prefixexp . LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> prefixexp . SDOT names
   yacc.py:2546:    (26) functioncall -> prefixexp . args
   yacc.py:2546:    (27) args -> . LPAREN RPAREN
   yacc.py:2546:    (28) args -> . LPAREN explist RPAREN
   yacc.py:2546:    (29) args -> . tableconstructor
   yacc.py:2546:    (30) args -> . STRING
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 88 (retexp -> prefixexp .)
   yacc.py:2658:    $end            reduce using rule 88 (retexp -> prefixexp .)
   yacc.py:2658:    SEMI            reduce using rule 88 (retexp -> prefixexp .)
   yacc.py:2658:    end             reduce using rule 88 (retexp -> prefixexp .)
   yacc.py:2658:    until           reduce using rule 88 (retexp -> prefixexp .)
   yacc.py:2658:    else            reduce using rule 88 (retexp -> prefixexp .)
   yacc.py:2658:    elseif          reduce using rule 88 (retexp -> prefixexp .)
   yacc.py:2658:    PLUS            reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    MINUS           reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    TIMES           reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    DIVIDE          reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    POWER           reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    LT              reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    LE              reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    GT              reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    GE              reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    NE              reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    and             reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    or              reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    MODULO          reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 62 (exp -> prefixexp .)
   yacc.py:2658:    LSQUARE         shift and go to state 46
   yacc.py:2658:    SDOT            shift and go to state 49
   yacc.py:2658:    LPAREN          shift and go to state 48
   yacc.py:2658:    STRING          shift and go to state 50
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2660:
   yacc.py:2685:    tableconstructor               shift and go to state 45
   yacc.py:2685:    args                           shift and go to state 47
   yacc.py:2542:
   yacc.py:2543:state 68
   yacc.py:2544:
   yacc.py:2546:    (81) retexplist -> retexp .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 81 (retexplist -> retexp .)
   yacc.py:2658:    $end            reduce using rule 81 (retexplist -> retexp .)
   yacc.py:2658:    SEMI            reduce using rule 81 (retexplist -> retexp .)
   yacc.py:2658:    end             reduce using rule 81 (retexplist -> retexp .)
   yacc.py:2658:    until           reduce using rule 81 (retexplist -> retexp .)
   yacc.py:2658:    else            reduce using rule 81 (retexplist -> retexp .)
   yacc.py:2658:    elseif          reduce using rule 81 (retexplist -> retexp .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 69
   yacc.py:2544:
   yacc.py:2546:    (86) retexp -> STRING .
   yacc.py:2546:    (59) exp -> STRING .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 86 (retexp -> STRING .)
   yacc.py:2658:    $end            reduce using rule 86 (retexp -> STRING .)
   yacc.py:2658:    SEMI            reduce using rule 86 (retexp -> STRING .)
   yacc.py:2658:    end             reduce using rule 86 (retexp -> STRING .)
   yacc.py:2658:    until           reduce using rule 86 (retexp -> STRING .)
   yacc.py:2658:    else            reduce using rule 86 (retexp -> STRING .)
   yacc.py:2658:    elseif          reduce using rule 86 (retexp -> STRING .)
   yacc.py:2658:    PLUS            reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    MINUS           reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    TIMES           reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    DIVIDE          reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    POWER           reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    LT              reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    LE              reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    GT              reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    GE              reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    NE              reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    CHECKEQ         reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    and             reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    or              reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    MODULO          reduce using rule 59 (exp -> STRING .)
   yacc.py:2658:    DBLDOTS         reduce using rule 59 (exp -> STRING .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 70
   yacc.py:2544:
   yacc.py:2546:    (82) retexp -> nil .
   yacc.py:2546:    (55) exp -> nil .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 82 (retexp -> nil .)
   yacc.py:2658:    $end            reduce using rule 82 (retexp -> nil .)
   yacc.py:2658:    SEMI            reduce using rule 82 (retexp -> nil .)
   yacc.py:2658:    end             reduce using rule 82 (retexp -> nil .)
   yacc.py:2658:    until           reduce using rule 82 (retexp -> nil .)
   yacc.py:2658:    else            reduce using rule 82 (retexp -> nil .)
   yacc.py:2658:    elseif          reduce using rule 82 (retexp -> nil .)
   yacc.py:2658:    PLUS            reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    MINUS           reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    TIMES           reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    DIVIDE          reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    POWER           reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    LT              reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    LE              reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    GT              reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    GE              reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    NE              reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    CHECKEQ         reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    and             reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    or              reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    MODULO          reduce using rule 55 (exp -> nil .)
   yacc.py:2658:    DBLDOTS         reduce using rule 55 (exp -> nil .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 71
   yacc.py:2544:
   yacc.py:2546:    (84) retexp -> true .
   yacc.py:2546:    (57) exp -> true .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 84 (retexp -> true .)
   yacc.py:2658:    $end            reduce using rule 84 (retexp -> true .)
   yacc.py:2658:    SEMI            reduce using rule 84 (retexp -> true .)
   yacc.py:2658:    end             reduce using rule 84 (retexp -> true .)
   yacc.py:2658:    until           reduce using rule 84 (retexp -> true .)
   yacc.py:2658:    else            reduce using rule 84 (retexp -> true .)
   yacc.py:2658:    elseif          reduce using rule 84 (retexp -> true .)
   yacc.py:2658:    PLUS            reduce using rule 57 (exp -> true .)
   yacc.py:2658:    MINUS           reduce using rule 57 (exp -> true .)
   yacc.py:2658:    TIMES           reduce using rule 57 (exp -> true .)
   yacc.py:2658:    DIVIDE          reduce using rule 57 (exp -> true .)
   yacc.py:2658:    POWER           reduce using rule 57 (exp -> true .)
   yacc.py:2658:    LT              reduce using rule 57 (exp -> true .)
   yacc.py:2658:    LE              reduce using rule 57 (exp -> true .)
   yacc.py:2658:    GT              reduce using rule 57 (exp -> true .)
   yacc.py:2658:    GE              reduce using rule 57 (exp -> true .)
   yacc.py:2658:    NE              reduce using rule 57 (exp -> true .)
   yacc.py:2658:    CHECKEQ         reduce using rule 57 (exp -> true .)
   yacc.py:2658:    and             reduce using rule 57 (exp -> true .)
   yacc.py:2658:    or              reduce using rule 57 (exp -> true .)
   yacc.py:2658:    MODULO          reduce using rule 57 (exp -> true .)
   yacc.py:2658:    DBLDOTS         reduce using rule 57 (exp -> true .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 72
   yacc.py:2544:
   yacc.py:2546:    (85) retexp -> Number .
   yacc.py:2546:    (58) exp -> Number .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 85 (retexp -> Number .)
   yacc.py:2658:    $end            reduce using rule 85 (retexp -> Number .)
   yacc.py:2658:    SEMI            reduce using rule 85 (retexp -> Number .)
   yacc.py:2658:    end             reduce using rule 85 (retexp -> Number .)
   yacc.py:2658:    until           reduce using rule 85 (retexp -> Number .)
   yacc.py:2658:    else            reduce using rule 85 (retexp -> Number .)
   yacc.py:2658:    elseif          reduce using rule 85 (retexp -> Number .)
   yacc.py:2658:    PLUS            reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    MINUS           reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    TIMES           reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    DIVIDE          reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    POWER           reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    LT              reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    LE              reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    GT              reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    GE              reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    NE              reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    CHECKEQ         reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    and             reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    or              reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    MODULO          reduce using rule 58 (exp -> Number .)
   yacc.py:2658:    DBLDOTS         reduce using rule 58 (exp -> Number .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 73
   yacc.py:2544:
   yacc.py:2546:    (35) laststat -> return retexplist .
   yacc.py:2546:    (80) retexplist -> retexplist . COMMA retexp
   yacc.py:2547:
   yacc.py:2658:    else            reduce using rule 35 (laststat -> return retexplist .)
   yacc.py:2658:    end             reduce using rule 35 (laststat -> return retexplist .)
   yacc.py:2658:    elseif          reduce using rule 35 (laststat -> return retexplist .)
   yacc.py:2658:    $end            reduce using rule 35 (laststat -> return retexplist .)
   yacc.py:2658:    SEMI            reduce using rule 35 (laststat -> return retexplist .)
   yacc.py:2658:    until           reduce using rule 35 (laststat -> return retexplist .)
   yacc.py:2658:    COMMA           shift and go to state 125
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 74
   yacc.py:2544:
   yacc.py:2546:    (89) retexp -> exp . PLUS exp
   yacc.py:2546:    (90) retexp -> exp . MINUS exp
   yacc.py:2546:    (91) retexp -> exp . TIMES exp
   yacc.py:2546:    (92) retexp -> exp . DIVIDE exp
   yacc.py:2546:    (93) retexp -> exp . POWER exp
   yacc.py:2546:    (94) retexp -> exp . LT exp
   yacc.py:2546:    (95) retexp -> exp . LE exp
   yacc.py:2546:    (96) retexp -> exp . GT exp
   yacc.py:2546:    (97) retexp -> exp . GE exp
   yacc.py:2546:    (98) retexp -> exp . NE exp
   yacc.py:2546:    (99) retexp -> exp . CHECKEQ exp
   yacc.py:2546:    (100) retexp -> exp . and exp
   yacc.py:2546:    (101) retexp -> exp . or exp
   yacc.py:2546:    (102) retexp -> exp . MODULO exp
   yacc.py:2546:    (103) retexp -> exp . DBLDOTS exp
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            shift and go to state 137
   yacc.py:2658:    MINUS           shift and go to state 139
   yacc.py:2658:    TIMES           shift and go to state 133
   yacc.py:2658:    DIVIDE          shift and go to state 129
   yacc.py:2658:    POWER           shift and go to state 130
   yacc.py:2658:    LT              shift and go to state 135
   yacc.py:2658:    LE              shift and go to state 127
   yacc.py:2658:    GT              shift and go to state 136
   yacc.py:2658:    GE              shift and go to state 132
   yacc.py:2658:    NE              shift and go to state 140
   yacc.py:2658:    CHECKEQ         shift and go to state 134
   yacc.py:2658:    and             shift and go to state 126
   yacc.py:2658:    or              shift and go to state 131
   yacc.py:2658:    MODULO          shift and go to state 128
   yacc.py:2658:    DBLDOTS         shift and go to state 138
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 75
   yacc.py:2544:
   yacc.py:2546:    (105) retexp -> unop . exp
   yacc.py:2546:    (79) exp -> unop . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 141
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 76
   yacc.py:2544:
   yacc.py:2546:    (19) stat -> for namelist . in explist do block end
   yacc.py:2547:
   yacc.py:2658:    in              shift and go to state 142
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 77
   yacc.py:2544:
   yacc.py:2546:    (17) stat -> for names . EQUALS exp COMMA exp do block end
   yacc.py:2546:    (18) stat -> for names . EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (52) namelist -> names . comid
   yacc.py:2546:    (44) comid -> . COMMA names comid
   yacc.py:2546:    (45) comid -> . empty
   yacc.py:2546:    (109) empty -> .
   yacc.py:2547:
   yacc.py:2658:    EQUALS          shift and go to state 143
   yacc.py:2658:    COMMA           shift and go to state 115
   yacc.py:2658:    in              reduce using rule 109 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 116
   yacc.py:2685:    comid                          shift and go to state 117
   yacc.py:2542:
   yacc.py:2543:state 78
   yacc.py:2544:
   yacc.py:2546:    (13) stat -> while exp . do block end
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    do              shift and go to state 144
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    LT              shift and go to state 93
   yacc.py:2658:    LE              shift and go to state 86
   yacc.py:2658:    GT              shift and go to state 94
   yacc.py:2658:    GE              shift and go to state 90
   yacc.py:2658:    NE              shift and go to state 99
   yacc.py:2658:    CHECKEQ         shift and go to state 92
   yacc.py:2658:    and             shift and go to state 85
   yacc.py:2658:    or              shift and go to state 89
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 79
   yacc.py:2544:
   yacc.py:2546:    (123) field -> names . EQUALS exp
   yacc.py:2546:    (49) var -> names .
   yacc.py:2547:
   yacc.py:2658:    EQUALS          shift and go to state 145
   yacc.py:2658:    LSQUARE         reduce using rule 49 (var -> names .)
   yacc.py:2658:    SDOT            reduce using rule 49 (var -> names .)
   yacc.py:2658:    LPAREN          reduce using rule 49 (var -> names .)
   yacc.py:2658:    STRING          reduce using rule 49 (var -> names .)
   yacc.py:2658:    LCURLY          reduce using rule 49 (var -> names .)
   yacc.py:2658:    PLUS            reduce using rule 49 (var -> names .)
   yacc.py:2658:    MINUS           reduce using rule 49 (var -> names .)
   yacc.py:2658:    TIMES           reduce using rule 49 (var -> names .)
   yacc.py:2658:    DIVIDE          reduce using rule 49 (var -> names .)
   yacc.py:2658:    POWER           reduce using rule 49 (var -> names .)
   yacc.py:2658:    LT              reduce using rule 49 (var -> names .)
   yacc.py:2658:    LE              reduce using rule 49 (var -> names .)
   yacc.py:2658:    GT              reduce using rule 49 (var -> names .)
   yacc.py:2658:    GE              reduce using rule 49 (var -> names .)
   yacc.py:2658:    NE              reduce using rule 49 (var -> names .)
   yacc.py:2658:    CHECKEQ         reduce using rule 49 (var -> names .)
   yacc.py:2658:    and             reduce using rule 49 (var -> names .)
   yacc.py:2658:    or              reduce using rule 49 (var -> names .)
   yacc.py:2658:    MODULO          reduce using rule 49 (var -> names .)
   yacc.py:2658:    DBLDOTS         reduce using rule 49 (var -> names .)
   yacc.py:2658:    COMMA           reduce using rule 49 (var -> names .)
   yacc.py:2658:    SEMI            reduce using rule 49 (var -> names .)
   yacc.py:2658:    RCURLY          reduce using rule 49 (var -> names .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 80
   yacc.py:2544:
   yacc.py:2546:    (117) tableconstructor -> LCURLY RCURLY .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    MINUS           reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    TIMES           reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    DIVIDE          reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    POWER           reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    LT              reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    LE              reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    GT              reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    GE              reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    NE              reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    CHECKEQ         reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    and             reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    or              reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    MODULO          reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    DBLDOTS         reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    COMMA           reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    $end            reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    SEMI            reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    end             reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    until           reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    else            reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    elseif          reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    RCURLY          reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    RPAREN          reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    then            reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    do              reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    RSQUARE         reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    return          reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    break           reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    while           reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    repeat          reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    if              reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    for             reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    local           reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    function        reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    LPAREN          reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    ID              reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    RESID           reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    LSQUARE         reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    SDOT            reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    STRING          reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2658:    LCURLY          reduce using rule 117 (tableconstructor -> LCURLY RCURLY .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 81
   yacc.py:2544:
   yacc.py:2546:    (118) fieldlist -> field . fieldseplist fieldsep
   yacc.py:2546:    (119) fieldlist -> field . fieldseplist
   yacc.py:2546:    (120) fieldseplist -> . fieldseplist fieldsep field
   yacc.py:2546:    (121) fieldseplist -> . empty
   yacc.py:2546:    (109) empty -> .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 109 (empty -> .)
   yacc.py:2658:    SEMI            reduce using rule 109 (empty -> .)
   yacc.py:2658:    RCURLY          reduce using rule 109 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    fieldseplist                   shift and go to state 146
   yacc.py:2685:    empty                          shift and go to state 147
   yacc.py:2542:
   yacc.py:2543:state 82
   yacc.py:2544:
   yacc.py:2546:    (116) tableconstructor -> LCURLY fieldlist . RCURLY
   yacc.py:2547:
   yacc.py:2658:    RCURLY          shift and go to state 148
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 83
   yacc.py:2544:
   yacc.py:2546:    (124) field -> exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 124 (field -> exp .)
   yacc.py:2658:    SEMI            reduce using rule 124 (field -> exp .)
   yacc.py:2658:    RCURLY          reduce using rule 124 (field -> exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    LT              shift and go to state 93
   yacc.py:2658:    LE              shift and go to state 86
   yacc.py:2658:    GT              shift and go to state 94
   yacc.py:2658:    GE              shift and go to state 90
   yacc.py:2658:    NE              shift and go to state 99
   yacc.py:2658:    CHECKEQ         shift and go to state 92
   yacc.py:2658:    and             shift and go to state 85
   yacc.py:2658:    or              shift and go to state 89
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 84
   yacc.py:2544:
   yacc.py:2546:    (122) field -> LSQUARE . exp RSQUARE EQUALS exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 149
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 85
   yacc.py:2544:
   yacc.py:2546:    (74) exp -> exp and . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 150
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 86
   yacc.py:2544:
   yacc.py:2546:    (69) exp -> exp LE . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 151
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 87
   yacc.py:2544:
   yacc.py:2546:    (111) prefixexp -> LPAREN exp RPAREN .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    SDOT            reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    LPAREN          reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    STRING          reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    LCURLY          reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    PLUS            reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    MINUS           reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    TIMES           reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    DIVIDE          reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    POWER           reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    LT              reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    LE              reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    GT              reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    GE              reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    NE              reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    CHECKEQ         reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    and             reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    or              reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    MODULO          reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    DBLDOTS         reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    RPAREN          reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    COMMA           reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    $end            reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    SEMI            reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    end             reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    until           reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    else            reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    elseif          reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    return          reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    break           reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    do              reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    while           reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    repeat          reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    if              reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    for             reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    local           reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    function        reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    ID              reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    RESID           reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    then            reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    RCURLY          reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2658:    RSQUARE         reduce using rule 111 (prefixexp -> LPAREN exp RPAREN .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 88
   yacc.py:2544:
   yacc.py:2546:    (67) exp -> exp POWER . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 152
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 89
   yacc.py:2544:
   yacc.py:2546:    (75) exp -> exp or . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 153
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 90
   yacc.py:2544:
   yacc.py:2546:    (71) exp -> exp GE . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 154
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 91
   yacc.py:2544:
   yacc.py:2546:    (65) exp -> exp TIMES . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 155
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 92
   yacc.py:2544:
   yacc.py:2546:    (73) exp -> exp CHECKEQ . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 156
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 93
   yacc.py:2544:
   yacc.py:2546:    (68) exp -> exp LT . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 157
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 94
   yacc.py:2544:
   yacc.py:2546:    (70) exp -> exp GT . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 158
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 95
   yacc.py:2544:
   yacc.py:2546:    (63) exp -> exp PLUS . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 159
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 96
   yacc.py:2544:
   yacc.py:2546:    (76) exp -> exp MODULO . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 160
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 97
   yacc.py:2544:
   yacc.py:2546:    (77) exp -> exp DBLDOTS . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 161
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 98
   yacc.py:2544:
   yacc.py:2546:    (64) exp -> exp MINUS . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 162
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 99
   yacc.py:2544:
   yacc.py:2546:    (72) exp -> exp NE . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 163
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 100
   yacc.py:2544:
   yacc.py:2546:    (66) exp -> exp DIVIDE . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 164
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 101
   yacc.py:2544:
   yacc.py:2546:    (79) exp -> unop exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    MINUS           reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    TIMES           reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    LT              reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    LE              reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    GT              reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    GE              reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    NE              reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    and             reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    or              reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    MODULO          reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    RPAREN          reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    then            reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    do              reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    COMMA           reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    SEMI            reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    RCURLY          reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    return          reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    break           reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    while           reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    repeat          reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    if              reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    for             reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    local           reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    function        reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    LPAREN          reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    ID              reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    RESID           reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    $end            reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    end             reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    until           reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    else            reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    elseif          reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 79 (exp -> unop exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 95 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 98 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 91 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 100 ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 96 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 102
   yacc.py:2544:
   yacc.py:2546:    (4) sdash -> chunk laststat SEMI .
   yacc.py:2547:
   yacc.py:2658:    end             reduce using rule 4 (sdash -> chunk laststat SEMI .)
   yacc.py:2658:    else            reduce using rule 4 (sdash -> chunk laststat SEMI .)
   yacc.py:2658:    elseif          reduce using rule 4 (sdash -> chunk laststat SEMI .)
   yacc.py:2658:    $end            reduce using rule 4 (sdash -> chunk laststat SEMI .)
   yacc.py:2658:    until           reduce using rule 4 (sdash -> chunk laststat SEMI .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 103
   yacc.py:2544:
   yacc.py:2546:    (6) chunk -> chunk stat SEMI .
   yacc.py:2547:
   yacc.py:2658:    return          reduce using rule 6 (chunk -> chunk stat SEMI .)
   yacc.py:2658:    break           reduce using rule 6 (chunk -> chunk stat SEMI .)
   yacc.py:2658:    do              reduce using rule 6 (chunk -> chunk stat SEMI .)
   yacc.py:2658:    while           reduce using rule 6 (chunk -> chunk stat SEMI .)
   yacc.py:2658:    repeat          reduce using rule 6 (chunk -> chunk stat SEMI .)
   yacc.py:2658:    if              reduce using rule 6 (chunk -> chunk stat SEMI .)
   yacc.py:2658:    for             reduce using rule 6 (chunk -> chunk stat SEMI .)
   yacc.py:2658:    local           reduce using rule 6 (chunk -> chunk stat SEMI .)
   yacc.py:2658:    function        reduce using rule 6 (chunk -> chunk stat SEMI .)
   yacc.py:2658:    LPAREN          reduce using rule 6 (chunk -> chunk stat SEMI .)
   yacc.py:2658:    ID              reduce using rule 6 (chunk -> chunk stat SEMI .)
   yacc.py:2658:    RESID           reduce using rule 6 (chunk -> chunk stat SEMI .)
   yacc.py:2658:    end             reduce using rule 6 (chunk -> chunk stat SEMI .)
   yacc.py:2658:    else            reduce using rule 6 (chunk -> chunk stat SEMI .)
   yacc.py:2658:    elseif          reduce using rule 6 (chunk -> chunk stat SEMI .)
   yacc.py:2658:    until           reduce using rule 6 (chunk -> chunk stat SEMI .)
   yacc.py:2658:    $end            reduce using rule 6 (chunk -> chunk stat SEMI .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 104
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> if exp then . block ifblock else block end
   yacc.py:2546:    (16) stat -> if exp then . block ifblock end
   yacc.py:2546:    (9) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat
   yacc.py:2546:    (3) sdash -> . laststat
   yacc.py:2546:    (4) sdash -> . chunk laststat SEMI
   yacc.py:2546:    (5) chunk -> . chunk stat
   yacc.py:2546:    (6) chunk -> . chunk stat SEMI
   yacc.py:2546:    (7) chunk -> . stat SEMI
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (35) laststat -> . return retexplist
   yacc.py:2546:    (36) laststat -> . return
   yacc.py:2546:    (37) laststat -> . break
   yacc.py:2546:    (10) stat -> . varlist EQUALS explist
   yacc.py:2546:    (11) stat -> . do block end
   yacc.py:2546:    (12) stat -> . functioncall
   yacc.py:2546:    (13) stat -> . while exp do block end
   yacc.py:2546:    (14) stat -> . repeat block until exp
   yacc.py:2546:    (15) stat -> . if exp then block ifblock else block end
   yacc.py:2546:    (16) stat -> . if exp then block ifblock end
   yacc.py:2546:    (17) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (18) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (19) stat -> . for namelist in explist do block end
   yacc.py:2546:    (20) stat -> . local namelist
   yacc.py:2546:    (21) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (48) varlist -> . var comvar
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    if              shift and go to state 5
   yacc.py:2658:    for             shift and go to state 19
   yacc.py:2658:    local           shift and go to state 11
   yacc.py:2658:    function        shift and go to state 12
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 6
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    varlist                        shift and go to state 7
   yacc.py:2685:    chunk                          shift and go to state 3
   yacc.py:2685:    laststat                       shift and go to state 8
   yacc.py:2685:    block                          shift and go to state 165
   yacc.py:2685:    var                            shift and go to state 9
   yacc.py:2685:    functioncall                   shift and go to state 10
   yacc.py:2685:    sdash                          shift and go to state 60
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 105
   yacc.py:2544:
   yacc.py:2546:    (50) var -> prefixexp LSQUARE exp . RSQUARE
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    RSQUARE         shift and go to state 166
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    LT              shift and go to state 93
   yacc.py:2658:    LE              shift and go to state 86
   yacc.py:2658:    GT              shift and go to state 94
   yacc.py:2658:    GE              shift and go to state 90
   yacc.py:2658:    NE              shift and go to state 99
   yacc.py:2658:    CHECKEQ         shift and go to state 92
   yacc.py:2658:    and             shift and go to state 85
   yacc.py:2658:    or              shift and go to state 89
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 106
   yacc.py:2544:
   yacc.py:2546:    (27) args -> LPAREN RPAREN .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    SDOT            reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    LPAREN          reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    STRING          reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    LCURLY          reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    COMMA           reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    $end            reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    SEMI            reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    end             reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    until           reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    else            reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    elseif          reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    PLUS            reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    MINUS           reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    TIMES           reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    DIVIDE          reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    POWER           reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    LT              reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    LE              reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    GT              reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    GE              reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    NE              reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    CHECKEQ         reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    and             reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    or              reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    MODULO          reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    DBLDOTS         reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    return          reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    break           reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    do              reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    while           reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    repeat          reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    if              reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    for             reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    local           reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    function        reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    ID              reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    RESID           reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    RPAREN          reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    then            reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    RCURLY          reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2658:    RSQUARE         reduce using rule 27 (args -> LPAREN RPAREN .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 107
   yacc.py:2544:
   yacc.py:2546:    (28) args -> LPAREN explist . RPAREN
   yacc.py:2546:    (53) explist -> explist . COMMA exp
   yacc.py:2547:
   yacc.py:2658:    RPAREN          shift and go to state 168
   yacc.py:2658:    COMMA           shift and go to state 167
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 108
   yacc.py:2544:
   yacc.py:2546:    (54) explist -> exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    do              reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    COMMA           reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    SEMI            reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    return          reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    break           reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    while           reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    repeat          reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    if              reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    for             reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    local           reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    function        reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    LPAREN          reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    ID              reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    RESID           reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    $end            reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    end             reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    until           reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    else            reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    elseif          reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    RPAREN          reduce using rule 54 (explist -> exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    LT              shift and go to state 93
   yacc.py:2658:    LE              shift and go to state 86
   yacc.py:2658:    GT              shift and go to state 94
   yacc.py:2658:    GE              shift and go to state 90
   yacc.py:2658:    NE              shift and go to state 99
   yacc.py:2658:    CHECKEQ         shift and go to state 92
   yacc.py:2658:    and             shift and go to state 85
   yacc.py:2658:    or              shift and go to state 89
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 109
   yacc.py:2544:
   yacc.py:2546:    (51) var -> prefixexp SDOT names .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    SDOT            reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    LPAREN          reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    STRING          reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    LCURLY          reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    PLUS            reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    MINUS           reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    TIMES           reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    DIVIDE          reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    POWER           reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    LT              reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    LE              reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    GT              reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    GE              reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    NE              reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    CHECKEQ         reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    and             reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    or              reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    MODULO          reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    DBLDOTS         reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    COMMA           reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    $end            reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    SEMI            reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    end             reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    until           reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    else            reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    elseif          reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    EQUALS          reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    RCURLY          reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    RPAREN          reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    then            reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    do              reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    RSQUARE         reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    return          reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    break           reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    while           reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    repeat          reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    if              reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    for             reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    local           reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    function        reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    ID              reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2658:    RESID           reduce using rule 51 (var -> prefixexp SDOT names .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 110
   yacc.py:2544:
   yacc.py:2546:    (10) stat -> varlist EQUALS explist .
   yacc.py:2546:    (53) explist -> explist . COMMA exp
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    return          reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    break           reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    do              reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    while           reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    repeat          reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    if              reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    for             reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    local           reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    function        reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    LPAREN          reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    ID              reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    RESID           reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    end             reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    else            reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    elseif          reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    $end            reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    until           reduce using rule 10 (stat -> varlist EQUALS explist .)
   yacc.py:2658:    COMMA           shift and go to state 167
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 111
   yacc.py:2544:
   yacc.py:2546:    (50) var -> prefixexp . LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> prefixexp . SDOT names
   yacc.py:2546:    (26) functioncall -> prefixexp . args
   yacc.py:2546:    (27) args -> . LPAREN RPAREN
   yacc.py:2546:    (28) args -> . LPAREN explist RPAREN
   yacc.py:2546:    (29) args -> . tableconstructor
   yacc.py:2546:    (30) args -> . STRING
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         shift and go to state 46
   yacc.py:2658:    SDOT            shift and go to state 49
   yacc.py:2658:    LPAREN          shift and go to state 48
   yacc.py:2658:    STRING          shift and go to state 50
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2660:
   yacc.py:2685:    tableconstructor               shift and go to state 45
   yacc.py:2685:    args                           shift and go to state 47
   yacc.py:2542:
   yacc.py:2543:state 112
   yacc.py:2544:
   yacc.py:2546:    (42) comvar -> COMMA var . comvar
   yacc.py:2546:    (110) prefixexp -> var .
   yacc.py:2546:    (42) comvar -> . COMMA var comvar
   yacc.py:2546:    (43) comvar -> . empty
   yacc.py:2546:    (109) empty -> .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    SDOT            reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    LPAREN          reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    STRING          reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    LCURLY          reduce using rule 110 (prefixexp -> var .)
   yacc.py:2658:    COMMA           shift and go to state 52
   yacc.py:2658:    EQUALS          reduce using rule 109 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    comvar                         shift and go to state 169
   yacc.py:2685:    empty                          shift and go to state 54
   yacc.py:2542:
   yacc.py:2543:state 113
   yacc.py:2544:
   yacc.py:2546:    (23) stat -> local function names . funcbody
   yacc.py:2546:    (24) funcbody -> . LPAREN RPAREN block end
   yacc.py:2546:    (25) funcbody -> . LPAREN parlist RPAREN block end
   yacc.py:2547:
   yacc.py:2658:    LPAREN          shift and go to state 119
   yacc.py:2660:
   yacc.py:2685:    funcbody                       shift and go to state 170
   yacc.py:2542:
   yacc.py:2543:state 114
   yacc.py:2544:
   yacc.py:2546:    (21) stat -> local namelist EQUALS . explist
   yacc.py:2546:    (53) explist -> . explist COMMA exp
   yacc.py:2546:    (54) explist -> . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 108
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    explist                        shift and go to state 171
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 115
   yacc.py:2544:
   yacc.py:2546:    (44) comid -> COMMA . names comid
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    names                          shift and go to state 172
   yacc.py:2542:
   yacc.py:2543:state 116
   yacc.py:2544:
   yacc.py:2546:    (45) comid -> empty .
   yacc.py:2547:
   yacc.py:2658:    EQUALS          reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    SEMI            reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    return          reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    break           reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    do              reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    while           reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    repeat          reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    if              reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    for             reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    local           reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    function        reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    LPAREN          reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    ID              reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    RESID           reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    $end            reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    end             reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    until           reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    else            reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    elseif          reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    COMMA           reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    RPAREN          reduce using rule 45 (comid -> empty .)
   yacc.py:2658:    in              reduce using rule 45 (comid -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 117
   yacc.py:2544:
   yacc.py:2546:    (52) namelist -> names comid .
   yacc.py:2547:
   yacc.py:2658:    in              reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    COMMA           reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    RPAREN          reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    EQUALS          reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    SEMI            reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    return          reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    break           reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    do              reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    while           reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    repeat          reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    if              reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    for             reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    local           reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    function        reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    LPAREN          reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    ID              reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    RESID           reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    $end            reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    end             reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    until           reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    else            reduce using rule 52 (namelist -> names comid .)
   yacc.py:2658:    elseif          reduce using rule 52 (namelist -> names comid .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 118
   yacc.py:2544:
   yacc.py:2546:    (22) stat -> function funcname funcbody .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    return          reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    break           reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    do              reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    while           reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    repeat          reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    if              reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    for             reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    local           reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    function        reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    LPAREN          reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    ID              reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    RESID           reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    end             reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    else            reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    elseif          reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    $end            reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2658:    until           reduce using rule 22 (stat -> function funcname funcbody .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 119
   yacc.py:2544:
   yacc.py:2546:    (24) funcbody -> LPAREN . RPAREN block end
   yacc.py:2546:    (25) funcbody -> LPAREN . parlist RPAREN block end
   yacc.py:2546:    (31) parlist -> . namelist
   yacc.py:2546:    (32) parlist -> . namelist comtrp
   yacc.py:2546:    (33) parlist -> . TRPLDOTS
   yacc.py:2546:    (52) namelist -> . names comid
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    RPAREN          shift and go to state 176
   yacc.py:2658:    TRPLDOTS        shift and go to state 174
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    namelist                       shift and go to state 173
   yacc.py:2685:    parlist                        shift and go to state 175
   yacc.py:2685:    names                          shift and go to state 57
   yacc.py:2542:
   yacc.py:2543:state 120
   yacc.py:2544:
   yacc.py:2546:    (40) dotid -> SDOT . names dotid
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    names                          shift and go to state 177
   yacc.py:2542:
   yacc.py:2543:state 121
   yacc.py:2544:
   yacc.py:2546:    (38) funcname -> names dotid . COLON
   yacc.py:2547:
   yacc.py:2658:    COLON           shift and go to state 178
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 122
   yacc.py:2544:
   yacc.py:2546:    (41) dotid -> empty .
   yacc.py:2547:
   yacc.py:2658:    COLON           reduce using rule 41 (dotid -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 123
   yacc.py:2544:
   yacc.py:2546:    (11) stat -> do block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 11 (stat -> do block end .)
   yacc.py:2658:    return          reduce using rule 11 (stat -> do block end .)
   yacc.py:2658:    break           reduce using rule 11 (stat -> do block end .)
   yacc.py:2658:    do              reduce using rule 11 (stat -> do block end .)
   yacc.py:2658:    while           reduce using rule 11 (stat -> do block end .)
   yacc.py:2658:    repeat          reduce using rule 11 (stat -> do block end .)
   yacc.py:2658:    if              reduce using rule 11 (stat -> do block end .)
   yacc.py:2658:    for             reduce using rule 11 (stat -> do block end .)
   yacc.py:2658:    local           reduce using rule 11 (stat -> do block end .)
   yacc.py:2658:    function        reduce using rule 11 (stat -> do block end .)
   yacc.py:2658:    LPAREN          reduce using rule 11 (stat -> do block end .)
   yacc.py:2658:    ID              reduce using rule 11 (stat -> do block end .)
   yacc.py:2658:    RESID           reduce using rule 11 (stat -> do block end .)
   yacc.py:2658:    end             reduce using rule 11 (stat -> do block end .)
   yacc.py:2658:    else            reduce using rule 11 (stat -> do block end .)
   yacc.py:2658:    elseif          reduce using rule 11 (stat -> do block end .)
   yacc.py:2658:    $end            reduce using rule 11 (stat -> do block end .)
   yacc.py:2658:    until           reduce using rule 11 (stat -> do block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 124
   yacc.py:2544:
   yacc.py:2546:    (14) stat -> repeat block until . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 179
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 125
   yacc.py:2544:
   yacc.py:2546:    (80) retexplist -> retexplist COMMA . retexp
   yacc.py:2546:    (82) retexp -> . nil
   yacc.py:2546:    (83) retexp -> . false
   yacc.py:2546:    (84) retexp -> . true
   yacc.py:2546:    (85) retexp -> . Number
   yacc.py:2546:    (86) retexp -> . STRING
   yacc.py:2546:    (87) retexp -> . TRPLDOTS
   yacc.py:2546:    (88) retexp -> . prefixexp
   yacc.py:2546:    (89) retexp -> . exp PLUS exp
   yacc.py:2546:    (90) retexp -> . exp MINUS exp
   yacc.py:2546:    (91) retexp -> . exp TIMES exp
   yacc.py:2546:    (92) retexp -> . exp DIVIDE exp
   yacc.py:2546:    (93) retexp -> . exp POWER exp
   yacc.py:2546:    (94) retexp -> . exp LT exp
   yacc.py:2546:    (95) retexp -> . exp LE exp
   yacc.py:2546:    (96) retexp -> . exp GT exp
   yacc.py:2546:    (97) retexp -> . exp GE exp
   yacc.py:2546:    (98) retexp -> . exp NE exp
   yacc.py:2546:    (99) retexp -> . exp CHECKEQ exp
   yacc.py:2546:    (100) retexp -> . exp and exp
   yacc.py:2546:    (101) retexp -> . exp or exp
   yacc.py:2546:    (102) retexp -> . exp MODULO exp
   yacc.py:2546:    (103) retexp -> . exp DBLDOTS exp
   yacc.py:2546:    (104) retexp -> . tableconstructor
   yacc.py:2546:    (105) retexp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 70
   yacc.py:2658:    false           shift and go to state 65
   yacc.py:2658:    true            shift and go to state 71
   yacc.py:2658:    STRING          shift and go to state 69
   yacc.py:2658:    TRPLDOTS        shift and go to state 66
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 67
   yacc.py:2685:    tableconstructor               shift and go to state 64
   yacc.py:2685:    retexp                         shift and go to state 180
   yacc.py:2685:    Number                         shift and go to state 72
   yacc.py:2685:    unop                           shift and go to state 75
   yacc.py:2685:    exp                            shift and go to state 74
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 126
   yacc.py:2544:
   yacc.py:2546:    (100) retexp -> exp and . exp
   yacc.py:2546:    (74) exp -> exp and . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 181
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 127
   yacc.py:2544:
   yacc.py:2546:    (95) retexp -> exp LE . exp
   yacc.py:2546:    (69) exp -> exp LE . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 182
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 128
   yacc.py:2544:
   yacc.py:2546:    (102) retexp -> exp MODULO . exp
   yacc.py:2546:    (76) exp -> exp MODULO . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 183
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 129
   yacc.py:2544:
   yacc.py:2546:    (92) retexp -> exp DIVIDE . exp
   yacc.py:2546:    (66) exp -> exp DIVIDE . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 184
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 130
   yacc.py:2544:
   yacc.py:2546:    (93) retexp -> exp POWER . exp
   yacc.py:2546:    (67) exp -> exp POWER . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 185
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 131
   yacc.py:2544:
   yacc.py:2546:    (101) retexp -> exp or . exp
   yacc.py:2546:    (75) exp -> exp or . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 186
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 132
   yacc.py:2544:
   yacc.py:2546:    (97) retexp -> exp GE . exp
   yacc.py:2546:    (71) exp -> exp GE . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 187
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 133
   yacc.py:2544:
   yacc.py:2546:    (91) retexp -> exp TIMES . exp
   yacc.py:2546:    (65) exp -> exp TIMES . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 188
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 134
   yacc.py:2544:
   yacc.py:2546:    (99) retexp -> exp CHECKEQ . exp
   yacc.py:2546:    (73) exp -> exp CHECKEQ . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 189
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 135
   yacc.py:2544:
   yacc.py:2546:    (94) retexp -> exp LT . exp
   yacc.py:2546:    (68) exp -> exp LT . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 190
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 136
   yacc.py:2544:
   yacc.py:2546:    (96) retexp -> exp GT . exp
   yacc.py:2546:    (70) exp -> exp GT . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 191
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 137
   yacc.py:2544:
   yacc.py:2546:    (89) retexp -> exp PLUS . exp
   yacc.py:2546:    (63) exp -> exp PLUS . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 192
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 138
   yacc.py:2544:
   yacc.py:2546:    (103) retexp -> exp DBLDOTS . exp
   yacc.py:2546:    (77) exp -> exp DBLDOTS . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 193
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 139
   yacc.py:2544:
   yacc.py:2546:    (90) retexp -> exp MINUS . exp
   yacc.py:2546:    (64) exp -> exp MINUS . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 194
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 140
   yacc.py:2544:
   yacc.py:2546:    (98) retexp -> exp NE . exp
   yacc.py:2546:    (72) exp -> exp NE . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 195
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 141
   yacc.py:2544:
   yacc.py:2546:    (105) retexp -> unop exp .
   yacc.py:2546:    (79) exp -> unop exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 105 (retexp -> unop exp .)
   yacc.py:2658:    $end            reduce using rule 105 (retexp -> unop exp .)
   yacc.py:2658:    SEMI            reduce using rule 105 (retexp -> unop exp .)
   yacc.py:2658:    end             reduce using rule 105 (retexp -> unop exp .)
   yacc.py:2658:    until           reduce using rule 105 (retexp -> unop exp .)
   yacc.py:2658:    else            reduce using rule 105 (retexp -> unop exp .)
   yacc.py:2658:    elseif          reduce using rule 105 (retexp -> unop exp .)
   yacc.py:2658:    PLUS            reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    MINUS           reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    TIMES           reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    LT              reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    LE              reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    GT              reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    GE              reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    NE              reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    and             reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    or              reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    MODULO          reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 79 (exp -> unop exp .)
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 79 (exp -> unop exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 95 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 98 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 91 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 100 ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 96 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 142
   yacc.py:2544:
   yacc.py:2546:    (19) stat -> for namelist in . explist do block end
   yacc.py:2546:    (53) explist -> . explist COMMA exp
   yacc.py:2546:    (54) explist -> . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 108
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    explist                        shift and go to state 196
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 143
   yacc.py:2544:
   yacc.py:2546:    (17) stat -> for names EQUALS . exp COMMA exp do block end
   yacc.py:2546:    (18) stat -> for names EQUALS . exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2685:    exp                            shift and go to state 197
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2542:
   yacc.py:2543:state 144
   yacc.py:2544:
   yacc.py:2546:    (13) stat -> while exp do . block end
   yacc.py:2546:    (9) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat
   yacc.py:2546:    (3) sdash -> . laststat
   yacc.py:2546:    (4) sdash -> . chunk laststat SEMI
   yacc.py:2546:    (5) chunk -> . chunk stat
   yacc.py:2546:    (6) chunk -> . chunk stat SEMI
   yacc.py:2546:    (7) chunk -> . stat SEMI
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (35) laststat -> . return retexplist
   yacc.py:2546:    (36) laststat -> . return
   yacc.py:2546:    (37) laststat -> . break
   yacc.py:2546:    (10) stat -> . varlist EQUALS explist
   yacc.py:2546:    (11) stat -> . do block end
   yacc.py:2546:    (12) stat -> . functioncall
   yacc.py:2546:    (13) stat -> . while exp do block end
   yacc.py:2546:    (14) stat -> . repeat block until exp
   yacc.py:2546:    (15) stat -> . if exp then block ifblock else block end
   yacc.py:2546:    (16) stat -> . if exp then block ifblock end
   yacc.py:2546:    (17) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (18) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (19) stat -> . for namelist in explist do block end
   yacc.py:2546:    (20) stat -> . local namelist
   yacc.py:2546:    (21) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (48) varlist -> . var comvar
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    if              shift and go to state 5
   yacc.py:2658:    for             shift and go to state 19
   yacc.py:2658:    local           shift and go to state 11
   yacc.py:2658:    function        shift and go to state 12
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 6
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    varlist                        shift and go to state 7
   yacc.py:2685:    chunk                          shift and go to state 3
   yacc.py:2685:    laststat                       shift and go to state 8
   yacc.py:2685:    sdash                          shift and go to state 60
   yacc.py:2685:    var                            shift and go to state 9
   yacc.py:2685:    functioncall                   shift and go to state 10
   yacc.py:2685:    block                          shift and go to state 198
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 145
   yacc.py:2544:
   yacc.py:2546:    (123) field -> names EQUALS . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2685:    exp                            shift and go to state 199
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2542:
   yacc.py:2543:state 146
   yacc.py:2544:
   yacc.py:2546:    (118) fieldlist -> field fieldseplist . fieldsep
   yacc.py:2546:    (119) fieldlist -> field fieldseplist .
   yacc.py:2546:    (120) fieldseplist -> fieldseplist . fieldsep field
   yacc.py:2546:    (125) fieldsep -> . COMMA
   yacc.py:2546:    (126) fieldsep -> . SEMI
   yacc.py:2547:
   yacc.py:2658:    RCURLY          reduce using rule 119 (fieldlist -> field fieldseplist .)
   yacc.py:2658:    COMMA           shift and go to state 201
   yacc.py:2658:    SEMI            shift and go to state 202
   yacc.py:2660:
   yacc.py:2685:    fieldsep                       shift and go to state 200
   yacc.py:2542:
   yacc.py:2543:state 147
   yacc.py:2544:
   yacc.py:2546:    (121) fieldseplist -> empty .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 121 (fieldseplist -> empty .)
   yacc.py:2658:    SEMI            reduce using rule 121 (fieldseplist -> empty .)
   yacc.py:2658:    RCURLY          reduce using rule 121 (fieldseplist -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 148
   yacc.py:2544:
   yacc.py:2546:    (116) tableconstructor -> LCURLY fieldlist RCURLY .
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    MINUS           reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    TIMES           reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    DIVIDE          reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    POWER           reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    LT              reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    LE              reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    GT              reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    GE              reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    NE              reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    CHECKEQ         reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    and             reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    or              reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    MODULO          reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    DBLDOTS         reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    COMMA           reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    $end            reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    SEMI            reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    end             reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    until           reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    else            reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    elseif          reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    RCURLY          reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    RPAREN          reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    then            reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    do              reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    RSQUARE         reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    return          reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    break           reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    while           reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    repeat          reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    if              reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    for             reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    local           reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    function        reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    LPAREN          reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    ID              reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    RESID           reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    LSQUARE         reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    SDOT            reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    STRING          reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2658:    LCURLY          reduce using rule 116 (tableconstructor -> LCURLY fieldlist RCURLY .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 149
   yacc.py:2544:
   yacc.py:2546:    (122) field -> LSQUARE exp . RSQUARE EQUALS exp
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    RSQUARE         shift and go to state 203
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    LT              shift and go to state 93
   yacc.py:2658:    LE              shift and go to state 86
   yacc.py:2658:    GT              shift and go to state 94
   yacc.py:2658:    GE              shift and go to state 90
   yacc.py:2658:    NE              shift and go to state 99
   yacc.py:2658:    CHECKEQ         shift and go to state 92
   yacc.py:2658:    and             shift and go to state 85
   yacc.py:2658:    or              shift and go to state 89
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 150
   yacc.py:2544:
   yacc.py:2546:    (74) exp -> exp and exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    LE              reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    GT              reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    GE              reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    NE              reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    and             reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    or              reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    RPAREN          reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    then            reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    do              reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    COMMA           reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    SEMI            reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    RCURLY          reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    return          reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    break           reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    while           reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    repeat          reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    if              reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    for             reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    local           reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    function        reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    LPAREN          reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    ID              reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    RESID           reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    $end            reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    end             reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    until           reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    else            reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    elseif          reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 74 (exp -> exp and exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 74 (exp -> exp and exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 74 (exp -> exp and exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 74 (exp -> exp and exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 74 (exp -> exp and exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 74 (exp -> exp and exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 74 (exp -> exp and exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 151
   yacc.py:2544:
   yacc.py:2546:    (69) exp -> exp LE exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    LE              reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    GT              reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    GE              reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    NE              reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    and             reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    or              reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    RPAREN          reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    then            reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    do              reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    COMMA           reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    SEMI            reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    RCURLY          reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    return          reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    break           reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    while           reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    repeat          reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    if              reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    for             reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    local           reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    function        reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    LPAREN          reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    ID              reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    RESID           reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    $end            reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    end             reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    until           reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    else            reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    elseif          reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 69 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 69 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 69 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 69 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 69 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 69 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 69 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 152
   yacc.py:2544:
   yacc.py:2546:    (67) exp -> exp POWER exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    MINUS           reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    TIMES           reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    LT              reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    LE              reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    GT              reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    GE              reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    NE              reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    and             reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    or              reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    MODULO          reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    RPAREN          reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    then            reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    do              reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    COMMA           reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    SEMI            reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    RCURLY          reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    return          reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    break           reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    while           reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    repeat          reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    if              reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    for             reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    local           reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    function        reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    LPAREN          reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    ID              reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    RESID           reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    $end            reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    end             reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    until           reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    else            reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    elseif          reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 67 (exp -> exp POWER exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 95 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 98 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 91 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 100 ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 96 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 153
   yacc.py:2544:
   yacc.py:2546:    (75) exp -> exp or exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    LE              reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    GT              reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    GE              reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    NE              reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    and             reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    or              reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    RPAREN          reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    then            reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    do              reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    COMMA           reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    SEMI            reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    RCURLY          reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    return          reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    break           reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    while           reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    repeat          reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    if              reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    for             reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    local           reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    function        reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    LPAREN          reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    ID              reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    RESID           reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    $end            reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    end             reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    until           reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    else            reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    elseif          reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 75 (exp -> exp or exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 75 (exp -> exp or exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 75 (exp -> exp or exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 75 (exp -> exp or exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 75 (exp -> exp or exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 75 (exp -> exp or exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 75 (exp -> exp or exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 154
   yacc.py:2544:
   yacc.py:2546:    (71) exp -> exp GE exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    LE              reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    GT              reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    GE              reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    NE              reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    and             reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    or              reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    RPAREN          reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    then            reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    do              reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    COMMA           reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    SEMI            reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    RCURLY          reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    return          reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    break           reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    while           reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    repeat          reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    if              reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    for             reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    local           reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    function        reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    LPAREN          reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    ID              reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    RESID           reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    $end            reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    end             reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    until           reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    else            reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    elseif          reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 71 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 71 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 71 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 71 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 71 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 71 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 71 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 155
   yacc.py:2544:
   yacc.py:2546:    (65) exp -> exp TIMES exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    MINUS           reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    TIMES           reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    LT              reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    LE              reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    GT              reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    GE              reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    NE              reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    and             reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    or              reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    MODULO          reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    RPAREN          reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    then            reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    do              reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    COMMA           reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    SEMI            reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    RCURLY          reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    return          reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    break           reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    while           reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    repeat          reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    if              reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    for             reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    local           reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    function        reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    LPAREN          reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    ID              reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    RESID           reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    $end            reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    end             reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    until           reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    else            reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    elseif          reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 65 (exp -> exp TIMES exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 95 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 98 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 91 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 100 ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 96 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 156
   yacc.py:2544:
   yacc.py:2546:    (73) exp -> exp CHECKEQ exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    LE              reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    GT              reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    GE              reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    NE              reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    and             reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    or              reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    RPAREN          reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    then            reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    do              reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    COMMA           reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    SEMI            reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    RCURLY          reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    return          reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    break           reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    while           reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    repeat          reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    if              reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    for             reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    local           reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    function        reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    LPAREN          reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    ID              reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    RESID           reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    $end            reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    end             reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    until           reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    else            reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    elseif          reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 73 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 73 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 73 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 73 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 73 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 73 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 73 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 157
   yacc.py:2544:
   yacc.py:2546:    (68) exp -> exp LT exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    LE              reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    GT              reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    GE              reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    NE              reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    and             reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    or              reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    RPAREN          reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    then            reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    do              reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    COMMA           reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    SEMI            reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    RCURLY          reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    return          reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    break           reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    while           reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    repeat          reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    if              reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    for             reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    local           reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    function        reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    LPAREN          reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    ID              reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    RESID           reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    $end            reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    end             reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    until           reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    else            reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    elseif          reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 68 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 68 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 68 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 68 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 68 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 68 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 68 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 158
   yacc.py:2544:
   yacc.py:2546:    (70) exp -> exp GT exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    LE              reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    GT              reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    GE              reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    NE              reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    and             reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    or              reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    RPAREN          reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    then            reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    do              reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    COMMA           reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    SEMI            reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    RCURLY          reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    return          reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    break           reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    while           reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    repeat          reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    if              reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    for             reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    local           reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    function        reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    LPAREN          reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    ID              reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    RESID           reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    $end            reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    end             reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    until           reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    else            reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    elseif          reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 70 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 70 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 70 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 70 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 70 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 70 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 70 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 159
   yacc.py:2544:
   yacc.py:2546:    (63) exp -> exp PLUS exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    MINUS           reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    LT              reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    LE              reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    GT              reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    GE              reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    NE              reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    and             reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    or              reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    RPAREN          reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    then            reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    do              reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    COMMA           reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    SEMI            reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    RCURLY          reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    return          reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    break           reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    while           reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    repeat          reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    if              reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    for             reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    local           reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    function        reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    LPAREN          reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    ID              reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    RESID           reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    $end            reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    end             reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    until           reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    else            reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    elseif          reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2660:
   yacc.py:2667:  ! TIMES           [ reduce using rule 63 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 63 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 63 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 63 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 95 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 98 ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 160
   yacc.py:2544:
   yacc.py:2546:    (76) exp -> exp MODULO exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    MINUS           reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    TIMES           reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    LT              reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    LE              reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    GT              reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    GE              reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    NE              reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    and             reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    or              reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    MODULO          reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    RPAREN          reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    then            reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    do              reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    COMMA           reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    SEMI            reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    RCURLY          reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    return          reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    break           reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    while           reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    repeat          reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    if              reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    for             reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    local           reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    function        reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    LPAREN          reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    ID              reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    RESID           reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    $end            reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    end             reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    until           reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    else            reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    elseif          reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 76 (exp -> exp MODULO exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 95 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 98 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 91 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 100 ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 96 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 161
   yacc.py:2544:
   yacc.py:2546:    (77) exp -> exp DBLDOTS exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    LE              reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    GT              reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    GE              reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    NE              reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    and             reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    or              reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    RPAREN          reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    then            reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    do              reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    COMMA           reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    SEMI            reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    RCURLY          reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    return          reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    break           reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    while           reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    repeat          reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    if              reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    for             reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    local           reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    function        reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    LPAREN          reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    ID              reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    RESID           reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    $end            reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    end             reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    until           reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    else            reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    elseif          reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 77 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 77 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 77 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 77 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 77 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 77 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 77 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 162
   yacc.py:2544:
   yacc.py:2546:    (64) exp -> exp MINUS exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    MINUS           reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    LT              reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    LE              reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    GT              reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    GE              reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    NE              reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    and             reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    or              reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    RPAREN          reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    then            reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    do              reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    COMMA           reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    SEMI            reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    RCURLY          reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    return          reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    break           reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    while           reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    repeat          reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    if              reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    for             reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    local           reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    function        reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    LPAREN          reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    ID              reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    RESID           reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    $end            reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    end             reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    until           reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    else            reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    elseif          reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2660:
   yacc.py:2667:  ! TIMES           [ reduce using rule 64 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 64 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 64 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 64 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 95 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 98 ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 163
   yacc.py:2544:
   yacc.py:2546:    (72) exp -> exp NE exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    LT              reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    LE              reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    GT              reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    GE              reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    NE              reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    and             reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    or              reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    RPAREN          reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    then            reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    do              reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    COMMA           reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    SEMI            reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    RCURLY          reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    return          reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    break           reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    while           reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    repeat          reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    if              reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    for             reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    local           reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    function        reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    LPAREN          reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    ID              reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    RESID           reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    $end            reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    end             reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    until           reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    else            reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    elseif          reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 72 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 72 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 72 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 72 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 72 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 72 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 72 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 164
   yacc.py:2544:
   yacc.py:2546:    (66) exp -> exp DIVIDE exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    PLUS            reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    MINUS           reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    TIMES           reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    LT              reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    LE              reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    GT              reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    GE              reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    NE              reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    and             reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    or              reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    MODULO          reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    RPAREN          reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    then            reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    do              reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    COMMA           reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    SEMI            reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    RCURLY          reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    RSQUARE         reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    return          reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    break           reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    while           reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    repeat          reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    if              reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    for             reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    local           reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    function        reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    LPAREN          reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    ID              reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    RESID           reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    $end            reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    end             reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    until           reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    else            reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    elseif          reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 66 (exp -> exp DIVIDE exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 95 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 98 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 91 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 100 ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 96 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 165
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> if exp then block . ifblock else block end
   yacc.py:2546:    (16) stat -> if exp then block . ifblock end
   yacc.py:2546:    (46) ifblock -> . ifblock elseif exp then block
   yacc.py:2546:    (47) ifblock -> . empty
   yacc.py:2546:    (109) empty -> .
   yacc.py:2547:
   yacc.py:2658:    else            reduce using rule 109 (empty -> .)
   yacc.py:2658:    end             reduce using rule 109 (empty -> .)
   yacc.py:2658:    elseif          reduce using rule 109 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    empty                          shift and go to state 204
   yacc.py:2685:    ifblock                        shift and go to state 205
   yacc.py:2542:
   yacc.py:2543:state 166
   yacc.py:2544:
   yacc.py:2546:    (50) var -> prefixexp LSQUARE exp RSQUARE .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    SDOT            reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    LPAREN          reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    STRING          reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    LCURLY          reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    PLUS            reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    MINUS           reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    TIMES           reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    DIVIDE          reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    POWER           reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    LT              reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    LE              reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    GT              reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    GE              reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    NE              reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    CHECKEQ         reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    and             reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    or              reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    MODULO          reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    DBLDOTS         reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    COMMA           reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    $end            reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    SEMI            reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    end             reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    until           reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    else            reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    elseif          reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    EQUALS          reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    RCURLY          reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    RPAREN          reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    then            reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    do              reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    RSQUARE         reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    return          reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    break           reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    while           reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    repeat          reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    if              reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    for             reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    local           reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    function        reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    ID              reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2658:    RESID           reduce using rule 50 (var -> prefixexp LSQUARE exp RSQUARE .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 167
   yacc.py:2544:
   yacc.py:2546:    (53) explist -> explist COMMA . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 206
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 168
   yacc.py:2544:
   yacc.py:2546:    (28) args -> LPAREN explist RPAREN .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    SDOT            reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    LPAREN          reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    STRING          reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    LCURLY          reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    COMMA           reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    $end            reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    SEMI            reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    end             reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    until           reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    else            reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    elseif          reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    PLUS            reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    MINUS           reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    TIMES           reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    DIVIDE          reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    POWER           reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    LT              reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    LE              reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    GT              reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    GE              reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    NE              reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    CHECKEQ         reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    and             reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    or              reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    MODULO          reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    DBLDOTS         reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    return          reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    break           reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    do              reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    while           reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    repeat          reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    if              reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    for             reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    local           reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    function        reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    ID              reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    RESID           reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    RPAREN          reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    then            reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    RCURLY          reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2658:    RSQUARE         reduce using rule 28 (args -> LPAREN explist RPAREN .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 169
   yacc.py:2544:
   yacc.py:2546:    (42) comvar -> COMMA var comvar .
   yacc.py:2547:
   yacc.py:2658:    EQUALS          reduce using rule 42 (comvar -> COMMA var comvar .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 170
   yacc.py:2544:
   yacc.py:2546:    (23) stat -> local function names funcbody .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    return          reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    break           reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    do              reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    while           reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    repeat          reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    if              reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    for             reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    local           reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    function        reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    LPAREN          reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    ID              reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    RESID           reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    end             reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    else            reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    elseif          reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    $end            reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2658:    until           reduce using rule 23 (stat -> local function names funcbody .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 171
   yacc.py:2544:
   yacc.py:2546:    (21) stat -> local namelist EQUALS explist .
   yacc.py:2546:    (53) explist -> explist . COMMA exp
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    return          reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    break           reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    do              reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    while           reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    repeat          reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    if              reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    for             reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    local           reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    function        reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    LPAREN          reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    ID              reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    RESID           reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    end             reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    else            reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    elseif          reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    $end            reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    until           reduce using rule 21 (stat -> local namelist EQUALS explist .)
   yacc.py:2658:    COMMA           shift and go to state 167
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 172
   yacc.py:2544:
   yacc.py:2546:    (44) comid -> COMMA names . comid
   yacc.py:2546:    (44) comid -> . COMMA names comid
   yacc.py:2546:    (45) comid -> . empty
   yacc.py:2546:    (109) empty -> .
   yacc.py:2547:
   yacc.py:2658:    COMMA           shift and go to state 115
   yacc.py:2658:    EQUALS          reduce using rule 109 (empty -> .)
   yacc.py:2658:    SEMI            reduce using rule 109 (empty -> .)
   yacc.py:2658:    return          reduce using rule 109 (empty -> .)
   yacc.py:2658:    break           reduce using rule 109 (empty -> .)
   yacc.py:2658:    do              reduce using rule 109 (empty -> .)
   yacc.py:2658:    while           reduce using rule 109 (empty -> .)
   yacc.py:2658:    repeat          reduce using rule 109 (empty -> .)
   yacc.py:2658:    if              reduce using rule 109 (empty -> .)
   yacc.py:2658:    for             reduce using rule 109 (empty -> .)
   yacc.py:2658:    local           reduce using rule 109 (empty -> .)
   yacc.py:2658:    function        reduce using rule 109 (empty -> .)
   yacc.py:2658:    LPAREN          reduce using rule 109 (empty -> .)
   yacc.py:2658:    ID              reduce using rule 109 (empty -> .)
   yacc.py:2658:    RESID           reduce using rule 109 (empty -> .)
   yacc.py:2658:    $end            reduce using rule 109 (empty -> .)
   yacc.py:2658:    end             reduce using rule 109 (empty -> .)
   yacc.py:2658:    until           reduce using rule 109 (empty -> .)
   yacc.py:2658:    else            reduce using rule 109 (empty -> .)
   yacc.py:2658:    elseif          reduce using rule 109 (empty -> .)
   yacc.py:2658:    RPAREN          reduce using rule 109 (empty -> .)
   yacc.py:2658:    in              reduce using rule 109 (empty -> .)
   yacc.py:2660:
   yacc.py:2667:  ! COMMA           [ reduce using rule 109 (empty -> .) ]
   yacc.py:2671:
   yacc.py:2685:    empty                          shift and go to state 116
   yacc.py:2685:    comid                          shift and go to state 207
   yacc.py:2542:
   yacc.py:2543:state 173
   yacc.py:2544:
   yacc.py:2546:    (31) parlist -> namelist .
   yacc.py:2546:    (32) parlist -> namelist . comtrp
   yacc.py:2546:    (34) comtrp -> . COMMA TRPLDOTS
   yacc.py:2547:
   yacc.py:2658:    RPAREN          reduce using rule 31 (parlist -> namelist .)
   yacc.py:2658:    COMMA           shift and go to state 208
   yacc.py:2660:
   yacc.py:2685:    comtrp                         shift and go to state 209
   yacc.py:2542:
   yacc.py:2543:state 174
   yacc.py:2544:
   yacc.py:2546:    (33) parlist -> TRPLDOTS .
   yacc.py:2547:
   yacc.py:2658:    RPAREN          reduce using rule 33 (parlist -> TRPLDOTS .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 175
   yacc.py:2544:
   yacc.py:2546:    (25) funcbody -> LPAREN parlist . RPAREN block end
   yacc.py:2547:
   yacc.py:2658:    RPAREN          shift and go to state 210
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 176
   yacc.py:2544:
   yacc.py:2546:    (24) funcbody -> LPAREN RPAREN . block end
   yacc.py:2546:    (9) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat
   yacc.py:2546:    (3) sdash -> . laststat
   yacc.py:2546:    (4) sdash -> . chunk laststat SEMI
   yacc.py:2546:    (5) chunk -> . chunk stat
   yacc.py:2546:    (6) chunk -> . chunk stat SEMI
   yacc.py:2546:    (7) chunk -> . stat SEMI
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (35) laststat -> . return retexplist
   yacc.py:2546:    (36) laststat -> . return
   yacc.py:2546:    (37) laststat -> . break
   yacc.py:2546:    (10) stat -> . varlist EQUALS explist
   yacc.py:2546:    (11) stat -> . do block end
   yacc.py:2546:    (12) stat -> . functioncall
   yacc.py:2546:    (13) stat -> . while exp do block end
   yacc.py:2546:    (14) stat -> . repeat block until exp
   yacc.py:2546:    (15) stat -> . if exp then block ifblock else block end
   yacc.py:2546:    (16) stat -> . if exp then block ifblock end
   yacc.py:2546:    (17) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (18) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (19) stat -> . for namelist in explist do block end
   yacc.py:2546:    (20) stat -> . local namelist
   yacc.py:2546:    (21) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (48) varlist -> . var comvar
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    if              shift and go to state 5
   yacc.py:2658:    for             shift and go to state 19
   yacc.py:2658:    local           shift and go to state 11
   yacc.py:2658:    function        shift and go to state 12
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 6
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    varlist                        shift and go to state 7
   yacc.py:2685:    chunk                          shift and go to state 3
   yacc.py:2685:    laststat                       shift and go to state 8
   yacc.py:2685:    block                          shift and go to state 211
   yacc.py:2685:    var                            shift and go to state 9
   yacc.py:2685:    functioncall                   shift and go to state 10
   yacc.py:2685:    sdash                          shift and go to state 60
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 177
   yacc.py:2544:
   yacc.py:2546:    (40) dotid -> SDOT names . dotid
   yacc.py:2546:    (40) dotid -> . SDOT names dotid
   yacc.py:2546:    (41) dotid -> . empty
   yacc.py:2546:    (109) empty -> .
   yacc.py:2547:
   yacc.py:2658:    SDOT            shift and go to state 120
   yacc.py:2658:    COLON           reduce using rule 109 (empty -> .)
   yacc.py:2660:
   yacc.py:2685:    dotid                          shift and go to state 212
   yacc.py:2685:    empty                          shift and go to state 122
   yacc.py:2542:
   yacc.py:2543:state 178
   yacc.py:2544:
   yacc.py:2546:    (38) funcname -> names dotid COLON .
   yacc.py:2547:
   yacc.py:2658:    LPAREN          reduce using rule 38 (funcname -> names dotid COLON .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 179
   yacc.py:2544:
   yacc.py:2546:    (14) stat -> repeat block until exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    return          reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    break           reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    do              reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    while           reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    repeat          reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    if              reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    for             reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    local           reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    function        reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    LPAREN          reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    ID              reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    RESID           reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    end             reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    else            reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    elseif          reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    $end            reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    until           reduce using rule 14 (stat -> repeat block until exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    LT              shift and go to state 93
   yacc.py:2658:    LE              shift and go to state 86
   yacc.py:2658:    GT              shift and go to state 94
   yacc.py:2658:    GE              shift and go to state 90
   yacc.py:2658:    NE              shift and go to state 99
   yacc.py:2658:    CHECKEQ         shift and go to state 92
   yacc.py:2658:    and             shift and go to state 85
   yacc.py:2658:    or              shift and go to state 89
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 180
   yacc.py:2544:
   yacc.py:2546:    (80) retexplist -> retexplist COMMA retexp .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 80 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    $end            reduce using rule 80 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    SEMI            reduce using rule 80 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    end             reduce using rule 80 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    until           reduce using rule 80 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    else            reduce using rule 80 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2658:    elseif          reduce using rule 80 (retexplist -> retexplist COMMA retexp .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 181
   yacc.py:2544:
   yacc.py:2546:    (100) retexp -> exp and exp .
   yacc.py:2546:    (74) exp -> exp and exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 100 (retexp -> exp and exp .)
   yacc.py:2658:    $end            reduce using rule 100 (retexp -> exp and exp .)
   yacc.py:2658:    SEMI            reduce using rule 100 (retexp -> exp and exp .)
   yacc.py:2658:    end             reduce using rule 100 (retexp -> exp and exp .)
   yacc.py:2658:    until           reduce using rule 100 (retexp -> exp and exp .)
   yacc.py:2658:    else            reduce using rule 100 (retexp -> exp and exp .)
   yacc.py:2658:    elseif          reduce using rule 100 (retexp -> exp and exp .)
   yacc.py:2658:    LT              reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    LE              reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    GT              reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    GE              reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    NE              reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    and             reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    or              reduce using rule 74 (exp -> exp and exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 74 (exp -> exp and exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 74 (exp -> exp and exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 74 (exp -> exp and exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 74 (exp -> exp and exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 74 (exp -> exp and exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 74 (exp -> exp and exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 74 (exp -> exp and exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 182
   yacc.py:2544:
   yacc.py:2546:    (95) retexp -> exp LE exp .
   yacc.py:2546:    (69) exp -> exp LE exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 95 (retexp -> exp LE exp .)
   yacc.py:2658:    $end            reduce using rule 95 (retexp -> exp LE exp .)
   yacc.py:2658:    SEMI            reduce using rule 95 (retexp -> exp LE exp .)
   yacc.py:2658:    end             reduce using rule 95 (retexp -> exp LE exp .)
   yacc.py:2658:    until           reduce using rule 95 (retexp -> exp LE exp .)
   yacc.py:2658:    else            reduce using rule 95 (retexp -> exp LE exp .)
   yacc.py:2658:    elseif          reduce using rule 95 (retexp -> exp LE exp .)
   yacc.py:2658:    LT              reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    LE              reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    GT              reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    GE              reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    NE              reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    and             reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    or              reduce using rule 69 (exp -> exp LE exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 69 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 69 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 69 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 69 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 69 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 69 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 69 (exp -> exp LE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 183
   yacc.py:2544:
   yacc.py:2546:    (102) retexp -> exp MODULO exp .
   yacc.py:2546:    (76) exp -> exp MODULO exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 102 (retexp -> exp MODULO exp .)
   yacc.py:2658:    $end            reduce using rule 102 (retexp -> exp MODULO exp .)
   yacc.py:2658:    SEMI            reduce using rule 102 (retexp -> exp MODULO exp .)
   yacc.py:2658:    end             reduce using rule 102 (retexp -> exp MODULO exp .)
   yacc.py:2658:    until           reduce using rule 102 (retexp -> exp MODULO exp .)
   yacc.py:2658:    else            reduce using rule 102 (retexp -> exp MODULO exp .)
   yacc.py:2658:    elseif          reduce using rule 102 (retexp -> exp MODULO exp .)
   yacc.py:2658:    PLUS            reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    MINUS           reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    TIMES           reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    LT              reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    LE              reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    GT              reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    GE              reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    NE              reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    and             reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    or              reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    MODULO          reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 76 (exp -> exp MODULO exp .)
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 76 (exp -> exp MODULO exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 95 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 98 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 91 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 100 ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 96 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 184
   yacc.py:2544:
   yacc.py:2546:    (92) retexp -> exp DIVIDE exp .
   yacc.py:2546:    (66) exp -> exp DIVIDE exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 92 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    $end            reduce using rule 92 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    SEMI            reduce using rule 92 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    end             reduce using rule 92 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    until           reduce using rule 92 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    else            reduce using rule 92 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    elseif          reduce using rule 92 (retexp -> exp DIVIDE exp .)
   yacc.py:2658:    PLUS            reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    MINUS           reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    TIMES           reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    LT              reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    LE              reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    GT              reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    GE              reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    NE              reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    and             reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    or              reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    MODULO          reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 66 (exp -> exp DIVIDE exp .)
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 66 (exp -> exp DIVIDE exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 95 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 98 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 91 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 100 ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 96 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 185
   yacc.py:2544:
   yacc.py:2546:    (93) retexp -> exp POWER exp .
   yacc.py:2546:    (67) exp -> exp POWER exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 93 (retexp -> exp POWER exp .)
   yacc.py:2658:    $end            reduce using rule 93 (retexp -> exp POWER exp .)
   yacc.py:2658:    SEMI            reduce using rule 93 (retexp -> exp POWER exp .)
   yacc.py:2658:    end             reduce using rule 93 (retexp -> exp POWER exp .)
   yacc.py:2658:    until           reduce using rule 93 (retexp -> exp POWER exp .)
   yacc.py:2658:    else            reduce using rule 93 (retexp -> exp POWER exp .)
   yacc.py:2658:    elseif          reduce using rule 93 (retexp -> exp POWER exp .)
   yacc.py:2658:    PLUS            reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    MINUS           reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    TIMES           reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    LT              reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    LE              reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    GT              reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    GE              reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    NE              reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    and             reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    or              reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    MODULO          reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 67 (exp -> exp POWER exp .)
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 67 (exp -> exp POWER exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 95 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 98 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 91 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 100 ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 96 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 186
   yacc.py:2544:
   yacc.py:2546:    (101) retexp -> exp or exp .
   yacc.py:2546:    (75) exp -> exp or exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 101 (retexp -> exp or exp .)
   yacc.py:2658:    $end            reduce using rule 101 (retexp -> exp or exp .)
   yacc.py:2658:    SEMI            reduce using rule 101 (retexp -> exp or exp .)
   yacc.py:2658:    end             reduce using rule 101 (retexp -> exp or exp .)
   yacc.py:2658:    until           reduce using rule 101 (retexp -> exp or exp .)
   yacc.py:2658:    else            reduce using rule 101 (retexp -> exp or exp .)
   yacc.py:2658:    elseif          reduce using rule 101 (retexp -> exp or exp .)
   yacc.py:2658:    LT              reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    LE              reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    GT              reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    GE              reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    NE              reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    and             reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    or              reduce using rule 75 (exp -> exp or exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 75 (exp -> exp or exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 75 (exp -> exp or exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 75 (exp -> exp or exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 75 (exp -> exp or exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 75 (exp -> exp or exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 75 (exp -> exp or exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 75 (exp -> exp or exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 187
   yacc.py:2544:
   yacc.py:2546:    (97) retexp -> exp GE exp .
   yacc.py:2546:    (71) exp -> exp GE exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 97 (retexp -> exp GE exp .)
   yacc.py:2658:    $end            reduce using rule 97 (retexp -> exp GE exp .)
   yacc.py:2658:    SEMI            reduce using rule 97 (retexp -> exp GE exp .)
   yacc.py:2658:    end             reduce using rule 97 (retexp -> exp GE exp .)
   yacc.py:2658:    until           reduce using rule 97 (retexp -> exp GE exp .)
   yacc.py:2658:    else            reduce using rule 97 (retexp -> exp GE exp .)
   yacc.py:2658:    elseif          reduce using rule 97 (retexp -> exp GE exp .)
   yacc.py:2658:    LT              reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    LE              reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    GT              reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    GE              reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    NE              reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    and             reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    or              reduce using rule 71 (exp -> exp GE exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 71 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 71 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 71 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 71 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 71 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 71 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 71 (exp -> exp GE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 188
   yacc.py:2544:
   yacc.py:2546:    (91) retexp -> exp TIMES exp .
   yacc.py:2546:    (65) exp -> exp TIMES exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 91 (retexp -> exp TIMES exp .)
   yacc.py:2658:    $end            reduce using rule 91 (retexp -> exp TIMES exp .)
   yacc.py:2658:    SEMI            reduce using rule 91 (retexp -> exp TIMES exp .)
   yacc.py:2658:    end             reduce using rule 91 (retexp -> exp TIMES exp .)
   yacc.py:2658:    until           reduce using rule 91 (retexp -> exp TIMES exp .)
   yacc.py:2658:    else            reduce using rule 91 (retexp -> exp TIMES exp .)
   yacc.py:2658:    elseif          reduce using rule 91 (retexp -> exp TIMES exp .)
   yacc.py:2658:    PLUS            reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    MINUS           reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    TIMES           reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    DIVIDE          reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    LT              reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    LE              reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    GT              reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    GE              reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    NE              reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    and             reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    or              reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    MODULO          reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 65 (exp -> exp TIMES exp .)
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2660:
   yacc.py:2667:  ! POWER           [ reduce using rule 65 (exp -> exp TIMES exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 95 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 98 ]
   yacc.py:2667:  ! TIMES           [ shift and go to state 91 ]
   yacc.py:2667:  ! DIVIDE          [ shift and go to state 100 ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2667:  ! MODULO          [ shift and go to state 96 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 189
   yacc.py:2544:
   yacc.py:2546:    (99) retexp -> exp CHECKEQ exp .
   yacc.py:2546:    (73) exp -> exp CHECKEQ exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 99 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    $end            reduce using rule 99 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    SEMI            reduce using rule 99 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    end             reduce using rule 99 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    until           reduce using rule 99 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    else            reduce using rule 99 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    elseif          reduce using rule 99 (retexp -> exp CHECKEQ exp .)
   yacc.py:2658:    LT              reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    LE              reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    GT              reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    GE              reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    NE              reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    and             reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    or              reduce using rule 73 (exp -> exp CHECKEQ exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 73 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 73 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 73 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 73 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 73 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 73 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 73 (exp -> exp CHECKEQ exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 190
   yacc.py:2544:
   yacc.py:2546:    (94) retexp -> exp LT exp .
   yacc.py:2546:    (68) exp -> exp LT exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 94 (retexp -> exp LT exp .)
   yacc.py:2658:    $end            reduce using rule 94 (retexp -> exp LT exp .)
   yacc.py:2658:    SEMI            reduce using rule 94 (retexp -> exp LT exp .)
   yacc.py:2658:    end             reduce using rule 94 (retexp -> exp LT exp .)
   yacc.py:2658:    until           reduce using rule 94 (retexp -> exp LT exp .)
   yacc.py:2658:    else            reduce using rule 94 (retexp -> exp LT exp .)
   yacc.py:2658:    elseif          reduce using rule 94 (retexp -> exp LT exp .)
   yacc.py:2658:    LT              reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    LE              reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    GT              reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    GE              reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    NE              reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    and             reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    or              reduce using rule 68 (exp -> exp LT exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 68 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 68 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 68 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 68 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 68 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 68 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 68 (exp -> exp LT exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 191
   yacc.py:2544:
   yacc.py:2546:    (96) retexp -> exp GT exp .
   yacc.py:2546:    (70) exp -> exp GT exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 96 (retexp -> exp GT exp .)
   yacc.py:2658:    $end            reduce using rule 96 (retexp -> exp GT exp .)
   yacc.py:2658:    SEMI            reduce using rule 96 (retexp -> exp GT exp .)
   yacc.py:2658:    end             reduce using rule 96 (retexp -> exp GT exp .)
   yacc.py:2658:    until           reduce using rule 96 (retexp -> exp GT exp .)
   yacc.py:2658:    else            reduce using rule 96 (retexp -> exp GT exp .)
   yacc.py:2658:    elseif          reduce using rule 96 (retexp -> exp GT exp .)
   yacc.py:2658:    LT              reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    LE              reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    GT              reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    GE              reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    NE              reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    and             reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    or              reduce using rule 70 (exp -> exp GT exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 70 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 70 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 70 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 70 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 70 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 70 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 70 (exp -> exp GT exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 192
   yacc.py:2544:
   yacc.py:2546:    (89) retexp -> exp PLUS exp .
   yacc.py:2546:    (63) exp -> exp PLUS exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 89 (retexp -> exp PLUS exp .)
   yacc.py:2658:    $end            reduce using rule 89 (retexp -> exp PLUS exp .)
   yacc.py:2658:    SEMI            reduce using rule 89 (retexp -> exp PLUS exp .)
   yacc.py:2658:    end             reduce using rule 89 (retexp -> exp PLUS exp .)
   yacc.py:2658:    until           reduce using rule 89 (retexp -> exp PLUS exp .)
   yacc.py:2658:    else            reduce using rule 89 (retexp -> exp PLUS exp .)
   yacc.py:2658:    elseif          reduce using rule 89 (retexp -> exp PLUS exp .)
   yacc.py:2658:    PLUS            reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    MINUS           reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    LT              reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    LE              reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    GT              reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    GE              reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    NE              reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    and             reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    or              reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 63 (exp -> exp PLUS exp .)
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2660:
   yacc.py:2667:  ! TIMES           [ reduce using rule 63 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 63 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 63 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 63 (exp -> exp PLUS exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 95 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 98 ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 193
   yacc.py:2544:
   yacc.py:2546:    (103) retexp -> exp DBLDOTS exp .
   yacc.py:2546:    (77) exp -> exp DBLDOTS exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 103 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    $end            reduce using rule 103 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    SEMI            reduce using rule 103 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    end             reduce using rule 103 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    until           reduce using rule 103 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    else            reduce using rule 103 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    elseif          reduce using rule 103 (retexp -> exp DBLDOTS exp .)
   yacc.py:2658:    LT              reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    LE              reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    GT              reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    GE              reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    NE              reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    and             reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    or              reduce using rule 77 (exp -> exp DBLDOTS exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 77 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 77 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 77 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 77 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 77 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 77 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 77 (exp -> exp DBLDOTS exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 194
   yacc.py:2544:
   yacc.py:2546:    (90) retexp -> exp MINUS exp .
   yacc.py:2546:    (64) exp -> exp MINUS exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 90 (retexp -> exp MINUS exp .)
   yacc.py:2658:    $end            reduce using rule 90 (retexp -> exp MINUS exp .)
   yacc.py:2658:    SEMI            reduce using rule 90 (retexp -> exp MINUS exp .)
   yacc.py:2658:    end             reduce using rule 90 (retexp -> exp MINUS exp .)
   yacc.py:2658:    until           reduce using rule 90 (retexp -> exp MINUS exp .)
   yacc.py:2658:    else            reduce using rule 90 (retexp -> exp MINUS exp .)
   yacc.py:2658:    elseif          reduce using rule 90 (retexp -> exp MINUS exp .)
   yacc.py:2658:    PLUS            reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    MINUS           reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    LT              reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    LE              reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    GT              reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    GE              reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    NE              reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    and             reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    or              reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    DBLDOTS         reduce using rule 64 (exp -> exp MINUS exp .)
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2660:
   yacc.py:2667:  ! TIMES           [ reduce using rule 64 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 64 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 64 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 64 (exp -> exp MINUS exp .) ]
   yacc.py:2667:  ! PLUS            [ shift and go to state 95 ]
   yacc.py:2667:  ! MINUS           [ shift and go to state 98 ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2667:  ! DBLDOTS         [ shift and go to state 97 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 195
   yacc.py:2544:
   yacc.py:2546:    (98) retexp -> exp NE exp .
   yacc.py:2546:    (72) exp -> exp NE exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 98 (retexp -> exp NE exp .)
   yacc.py:2658:    $end            reduce using rule 98 (retexp -> exp NE exp .)
   yacc.py:2658:    SEMI            reduce using rule 98 (retexp -> exp NE exp .)
   yacc.py:2658:    end             reduce using rule 98 (retexp -> exp NE exp .)
   yacc.py:2658:    until           reduce using rule 98 (retexp -> exp NE exp .)
   yacc.py:2658:    else            reduce using rule 98 (retexp -> exp NE exp .)
   yacc.py:2658:    elseif          reduce using rule 98 (retexp -> exp NE exp .)
   yacc.py:2658:    LT              reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    LE              reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    GT              reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    GE              reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    NE              reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    CHECKEQ         reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    and             reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    or              reduce using rule 72 (exp -> exp NE exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2667:  ! PLUS            [ reduce using rule 72 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! MINUS           [ reduce using rule 72 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! TIMES           [ reduce using rule 72 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! DIVIDE          [ reduce using rule 72 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! POWER           [ reduce using rule 72 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! MODULO          [ reduce using rule 72 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! DBLDOTS         [ reduce using rule 72 (exp -> exp NE exp .) ]
   yacc.py:2667:  ! LT              [ shift and go to state 93 ]
   yacc.py:2667:  ! LE              [ shift and go to state 86 ]
   yacc.py:2667:  ! GT              [ shift and go to state 94 ]
   yacc.py:2667:  ! GE              [ shift and go to state 90 ]
   yacc.py:2667:  ! NE              [ shift and go to state 99 ]
   yacc.py:2667:  ! CHECKEQ         [ shift and go to state 92 ]
   yacc.py:2667:  ! and             [ shift and go to state 85 ]
   yacc.py:2667:  ! or              [ shift and go to state 89 ]
   yacc.py:2671:
   yacc.py:2542:
   yacc.py:2543:state 196
   yacc.py:2544:
   yacc.py:2546:    (19) stat -> for namelist in explist . do block end
   yacc.py:2546:    (53) explist -> explist . COMMA exp
   yacc.py:2547:
   yacc.py:2658:    do              shift and go to state 213
   yacc.py:2658:    COMMA           shift and go to state 167
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 197
   yacc.py:2544:
   yacc.py:2546:    (17) stat -> for names EQUALS exp . COMMA exp do block end
   yacc.py:2546:    (18) stat -> for names EQUALS exp . COMMA exp COMMA exp do block end
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           shift and go to state 214
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    LT              shift and go to state 93
   yacc.py:2658:    LE              shift and go to state 86
   yacc.py:2658:    GT              shift and go to state 94
   yacc.py:2658:    GE              shift and go to state 90
   yacc.py:2658:    NE              shift and go to state 99
   yacc.py:2658:    CHECKEQ         shift and go to state 92
   yacc.py:2658:    and             shift and go to state 85
   yacc.py:2658:    or              shift and go to state 89
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 198
   yacc.py:2544:
   yacc.py:2546:    (13) stat -> while exp do block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 215
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 199
   yacc.py:2544:
   yacc.py:2546:    (123) field -> names EQUALS exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 123 (field -> names EQUALS exp .)
   yacc.py:2658:    SEMI            reduce using rule 123 (field -> names EQUALS exp .)
   yacc.py:2658:    RCURLY          reduce using rule 123 (field -> names EQUALS exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    LT              shift and go to state 93
   yacc.py:2658:    LE              shift and go to state 86
   yacc.py:2658:    GT              shift and go to state 94
   yacc.py:2658:    GE              shift and go to state 90
   yacc.py:2658:    NE              shift and go to state 99
   yacc.py:2658:    CHECKEQ         shift and go to state 92
   yacc.py:2658:    and             shift and go to state 85
   yacc.py:2658:    or              shift and go to state 89
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 200
   yacc.py:2544:
   yacc.py:2546:    (118) fieldlist -> field fieldseplist fieldsep .
   yacc.py:2546:    (120) fieldseplist -> fieldseplist fieldsep . field
   yacc.py:2546:    (122) field -> . LSQUARE exp RSQUARE EQUALS exp
   yacc.py:2546:    (123) field -> . names EQUALS exp
   yacc.py:2546:    (124) field -> . exp
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2547:
   yacc.py:2658:    RCURLY          reduce using rule 118 (fieldlist -> field fieldseplist fieldsep .)
   yacc.py:2658:    LSQUARE         shift and go to state 84
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    field                          shift and go to state 216
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    names                          shift and go to state 79
   yacc.py:2685:    exp                            shift and go to state 83
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2542:
   yacc.py:2543:state 201
   yacc.py:2544:
   yacc.py:2546:    (125) fieldsep -> COMMA .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2658:    ID              reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2658:    RESID           reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2658:    nil             reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2658:    false           reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2658:    true            reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2658:    STRING          reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2658:    function        reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2658:    INTEGER         reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2658:    FLOAT           reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2658:    HEX             reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2658:    LPAREN          reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2658:    LCURLY          reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2658:    MINUS           reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2658:    not             reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2658:    HASH            reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2658:    RCURLY          reduce using rule 125 (fieldsep -> COMMA .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 202
   yacc.py:2544:
   yacc.py:2546:    (126) fieldsep -> SEMI .
   yacc.py:2547:
   yacc.py:2658:    LSQUARE         reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2658:    ID              reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2658:    RESID           reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2658:    nil             reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2658:    false           reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2658:    true            reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2658:    STRING          reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2658:    TRPLDOTS        reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2658:    function        reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2658:    INTEGER         reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2658:    FLOAT           reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2658:    HEX             reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2658:    LPAREN          reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2658:    LCURLY          reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2658:    MINUS           reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2658:    not             reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2658:    HASH            reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2658:    RCURLY          reduce using rule 126 (fieldsep -> SEMI .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 203
   yacc.py:2544:
   yacc.py:2546:    (122) field -> LSQUARE exp RSQUARE . EQUALS exp
   yacc.py:2547:
   yacc.py:2658:    EQUALS          shift and go to state 217
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 204
   yacc.py:2544:
   yacc.py:2546:    (47) ifblock -> empty .
   yacc.py:2547:
   yacc.py:2658:    else            reduce using rule 47 (ifblock -> empty .)
   yacc.py:2658:    end             reduce using rule 47 (ifblock -> empty .)
   yacc.py:2658:    elseif          reduce using rule 47 (ifblock -> empty .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 205
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> if exp then block ifblock . else block end
   yacc.py:2546:    (16) stat -> if exp then block ifblock . end
   yacc.py:2546:    (46) ifblock -> ifblock . elseif exp then block
   yacc.py:2547:
   yacc.py:2658:    else            shift and go to state 219
   yacc.py:2658:    end             shift and go to state 218
   yacc.py:2658:    elseif          shift and go to state 220
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 206
   yacc.py:2544:
   yacc.py:2546:    (53) explist -> explist COMMA exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    do              reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    COMMA           reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    SEMI            reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    return          reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    break           reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    while           reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    repeat          reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    if              reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    for             reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    local           reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    function        reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    LPAREN          reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    ID              reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    RESID           reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    $end            reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    end             reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    until           reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    else            reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    elseif          reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    RPAREN          reduce using rule 53 (explist -> explist COMMA exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    LT              shift and go to state 93
   yacc.py:2658:    LE              shift and go to state 86
   yacc.py:2658:    GT              shift and go to state 94
   yacc.py:2658:    GE              shift and go to state 90
   yacc.py:2658:    NE              shift and go to state 99
   yacc.py:2658:    CHECKEQ         shift and go to state 92
   yacc.py:2658:    and             shift and go to state 85
   yacc.py:2658:    or              shift and go to state 89
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 207
   yacc.py:2544:
   yacc.py:2546:    (44) comid -> COMMA names comid .
   yacc.py:2547:
   yacc.py:2658:    EQUALS          reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    SEMI            reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    return          reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    break           reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    do              reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    while           reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    repeat          reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    if              reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    for             reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    local           reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    function        reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    LPAREN          reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    ID              reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    RESID           reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    $end            reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    end             reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    until           reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    else            reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    elseif          reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    COMMA           reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    RPAREN          reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2658:    in              reduce using rule 44 (comid -> COMMA names comid .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 208
   yacc.py:2544:
   yacc.py:2546:    (34) comtrp -> COMMA . TRPLDOTS
   yacc.py:2547:
   yacc.py:2658:    TRPLDOTS        shift and go to state 221
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 209
   yacc.py:2544:
   yacc.py:2546:    (32) parlist -> namelist comtrp .
   yacc.py:2547:
   yacc.py:2658:    RPAREN          reduce using rule 32 (parlist -> namelist comtrp .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 210
   yacc.py:2544:
   yacc.py:2546:    (25) funcbody -> LPAREN parlist RPAREN . block end
   yacc.py:2546:    (9) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat
   yacc.py:2546:    (3) sdash -> . laststat
   yacc.py:2546:    (4) sdash -> . chunk laststat SEMI
   yacc.py:2546:    (5) chunk -> . chunk stat
   yacc.py:2546:    (6) chunk -> . chunk stat SEMI
   yacc.py:2546:    (7) chunk -> . stat SEMI
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (35) laststat -> . return retexplist
   yacc.py:2546:    (36) laststat -> . return
   yacc.py:2546:    (37) laststat -> . break
   yacc.py:2546:    (10) stat -> . varlist EQUALS explist
   yacc.py:2546:    (11) stat -> . do block end
   yacc.py:2546:    (12) stat -> . functioncall
   yacc.py:2546:    (13) stat -> . while exp do block end
   yacc.py:2546:    (14) stat -> . repeat block until exp
   yacc.py:2546:    (15) stat -> . if exp then block ifblock else block end
   yacc.py:2546:    (16) stat -> . if exp then block ifblock end
   yacc.py:2546:    (17) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (18) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (19) stat -> . for namelist in explist do block end
   yacc.py:2546:    (20) stat -> . local namelist
   yacc.py:2546:    (21) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (48) varlist -> . var comvar
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    if              shift and go to state 5
   yacc.py:2658:    for             shift and go to state 19
   yacc.py:2658:    local           shift and go to state 11
   yacc.py:2658:    function        shift and go to state 12
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 6
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    varlist                        shift and go to state 7
   yacc.py:2685:    chunk                          shift and go to state 3
   yacc.py:2685:    laststat                       shift and go to state 8
   yacc.py:2685:    var                            shift and go to state 9
   yacc.py:2685:    functioncall                   shift and go to state 10
   yacc.py:2685:    sdash                          shift and go to state 60
   yacc.py:2685:    block                          shift and go to state 222
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 211
   yacc.py:2544:
   yacc.py:2546:    (24) funcbody -> LPAREN RPAREN block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 223
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 212
   yacc.py:2544:
   yacc.py:2546:    (40) dotid -> SDOT names dotid .
   yacc.py:2547:
   yacc.py:2658:    COLON           reduce using rule 40 (dotid -> SDOT names dotid .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 213
   yacc.py:2544:
   yacc.py:2546:    (19) stat -> for namelist in explist do . block end
   yacc.py:2546:    (9) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat
   yacc.py:2546:    (3) sdash -> . laststat
   yacc.py:2546:    (4) sdash -> . chunk laststat SEMI
   yacc.py:2546:    (5) chunk -> . chunk stat
   yacc.py:2546:    (6) chunk -> . chunk stat SEMI
   yacc.py:2546:    (7) chunk -> . stat SEMI
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (35) laststat -> . return retexplist
   yacc.py:2546:    (36) laststat -> . return
   yacc.py:2546:    (37) laststat -> . break
   yacc.py:2546:    (10) stat -> . varlist EQUALS explist
   yacc.py:2546:    (11) stat -> . do block end
   yacc.py:2546:    (12) stat -> . functioncall
   yacc.py:2546:    (13) stat -> . while exp do block end
   yacc.py:2546:    (14) stat -> . repeat block until exp
   yacc.py:2546:    (15) stat -> . if exp then block ifblock else block end
   yacc.py:2546:    (16) stat -> . if exp then block ifblock end
   yacc.py:2546:    (17) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (18) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (19) stat -> . for namelist in explist do block end
   yacc.py:2546:    (20) stat -> . local namelist
   yacc.py:2546:    (21) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (48) varlist -> . var comvar
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    if              shift and go to state 5
   yacc.py:2658:    for             shift and go to state 19
   yacc.py:2658:    local           shift and go to state 11
   yacc.py:2658:    function        shift and go to state 12
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 6
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    varlist                        shift and go to state 7
   yacc.py:2685:    chunk                          shift and go to state 3
   yacc.py:2685:    laststat                       shift and go to state 8
   yacc.py:2685:    block                          shift and go to state 224
   yacc.py:2685:    var                            shift and go to state 9
   yacc.py:2685:    functioncall                   shift and go to state 10
   yacc.py:2685:    sdash                          shift and go to state 60
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 214
   yacc.py:2544:
   yacc.py:2546:    (17) stat -> for names EQUALS exp COMMA . exp do block end
   yacc.py:2546:    (18) stat -> for names EQUALS exp COMMA . exp COMMA exp do block end
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2685:    exp                            shift and go to state 225
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2542:
   yacc.py:2543:state 215
   yacc.py:2544:
   yacc.py:2546:    (13) stat -> while exp do block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2658:    return          reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2658:    break           reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2658:    do              reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2658:    while           reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2658:    repeat          reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2658:    if              reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2658:    for             reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2658:    local           reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2658:    function        reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2658:    LPAREN          reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2658:    ID              reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2658:    RESID           reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2658:    end             reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2658:    else            reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2658:    elseif          reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2658:    $end            reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2658:    until           reduce using rule 13 (stat -> while exp do block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 216
   yacc.py:2544:
   yacc.py:2546:    (120) fieldseplist -> fieldseplist fieldsep field .
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 120 (fieldseplist -> fieldseplist fieldsep field .)
   yacc.py:2658:    SEMI            reduce using rule 120 (fieldseplist -> fieldseplist fieldsep field .)
   yacc.py:2658:    RCURLY          reduce using rule 120 (fieldseplist -> fieldseplist fieldsep field .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 217
   yacc.py:2544:
   yacc.py:2546:    (122) field -> LSQUARE exp RSQUARE EQUALS . exp
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 226
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 218
   yacc.py:2544:
   yacc.py:2546:    (16) stat -> if exp then block ifblock end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2658:    return          reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2658:    break           reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2658:    do              reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2658:    while           reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2658:    repeat          reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2658:    if              reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2658:    for             reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2658:    local           reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2658:    function        reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2658:    LPAREN          reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2658:    ID              reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2658:    RESID           reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2658:    end             reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2658:    else            reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2658:    elseif          reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2658:    $end            reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2658:    until           reduce using rule 16 (stat -> if exp then block ifblock end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 219
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> if exp then block ifblock else . block end
   yacc.py:2546:    (9) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat
   yacc.py:2546:    (3) sdash -> . laststat
   yacc.py:2546:    (4) sdash -> . chunk laststat SEMI
   yacc.py:2546:    (5) chunk -> . chunk stat
   yacc.py:2546:    (6) chunk -> . chunk stat SEMI
   yacc.py:2546:    (7) chunk -> . stat SEMI
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (35) laststat -> . return retexplist
   yacc.py:2546:    (36) laststat -> . return
   yacc.py:2546:    (37) laststat -> . break
   yacc.py:2546:    (10) stat -> . varlist EQUALS explist
   yacc.py:2546:    (11) stat -> . do block end
   yacc.py:2546:    (12) stat -> . functioncall
   yacc.py:2546:    (13) stat -> . while exp do block end
   yacc.py:2546:    (14) stat -> . repeat block until exp
   yacc.py:2546:    (15) stat -> . if exp then block ifblock else block end
   yacc.py:2546:    (16) stat -> . if exp then block ifblock end
   yacc.py:2546:    (17) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (18) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (19) stat -> . for namelist in explist do block end
   yacc.py:2546:    (20) stat -> . local namelist
   yacc.py:2546:    (21) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (48) varlist -> . var comvar
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    if              shift and go to state 5
   yacc.py:2658:    for             shift and go to state 19
   yacc.py:2658:    local           shift and go to state 11
   yacc.py:2658:    function        shift and go to state 12
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 6
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    varlist                        shift and go to state 7
   yacc.py:2685:    chunk                          shift and go to state 3
   yacc.py:2685:    laststat                       shift and go to state 8
   yacc.py:2685:    block                          shift and go to state 227
   yacc.py:2685:    var                            shift and go to state 9
   yacc.py:2685:    functioncall                   shift and go to state 10
   yacc.py:2685:    sdash                          shift and go to state 60
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 220
   yacc.py:2544:
   yacc.py:2546:    (46) ifblock -> ifblock elseif . exp then block
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    exp                            shift and go to state 228
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 221
   yacc.py:2544:
   yacc.py:2546:    (34) comtrp -> COMMA TRPLDOTS .
   yacc.py:2547:
   yacc.py:2658:    RPAREN          reduce using rule 34 (comtrp -> COMMA TRPLDOTS .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 222
   yacc.py:2544:
   yacc.py:2546:    (25) funcbody -> LPAREN parlist RPAREN block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 229
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 223
   yacc.py:2544:
   yacc.py:2546:    (24) funcbody -> LPAREN RPAREN block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    return          reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    break           reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    do              reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    while           reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    repeat          reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    if              reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    for             reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    local           reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    function        reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    LPAREN          reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    ID              reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    RESID           reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    $end            reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    end             reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    until           reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    else            reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2658:    elseif          reduce using rule 24 (funcbody -> LPAREN RPAREN block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 224
   yacc.py:2544:
   yacc.py:2546:    (19) stat -> for namelist in explist do block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 230
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 225
   yacc.py:2544:
   yacc.py:2546:    (17) stat -> for names EQUALS exp COMMA exp . do block end
   yacc.py:2546:    (18) stat -> for names EQUALS exp COMMA exp . COMMA exp do block end
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    do              shift and go to state 232
   yacc.py:2658:    COMMA           shift and go to state 231
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    LT              shift and go to state 93
   yacc.py:2658:    LE              shift and go to state 86
   yacc.py:2658:    GT              shift and go to state 94
   yacc.py:2658:    GE              shift and go to state 90
   yacc.py:2658:    NE              shift and go to state 99
   yacc.py:2658:    CHECKEQ         shift and go to state 92
   yacc.py:2658:    and             shift and go to state 85
   yacc.py:2658:    or              shift and go to state 89
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 226
   yacc.py:2544:
   yacc.py:2546:    (122) field -> LSQUARE exp RSQUARE EQUALS exp .
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    COMMA           reduce using rule 122 (field -> LSQUARE exp RSQUARE EQUALS exp .)
   yacc.py:2658:    SEMI            reduce using rule 122 (field -> LSQUARE exp RSQUARE EQUALS exp .)
   yacc.py:2658:    RCURLY          reduce using rule 122 (field -> LSQUARE exp RSQUARE EQUALS exp .)
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    LT              shift and go to state 93
   yacc.py:2658:    LE              shift and go to state 86
   yacc.py:2658:    GT              shift and go to state 94
   yacc.py:2658:    GE              shift and go to state 90
   yacc.py:2658:    NE              shift and go to state 99
   yacc.py:2658:    CHECKEQ         shift and go to state 92
   yacc.py:2658:    and             shift and go to state 85
   yacc.py:2658:    or              shift and go to state 89
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 227
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> if exp then block ifblock else block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 233
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 228
   yacc.py:2544:
   yacc.py:2546:    (46) ifblock -> ifblock elseif exp . then block
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    then            shift and go to state 234
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    LT              shift and go to state 93
   yacc.py:2658:    LE              shift and go to state 86
   yacc.py:2658:    GT              shift and go to state 94
   yacc.py:2658:    GE              shift and go to state 90
   yacc.py:2658:    NE              shift and go to state 99
   yacc.py:2658:    CHECKEQ         shift and go to state 92
   yacc.py:2658:    and             shift and go to state 85
   yacc.py:2658:    or              shift and go to state 89
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 229
   yacc.py:2544:
   yacc.py:2546:    (25) funcbody -> LPAREN parlist RPAREN block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    return          reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    break           reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    do              reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    while           reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    repeat          reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    if              reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    for             reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    local           reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    function        reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    LPAREN          reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    ID              reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    RESID           reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    $end            reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    end             reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    until           reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    else            reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2658:    elseif          reduce using rule 25 (funcbody -> LPAREN parlist RPAREN block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 230
   yacc.py:2544:
   yacc.py:2546:    (19) stat -> for namelist in explist do block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    return          reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    break           reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    do              reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    while           reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    repeat          reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    if              reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    for             reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    local           reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    function        reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    LPAREN          reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    ID              reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    RESID           reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    end             reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    else            reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    elseif          reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    $end            reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2658:    until           reduce using rule 19 (stat -> for namelist in explist do block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 231
   yacc.py:2544:
   yacc.py:2546:    (18) stat -> for names EQUALS exp COMMA exp COMMA . exp do block end
   yacc.py:2546:    (55) exp -> . nil
   yacc.py:2546:    (56) exp -> . false
   yacc.py:2546:    (57) exp -> . true
   yacc.py:2546:    (58) exp -> . Number
   yacc.py:2546:    (59) exp -> . STRING
   yacc.py:2546:    (60) exp -> . TRPLDOTS
   yacc.py:2546:    (61) exp -> . function
   yacc.py:2546:    (62) exp -> . prefixexp
   yacc.py:2546:    (63) exp -> . exp PLUS exp
   yacc.py:2546:    (64) exp -> . exp MINUS exp
   yacc.py:2546:    (65) exp -> . exp TIMES exp
   yacc.py:2546:    (66) exp -> . exp DIVIDE exp
   yacc.py:2546:    (67) exp -> . exp POWER exp
   yacc.py:2546:    (68) exp -> . exp LT exp
   yacc.py:2546:    (69) exp -> . exp LE exp
   yacc.py:2546:    (70) exp -> . exp GT exp
   yacc.py:2546:    (71) exp -> . exp GE exp
   yacc.py:2546:    (72) exp -> . exp NE exp
   yacc.py:2546:    (73) exp -> . exp CHECKEQ exp
   yacc.py:2546:    (74) exp -> . exp and exp
   yacc.py:2546:    (75) exp -> . exp or exp
   yacc.py:2546:    (76) exp -> . exp MODULO exp
   yacc.py:2546:    (77) exp -> . exp DBLDOTS exp
   yacc.py:2546:    (78) exp -> . tableconstructor
   yacc.py:2546:    (79) exp -> . unop exp
   yacc.py:2546:    (106) Number -> . INTEGER
   yacc.py:2546:    (107) Number -> . FLOAT
   yacc.py:2546:    (108) Number -> . HEX
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (116) tableconstructor -> . LCURLY fieldlist RCURLY
   yacc.py:2546:    (117) tableconstructor -> . LCURLY RCURLY
   yacc.py:2546:    (113) unop -> . MINUS
   yacc.py:2546:    (114) unop -> . not
   yacc.py:2546:    (115) unop -> . HASH
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    nil             shift and go to state 32
   yacc.py:2658:    false           shift and go to state 23
   yacc.py:2658:    true            shift and go to state 35
   yacc.py:2658:    STRING          shift and go to state 27
   yacc.py:2658:    TRPLDOTS        shift and go to state 41
   yacc.py:2658:    function        shift and go to state 31
   yacc.py:2658:    INTEGER         shift and go to state 30
   yacc.py:2658:    FLOAT           shift and go to state 36
   yacc.py:2658:    HEX             shift and go to state 33
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    LCURLY          shift and go to state 24
   yacc.py:2658:    MINUS           shift and go to state 26
   yacc.py:2658:    not             shift and go to state 34
   yacc.py:2658:    HASH            shift and go to state 25
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 28
   yacc.py:2685:    tableconstructor               shift and go to state 22
   yacc.py:2685:    Number                         shift and go to state 37
   yacc.py:2685:    unop                           shift and go to state 40
   yacc.py:2685:    functioncall                   shift and go to state 38
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2685:    exp                            shift and go to state 235
   yacc.py:2685:    var                            shift and go to state 29
   yacc.py:2542:
   yacc.py:2543:state 232
   yacc.py:2544:
   yacc.py:2546:    (17) stat -> for names EQUALS exp COMMA exp do . block end
   yacc.py:2546:    (9) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat
   yacc.py:2546:    (3) sdash -> . laststat
   yacc.py:2546:    (4) sdash -> . chunk laststat SEMI
   yacc.py:2546:    (5) chunk -> . chunk stat
   yacc.py:2546:    (6) chunk -> . chunk stat SEMI
   yacc.py:2546:    (7) chunk -> . stat SEMI
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (35) laststat -> . return retexplist
   yacc.py:2546:    (36) laststat -> . return
   yacc.py:2546:    (37) laststat -> . break
   yacc.py:2546:    (10) stat -> . varlist EQUALS explist
   yacc.py:2546:    (11) stat -> . do block end
   yacc.py:2546:    (12) stat -> . functioncall
   yacc.py:2546:    (13) stat -> . while exp do block end
   yacc.py:2546:    (14) stat -> . repeat block until exp
   yacc.py:2546:    (15) stat -> . if exp then block ifblock else block end
   yacc.py:2546:    (16) stat -> . if exp then block ifblock end
   yacc.py:2546:    (17) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (18) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (19) stat -> . for namelist in explist do block end
   yacc.py:2546:    (20) stat -> . local namelist
   yacc.py:2546:    (21) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (48) varlist -> . var comvar
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    if              shift and go to state 5
   yacc.py:2658:    for             shift and go to state 19
   yacc.py:2658:    local           shift and go to state 11
   yacc.py:2658:    function        shift and go to state 12
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 6
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    varlist                        shift and go to state 7
   yacc.py:2685:    chunk                          shift and go to state 3
   yacc.py:2685:    laststat                       shift and go to state 8
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2685:    var                            shift and go to state 9
   yacc.py:2685:    functioncall                   shift and go to state 10
   yacc.py:2685:    sdash                          shift and go to state 60
   yacc.py:2685:    block                          shift and go to state 236
   yacc.py:2542:
   yacc.py:2543:state 233
   yacc.py:2544:
   yacc.py:2546:    (15) stat -> if exp then block ifblock else block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2658:    return          reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2658:    break           reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2658:    do              reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2658:    while           reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2658:    repeat          reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2658:    if              reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2658:    for             reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2658:    local           reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2658:    function        reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2658:    LPAREN          reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2658:    ID              reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2658:    RESID           reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2658:    end             reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2658:    else            reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2658:    elseif          reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2658:    $end            reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2658:    until           reduce using rule 15 (stat -> if exp then block ifblock else block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 234
   yacc.py:2544:
   yacc.py:2546:    (46) ifblock -> ifblock elseif exp then . block
   yacc.py:2546:    (9) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat
   yacc.py:2546:    (3) sdash -> . laststat
   yacc.py:2546:    (4) sdash -> . chunk laststat SEMI
   yacc.py:2546:    (5) chunk -> . chunk stat
   yacc.py:2546:    (6) chunk -> . chunk stat SEMI
   yacc.py:2546:    (7) chunk -> . stat SEMI
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (35) laststat -> . return retexplist
   yacc.py:2546:    (36) laststat -> . return
   yacc.py:2546:    (37) laststat -> . break
   yacc.py:2546:    (10) stat -> . varlist EQUALS explist
   yacc.py:2546:    (11) stat -> . do block end
   yacc.py:2546:    (12) stat -> . functioncall
   yacc.py:2546:    (13) stat -> . while exp do block end
   yacc.py:2546:    (14) stat -> . repeat block until exp
   yacc.py:2546:    (15) stat -> . if exp then block ifblock else block end
   yacc.py:2546:    (16) stat -> . if exp then block ifblock end
   yacc.py:2546:    (17) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (18) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (19) stat -> . for namelist in explist do block end
   yacc.py:2546:    (20) stat -> . local namelist
   yacc.py:2546:    (21) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (48) varlist -> . var comvar
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    if              shift and go to state 5
   yacc.py:2658:    for             shift and go to state 19
   yacc.py:2658:    local           shift and go to state 11
   yacc.py:2658:    function        shift and go to state 12
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 6
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    varlist                        shift and go to state 7
   yacc.py:2685:    chunk                          shift and go to state 3
   yacc.py:2685:    laststat                       shift and go to state 8
   yacc.py:2685:    block                          shift and go to state 237
   yacc.py:2685:    var                            shift and go to state 9
   yacc.py:2685:    functioncall                   shift and go to state 10
   yacc.py:2685:    sdash                          shift and go to state 60
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2542:
   yacc.py:2543:state 235
   yacc.py:2544:
   yacc.py:2546:    (18) stat -> for names EQUALS exp COMMA exp COMMA exp . do block end
   yacc.py:2546:    (63) exp -> exp . PLUS exp
   yacc.py:2546:    (64) exp -> exp . MINUS exp
   yacc.py:2546:    (65) exp -> exp . TIMES exp
   yacc.py:2546:    (66) exp -> exp . DIVIDE exp
   yacc.py:2546:    (67) exp -> exp . POWER exp
   yacc.py:2546:    (68) exp -> exp . LT exp
   yacc.py:2546:    (69) exp -> exp . LE exp
   yacc.py:2546:    (70) exp -> exp . GT exp
   yacc.py:2546:    (71) exp -> exp . GE exp
   yacc.py:2546:    (72) exp -> exp . NE exp
   yacc.py:2546:    (73) exp -> exp . CHECKEQ exp
   yacc.py:2546:    (74) exp -> exp . and exp
   yacc.py:2546:    (75) exp -> exp . or exp
   yacc.py:2546:    (76) exp -> exp . MODULO exp
   yacc.py:2546:    (77) exp -> exp . DBLDOTS exp
   yacc.py:2547:
   yacc.py:2658:    do              shift and go to state 238
   yacc.py:2658:    PLUS            shift and go to state 95
   yacc.py:2658:    MINUS           shift and go to state 98
   yacc.py:2658:    TIMES           shift and go to state 91
   yacc.py:2658:    DIVIDE          shift and go to state 100
   yacc.py:2658:    POWER           shift and go to state 88
   yacc.py:2658:    LT              shift and go to state 93
   yacc.py:2658:    LE              shift and go to state 86
   yacc.py:2658:    GT              shift and go to state 94
   yacc.py:2658:    GE              shift and go to state 90
   yacc.py:2658:    NE              shift and go to state 99
   yacc.py:2658:    CHECKEQ         shift and go to state 92
   yacc.py:2658:    and             shift and go to state 85
   yacc.py:2658:    or              shift and go to state 89
   yacc.py:2658:    MODULO          shift and go to state 96
   yacc.py:2658:    DBLDOTS         shift and go to state 97
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 236
   yacc.py:2544:
   yacc.py:2546:    (17) stat -> for names EQUALS exp COMMA exp do block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 239
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 237
   yacc.py:2544:
   yacc.py:2546:    (46) ifblock -> ifblock elseif exp then block .
   yacc.py:2547:
   yacc.py:2658:    else            reduce using rule 46 (ifblock -> ifblock elseif exp then block .)
   yacc.py:2658:    end             reduce using rule 46 (ifblock -> ifblock elseif exp then block .)
   yacc.py:2658:    elseif          reduce using rule 46 (ifblock -> ifblock elseif exp then block .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 238
   yacc.py:2544:
   yacc.py:2546:    (18) stat -> for names EQUALS exp COMMA exp COMMA exp do . block end
   yacc.py:2546:    (9) block -> . sdash
   yacc.py:2546:    (1) sdash -> . chunk
   yacc.py:2546:    (2) sdash -> . chunk laststat
   yacc.py:2546:    (3) sdash -> . laststat
   yacc.py:2546:    (4) sdash -> . chunk laststat SEMI
   yacc.py:2546:    (5) chunk -> . chunk stat
   yacc.py:2546:    (6) chunk -> . chunk stat SEMI
   yacc.py:2546:    (7) chunk -> . stat SEMI
   yacc.py:2546:    (8) chunk -> . stat
   yacc.py:2546:    (35) laststat -> . return retexplist
   yacc.py:2546:    (36) laststat -> . return
   yacc.py:2546:    (37) laststat -> . break
   yacc.py:2546:    (10) stat -> . varlist EQUALS explist
   yacc.py:2546:    (11) stat -> . do block end
   yacc.py:2546:    (12) stat -> . functioncall
   yacc.py:2546:    (13) stat -> . while exp do block end
   yacc.py:2546:    (14) stat -> . repeat block until exp
   yacc.py:2546:    (15) stat -> . if exp then block ifblock else block end
   yacc.py:2546:    (16) stat -> . if exp then block ifblock end
   yacc.py:2546:    (17) stat -> . for names EQUALS exp COMMA exp do block end
   yacc.py:2546:    (18) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
   yacc.py:2546:    (19) stat -> . for namelist in explist do block end
   yacc.py:2546:    (20) stat -> . local namelist
   yacc.py:2546:    (21) stat -> . local namelist EQUALS explist
   yacc.py:2546:    (22) stat -> . function funcname funcbody
   yacc.py:2546:    (23) stat -> . local function names funcbody
   yacc.py:2546:    (48) varlist -> . var comvar
   yacc.py:2546:    (26) functioncall -> . prefixexp args
   yacc.py:2546:    (49) var -> . names
   yacc.py:2546:    (50) var -> . prefixexp LSQUARE exp RSQUARE
   yacc.py:2546:    (51) var -> . prefixexp SDOT names
   yacc.py:2546:    (110) prefixexp -> . var
   yacc.py:2546:    (111) prefixexp -> . LPAREN exp RPAREN
   yacc.py:2546:    (112) prefixexp -> . functioncall
   yacc.py:2546:    (127) names -> . ID
   yacc.py:2546:    (128) names -> . RESID
   yacc.py:2547:
   yacc.py:2658:    return          shift and go to state 16
   yacc.py:2658:    break           shift and go to state 17
   yacc.py:2658:    do              shift and go to state 13
   yacc.py:2658:    while           shift and go to state 20
   yacc.py:2658:    repeat          shift and go to state 15
   yacc.py:2658:    if              shift and go to state 5
   yacc.py:2658:    for             shift and go to state 19
   yacc.py:2658:    local           shift and go to state 11
   yacc.py:2658:    function        shift and go to state 12
   yacc.py:2658:    LPAREN          shift and go to state 2
   yacc.py:2658:    ID              shift and go to state 18
   yacc.py:2658:    RESID           shift and go to state 1
   yacc.py:2660:
   yacc.py:2685:    prefixexp                      shift and go to state 6
   yacc.py:2685:    stat                           shift and go to state 14
   yacc.py:2685:    varlist                        shift and go to state 7
   yacc.py:2685:    chunk                          shift and go to state 3
   yacc.py:2685:    laststat                       shift and go to state 8
   yacc.py:2685:    names                          shift and go to state 4
   yacc.py:2685:    var                            shift and go to state 9
   yacc.py:2685:    functioncall                   shift and go to state 10
   yacc.py:2685:    sdash                          shift and go to state 60
   yacc.py:2685:    block                          shift and go to state 240
   yacc.py:2542:
   yacc.py:2543:state 239
   yacc.py:2544:
   yacc.py:2546:    (17) stat -> for names EQUALS exp COMMA exp do block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    return          reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    break           reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    do              reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    while           reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    repeat          reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    if              reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    for             reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    local           reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    function        reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    LPAREN          reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    ID              reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    RESID           reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    end             reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    else            reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    elseif          reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    $end            reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2658:    until           reduce using rule 17 (stat -> for names EQUALS exp COMMA exp do block end .)
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 240
   yacc.py:2544:
   yacc.py:2546:    (18) stat -> for names EQUALS exp COMMA exp COMMA exp do block . end
   yacc.py:2547:
   yacc.py:2658:    end             shift and go to state 241
   yacc.py:2660:
   yacc.py:2542:
   yacc.py:2543:state 241
   yacc.py:2544:
   yacc.py:2546:    (18) stat -> for names EQUALS exp COMMA exp COMMA exp do block end .
   yacc.py:2547:
   yacc.py:2658:    SEMI            reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    return          reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    break           reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    do              reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    while           reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    repeat          reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    if              reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    for             reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    local           reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    function        reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    LPAREN          reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    ID              reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    RESID           reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    end             reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    else            reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    elseif          reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    $end            reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2658:    until           reduce using rule 18 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
   yacc.py:2660:
   yacc.py:3428:
   yacc.py:3429:Conflicts:
   yacc.py:3430:
   yacc.py:3433:shift/reduce conflict for LPAREN in state 28 resolved as shift
   yacc.py:3439:reduce/reduce conflict in state 10 resolved using rule (stat -> functioncall)
   yacc.py:3440:rejected rule (prefixexp -> functioncall) in state 10
   yacc.py: 360:PLY: PARSE DEBUG START
   yacc.py: 408:
   yacc.py: 409:State  : 0
   yacc.py: 433:Stack  : . LexToken(ID,'a',1,0)
   yacc.py: 443:Action : Shift and goto state 18
   yacc.py: 408:
   yacc.py: 409:State  : 18
   yacc.py: 433:Stack  : ID . LexToken(EQUALS,'=',1,2)
   yacc.py: 469:Action : Reduce rule [names -> ID] with ['a'] and goto state 4
   yacc.py: 503:Result : <node @ 0x7ff6c6a5da90> (<__main__.node object at 0x7ff6c6a5da90>)
   yacc.py: 408:
   yacc.py: 409:State  : 4
   yacc.py: 433:Stack  : names . LexToken(EQUALS,'=',1,2)
   yacc.py: 469:Action : Reduce rule [var -> names] with [<node @ 0x7ff6c6a5da90>] and goto state 9
   yacc.py: 503:Result : <node @ 0x7ff6c6a5df50> (<__main__.node object at 0x7ff6c6a5df50>)
   yacc.py: 408:
   yacc.py: 409:State  : 9
   yacc.py: 433:Stack  : var . LexToken(EQUALS,'=',1,2)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 54
   yacc.py: 542:Result : <NoneType @ 0x7ff6cdcc4f40> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 54
   yacc.py: 428:Defaulted state 54: Reduce using 43
   yacc.py: 433:Stack  : var empty . LexToken(EQUALS,'=',1,2)
   yacc.py: 469:Action : Reduce rule [comvar -> empty] with [None] and goto state 53
   yacc.py: 503:Result : <node @ 0x7ff6c6a5dc50> (<__main__.node object at 0x7ff6c6a5dc50>)
   yacc.py: 408:
   yacc.py: 409:State  : 53
   yacc.py: 428:Defaulted state 53: Reduce using 48
   yacc.py: 433:Stack  : var comvar . LexToken(EQUALS,'=',1,2)
   yacc.py: 469:Action : Reduce rule [varlist -> var comvar] with [<node @ 0x7ff6c6a5df50>,<node @ 0x7ff6c6a5dc50>] and goto state 7
   yacc.py: 503:Result : <node @ 0x7ff6c6a5dd50> (<__main__.node object at 0x7ff6c6a5dd50>)
   yacc.py: 408:
   yacc.py: 409:State  : 7
   yacc.py: 433:Stack  : varlist . LexToken(EQUALS,'=',1,2)
   yacc.py: 443:Action : Shift and goto state 51
   yacc.py: 408:
   yacc.py: 409:State  : 51
   yacc.py: 433:Stack  : varlist EQUALS . LexToken(INTEGER,'5',1,4)
   yacc.py: 443:Action : Shift and goto state 30
   yacc.py: 408:
   yacc.py: 409:State  : 30
   yacc.py: 433:Stack  : varlist EQUALS INTEGER . LexToken(PLUS,'+',1,6)
   yacc.py: 469:Action : Reduce rule [Number -> INTEGER] with ['5'] and goto state 37
   yacc.py: 503:Result : <node @ 0x7ff6c6a62ad0> (<__main__.node object at 0x7ff6c6a62ad0>)
   yacc.py: 408:
   yacc.py: 409:State  : 37
   yacc.py: 433:Stack  : varlist EQUALS Number . LexToken(PLUS,'+',1,6)
   yacc.py: 469:Action : Reduce rule [exp -> Number] with [<node @ 0x7ff6c6a62ad0>] and goto state 108
   yacc.py: 503:Result : <node @ 0x7ff6c6a62610> (<__main__.node object at 0x7ff6c6a62610>)
   yacc.py: 408:
   yacc.py: 409:State  : 108
   yacc.py: 433:Stack  : varlist EQUALS exp . LexToken(PLUS,'+',1,6)
   yacc.py: 443:Action : Shift and goto state 95
   yacc.py: 408:
   yacc.py: 409:State  : 95
   yacc.py: 433:Stack  : varlist EQUALS exp PLUS . LexToken(INTEGER,'3',1,8)
   yacc.py: 443:Action : Shift and goto state 30
   yacc.py: 408:
   yacc.py: 409:State  : 30
   yacc.py: 433:Stack  : varlist EQUALS exp PLUS INTEGER . LexToken(function,'function',1,10)
   yacc.py: 469:Action : Reduce rule [Number -> INTEGER] with ['3'] and goto state 37
   yacc.py: 503:Result : <node @ 0x7ff6c6a62910> (<__main__.node object at 0x7ff6c6a62910>)
   yacc.py: 408:
   yacc.py: 409:State  : 37
   yacc.py: 433:Stack  : varlist EQUALS exp PLUS Number . LexToken(function,'function',1,10)
   yacc.py: 469:Action : Reduce rule [exp -> Number] with [<node @ 0x7ff6c6a62910>] and goto state 159
   yacc.py: 503:Result : <node @ 0x7ff6c6a62990> (<__main__.node object at 0x7ff6c6a62990>)
   yacc.py: 408:
   yacc.py: 409:State  : 159
   yacc.py: 433:Stack  : varlist EQUALS exp PLUS exp . LexToken(function,'function',1,10)
   yacc.py: 469:Action : Reduce rule [exp -> exp PLUS exp] with [<node @ 0x7ff6c6a62610>,'+',<node @ 0x7ff6c6a62990>] and goto state 108
   yacc.py: 503:Result : <node @ 0x7ff6c6a6e250> (<__main__.node object at 0x7ff6c6a6e250>)
   yacc.py: 408:
   yacc.py: 409:State  : 108
   yacc.py: 433:Stack  : varlist EQUALS exp . LexToken(function,'function',1,10)
   yacc.py: 469:Action : Reduce rule [explist -> exp] with [<node @ 0x7ff6c6a6e250>] and goto state 110
   yacc.py: 503:Result : <node @ 0x7ff6c6a62ed0> (<__main__.node object at 0x7ff6c6a62ed0>)
   yacc.py: 408:
   yacc.py: 409:State  : 110
   yacc.py: 433:Stack  : varlist EQUALS explist . LexToken(function,'function',1,10)
   yacc.py: 469:Action : Reduce rule [stat -> varlist EQUALS explist] with [<node @ 0x7ff6c6a5dd50>,'=',<node @ 0x7ff6c6a62ed0>] and goto state 14
   yacc.py: 503:Result : <node @ 0x7ff6c6a6ed90> (<__main__.node object at 0x7ff6c6a6ed90>)
   yacc.py: 408:
   yacc.py: 409:State  : 14
   yacc.py: 433:Stack  : stat . LexToken(function,'function',1,10)
   yacc.py: 469:Action : Reduce rule [chunk -> stat] with [<node @ 0x7ff6c6a6ed90>] and goto state 3
   yacc.py: 503:Result : <node @ 0x7ff6c6a5db90> (<__main__.node object at 0x7ff6c6a5db90>)
   yacc.py: 408:
   yacc.py: 409:State  : 3
   yacc.py: 433:Stack  : chunk . LexToken(function,'function',1,10)
   yacc.py: 443:Action : Shift and goto state 12
   yacc.py: 408:
   yacc.py: 409:State  : 12
   yacc.py: 433:Stack  : chunk function . LexToken(ID,'gets',1,19)
   yacc.py: 443:Action : Shift and goto state 18
   yacc.py: 408:
   yacc.py: 409:State  : 18
   yacc.py: 433:Stack  : chunk function ID . LexToken(LPAREN,'(',1,23)
   yacc.py: 469:Action : Reduce rule [names -> ID] with ['gets'] and goto state 59
   yacc.py: 503:Result : <node @ 0x7ff6c6a6e310> (<__main__.node object at 0x7ff6c6a6e310>)
   yacc.py: 408:
   yacc.py: 409:State  : 59
   yacc.py: 433:Stack  : chunk function names . LexToken(LPAREN,'(',1,23)
   yacc.py: 469:Action : Reduce rule [funcname -> names] with [<node @ 0x7ff6c6a6e310>] and goto state 58
   yacc.py: 503:Result : <node @ 0x7ff6c6a6ee10> (<__main__.node object at 0x7ff6c6a6ee10>)
   yacc.py: 408:
   yacc.py: 409:State  : 58
   yacc.py: 433:Stack  : chunk function funcname . LexToken(LPAREN,'(',1,23)
   yacc.py: 443:Action : Shift and goto state 119
   yacc.py: 408:
   yacc.py: 409:State  : 119
   yacc.py: 433:Stack  : chunk function funcname LPAREN . LexToken(ID,'a',1,24)
   yacc.py: 443:Action : Shift and goto state 18
   yacc.py: 408:
   yacc.py: 409:State  : 18
   yacc.py: 433:Stack  : chunk function funcname LPAREN ID . LexToken(COMMA,',',1,25)
   yacc.py: 469:Action : Reduce rule [names -> ID] with ['a'] and goto state 57
   yacc.py: 503:Result : <node @ 0x7ff6c6a6e490> (<__main__.node object at 0x7ff6c6a6e490>)
   yacc.py: 408:
   yacc.py: 409:State  : 57
   yacc.py: 433:Stack  : chunk function funcname LPAREN names . LexToken(COMMA,',',1,25)
   yacc.py: 443:Action : Shift and goto state 115
   yacc.py: 408:
   yacc.py: 409:State  : 115
   yacc.py: 433:Stack  : chunk function funcname LPAREN names COMMA . LexToken(ID,'b',1,26)
   yacc.py: 443:Action : Shift and goto state 18
   yacc.py: 408:
   yacc.py: 409:State  : 18
   yacc.py: 433:Stack  : chunk function funcname LPAREN names COMMA ID . LexToken(RPAREN,')',1,27)
   yacc.py: 469:Action : Reduce rule [names -> ID] with ['b'] and goto state 172
   yacc.py: 503:Result : <node @ 0x7ff6c6a69a10> (<__main__.node object at 0x7ff6c6a69a10>)
   yacc.py: 408:
   yacc.py: 409:State  : 172
   yacc.py: 433:Stack  : chunk function funcname LPAREN names COMMA names . LexToken(RPAREN,')',1,27)
   yacc.py: 472:Action : Reduce rule [empty -> <empty>] with [] and goto state 116
   yacc.py: 542:Result : <NoneType @ 0x7ff6cdcc4f40> (None)
   yacc.py: 408:
   yacc.py: 409:State  : 116
   yacc.py: 433:Stack  : chunk function funcname LPAREN names COMMA names empty . LexToken(RPAREN,')',1,27)
   yacc.py: 469:Action : Reduce rule [comid -> empty] with [None] and goto state 207
   yacc.py: 503:Result : <node @ 0x7ff6c6a69fd0> (<__main__.node object at 0x7ff6c6a69fd0>)
   yacc.py: 408:
   yacc.py: 409:State  : 207
   yacc.py: 433:Stack  : chunk function funcname LPAREN names COMMA names comid . LexToken(RPAREN,')',1,27)
   yacc.py: 469:Action : Reduce rule [comid -> COMMA names comid] with [',',<node @ 0x7ff6c6a69a10>,<node @ 0x7ff6c6a69fd0>] and goto state 117
   yacc.py: 503:Result : <node @ 0x7ff6c6a69b10> (<__main__.node object at 0x7ff6c6a69b10>)
   yacc.py: 408:
   yacc.py: 409:State  : 117
   yacc.py: 433:Stack  : chunk function funcname LPAREN names comid . LexToken(RPAREN,')',1,27)
   yacc.py: 469:Action : Reduce rule [namelist -> names comid] with [<node @ 0x7ff6c6a6e490>,<node @ 0x7ff6c6a69b10>] and goto state 173
   yacc.py: 503:Result : <node @ 0x7ff6c6a69990> (<__main__.node object at 0x7ff6c6a69990>)
   yacc.py: 408:
   yacc.py: 409:State  : 173
   yacc.py: 433:Stack  : chunk function funcname LPAREN namelist . LexToken(RPAREN,')',1,27)
   yacc.py: 469:Action : Reduce rule [parlist -> namelist] with [<node @ 0x7ff6c6a69990>] and goto state 175
   yacc.py: 503:Result : <node @ 0x7ff6c6a69c50> (<__main__.node object at 0x7ff6c6a69c50>)
   yacc.py: 408:
   yacc.py: 409:State  : 175
   yacc.py: 433:Stack  : chunk function funcname LPAREN parlist . LexToken(RPAREN,')',1,27)
   yacc.py: 443:Action : Shift and goto state 210
   yacc.py: 408:
   yacc.py: 409:State  : 210
   yacc.py: 433:Stack  : chunk function funcname LPAREN parlist RPAREN . LexToken(return,'return',1,32)
   yacc.py: 443:Action : Shift and goto state 16
   yacc.py: 408:
   yacc.py: 409:State  : 16
   yacc.py: 433:Stack  : chunk function funcname LPAREN parlist RPAREN return . LexToken(ID,'a',1,39)
   yacc.py: 443:Action : Shift and goto state 18
   yacc.py: 408:
   yacc.py: 409:State  : 18
   yacc.py: 433:Stack  : chunk function funcname LPAREN parlist RPAREN return ID . LexToken(end,'end',1,41)
   yacc.py: 469:Action : Reduce rule [names -> ID] with ['a'] and goto state 4
   yacc.py: 503:Result : <node @ 0x7ff6c6a69ed0> (<__main__.node object at 0x7ff6c6a69ed0>)
   yacc.py: 408:
   yacc.py: 409:State  : 4
   yacc.py: 433:Stack  : chunk function funcname LPAREN parlist RPAREN return names . LexToken(end,'end',1,41)
   yacc.py: 469:Action : Reduce rule [var -> names] with [<node @ 0x7ff6c6a69ed0>] and goto state 29
   yacc.py: 503:Result : <node @ 0x7ff6c6a69610> (<__main__.node object at 0x7ff6c6a69610>)
   yacc.py: 408:
   yacc.py: 409:State  : 29
   yacc.py: 433:Stack  : chunk function funcname LPAREN parlist RPAREN return var . LexToken(end,'end',1,41)
   yacc.py: 469:Action : Reduce rule [prefixexp -> var] with [<node @ 0x7ff6c6a69610>] and goto state 67
   yacc.py: 503:Result : <node @ 0x7ff6c71bcad0> (<__main__.node object at 0x7ff6c71bcad0>)
   yacc.py: 408:
   yacc.py: 409:State  : 67
   yacc.py: 433:Stack  : chunk function funcname LPAREN parlist RPAREN return prefixexp . LexToken(end,'end',1,41)
   yacc.py: 469:Action : Reduce rule [retexp -> prefixexp] with [<node @ 0x7ff6c71bcad0>] and goto state 68
   yacc.py: 503:Result : <node @ 0x7ff6c71bcb50> (<__main__.node object at 0x7ff6c71bcb50>)
   yacc.py: 408:
   yacc.py: 409:State  : 68
   yacc.py: 433:Stack  : chunk function funcname LPAREN parlist RPAREN return retexp . LexToken(end,'end',1,41)
   yacc.py: 469:Action : Reduce rule [retexplist -> retexp] with [<node @ 0x7ff6c71bcb50>] and goto state 73
   yacc.py: 503:Result : <node @ 0x7ff6c71bcc50> (<__main__.node object at 0x7ff6c71bcc50>)
   yacc.py: 408:
   yacc.py: 409:State  : 73
   yacc.py: 433:Stack  : chunk function funcname LPAREN parlist RPAREN return retexplist . LexToken(end,'end',1,41)
   yacc.py: 469:Action : Reduce rule [laststat -> return retexplist] with ['return',<node @ 0x7ff6c71bcc50>] and goto state 8
   yacc.py: 503:Result : <node @ 0x7ff6c71bcc90> (<__main__.node object at 0x7ff6c71bcc90>)
   yacc.py: 408:
   yacc.py: 409:State  : 8
   yacc.py: 433:Stack  : chunk function funcname LPAREN parlist RPAREN laststat . LexToken(end,'end',1,41)
   yacc.py: 469:Action : Reduce rule [sdash -> laststat] with [<node @ 0x7ff6c71bcc90>] and goto state 60
   yacc.py: 503:Result : <node @ 0x7ff6c6a69dd0> (<__main__.node object at 0x7ff6c6a69dd0>)
   yacc.py: 408:
   yacc.py: 409:State  : 60
   yacc.py: 433:Stack  : chunk function funcname LPAREN parlist RPAREN sdash . LexToken(end,'end',1,41)
   yacc.py: 469:Action : Reduce rule [block -> sdash] with [<node @ 0x7ff6c6a69dd0>] and goto state 222
   yacc.py: 503:Result : <node @ 0x7ff6c7152690> (<__main__.node object at 0x7ff6c7152690>)
   yacc.py: 408:
   yacc.py: 409:State  : 222
   yacc.py: 433:Stack  : chunk function funcname LPAREN parlist RPAREN block . LexToken(end,'end',1,41)
   yacc.py: 443:Action : Shift and goto state 229
   yacc.py: 408:
   yacc.py: 409:State  : 229
   yacc.py: 433:Stack  : chunk function funcname LPAREN parlist RPAREN block end . $end
   yacc.py: 469:Action : Reduce rule [funcbody -> LPAREN parlist RPAREN block end] with ['(',<node @ 0x7ff6c6a69c50>,')',<node @ 0x7ff6c7152690>,'end'] and goto state 118
   yacc.py: 503:Result : <node @ 0x7ff6c71526d0> (<__main__.node object at 0x7ff6c71526d0>)
   yacc.py: 408:
   yacc.py: 409:State  : 118
   yacc.py: 433:Stack  : chunk function funcname funcbody . $end
   yacc.py: 469:Action : Reduce rule [stat -> function funcname funcbody] with ['function',<node @ 0x7ff6c6a6ee10>,<node @ 0x7ff6c71526d0>] and goto state 43
   yacc.py: 503:Result : <node @ 0x7ff6c6a6e3d0> (<__main__.node object at 0x7ff6c6a6e3d0>)
   yacc.py: 408:
   yacc.py: 409:State  : 43
   yacc.py: 433:Stack  : chunk stat . $end
   yacc.py: 469:Action : Reduce rule [chunk -> chunk stat] with [<node @ 0x7ff6c6a5db90>,<node @ 0x7ff6c6a6e3d0>] and goto state 3
   yacc.py: 503:Result : <node @ 0x7ff6c6a62790> (<__main__.node object at 0x7ff6c6a62790>)
   yacc.py: 408:
   yacc.py: 409:State  : 3
   yacc.py: 433:Stack  : chunk . $end
   yacc.py: 469:Action : Reduce rule [sdash -> chunk] with [<node @ 0x7ff6c6a62790>] and goto state 21
   yacc.py: 503:Result : <node @ 0x7ff6c6a69a90> (<__main__.node object at 0x7ff6c6a69a90>)
   yacc.py: 408:
   yacc.py: 409:State  : 21
   yacc.py: 433:Stack  : sdash . $end
   yacc.py: 564:Done   : Returning <node @ 0x7ff6c6a69a90> (<__main__.node object at 0x7ff6c6a69a90>)
   yacc.py: 565:PLY: PARSE DEBUG END
