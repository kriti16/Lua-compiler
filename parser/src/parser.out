Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE
    TDASH

Grammar

Rule 0     S' -> sdash
Rule 1     sdash -> chunk
Rule 2     sdash -> chunk laststat
Rule 3     sdash -> chunk laststat SEMI
Rule 4     chunk -> chunk stat
Rule 5     chunk -> chunk stat SEMI
Rule 6     chunk -> empty
Rule 7     block -> sdash
Rule 8     stat -> varlist EQUALS explist
Rule 9     stat -> do block end
Rule 10    stat -> while exp do block end
Rule 11    stat -> repeat block until exp
Rule 12    stat -> if exp then block ifblock else block end
Rule 13    stat -> if exp then block ifblock end
Rule 14    stat -> for names EQUALS exp COMMA exp do block end
Rule 15    stat -> for names EQUALS exp COMMA exp COMMA exp do block end
Rule 16    stat -> for namelist in explist do block end
Rule 17    stat -> local namelist
Rule 18    stat -> local namelist EQUALS explist
Rule 19    stat -> function funcname funcbody
Rule 20    stat -> local function names funcbody
Rule 21    funcbody -> LPAREN RPAREN block end
Rule 22    funcbody -> LPAREN parlist RPAREN block end
Rule 23    parlist -> namelist
Rule 24    parlist -> namelist comtrp
Rule 25    parlist -> TRPLDOTS
Rule 26    comtrp -> COMMA TRPLDOTS
Rule 27    laststat -> return explist
Rule 28    laststat -> return
Rule 29    laststat -> break
Rule 30    funcname -> names dotid COLON
Rule 31    funcname -> names dotid
Rule 32    dotid -> SDOT names dotid
Rule 33    dotid -> empty
Rule 34    comvar -> COMMA var comvar
Rule 35    comvar -> empty
Rule 36    comid -> COMMA names comid
Rule 37    comid -> empty
Rule 38    ifblock -> ifblock elseif exp then block
Rule 39    ifblock -> empty
Rule 40    varlist -> var comvar
Rule 41    var -> names
Rule 42    var -> prefixexp LSQUARE exp RSQUARE
Rule 43    var -> prefixexp SDOT names
Rule 44    namelist -> names comid
Rule 45    explist -> explist COMMA exp
Rule 46    explist -> exp
Rule 47    exp -> nil
Rule 48    exp -> false
Rule 49    exp -> true
Rule 50    exp -> Number
Rule 51    exp -> STRING
Rule 52    exp -> TRPLDOTS
Rule 53    exp -> function
Rule 54    exp -> prefixexp
Rule 55    exp -> exp PLUS exp
Rule 56    exp -> exp MINUS exp
Rule 57    exp -> exp TIMES exp
Rule 58    exp -> exp DIVIDE exp
Rule 59    exp -> exp POWER exp
Rule 60    exp -> exp LT exp
Rule 61    exp -> exp LE exp
Rule 62    exp -> exp GT exp
Rule 63    exp -> exp GE exp
Rule 64    exp -> exp NE exp
Rule 65    exp -> exp CHECKEQ exp
Rule 66    exp -> exp and exp
Rule 67    exp -> exp or exp
Rule 68    exp -> exp MODULO exp
Rule 69    exp -> exp DBLDOTS exp
Rule 70    exp -> tableconstructor
Rule 71    exp -> unop exp
Rule 72    Number -> INTEGER
Rule 73    Number -> FLOAT
Rule 74    Number -> HEX
Rule 75    empty -> <empty>
Rule 76    prefixexp -> var
Rule 77    prefixexp -> LPAREN exp RPAREN
Rule 78    unop -> MINUS
Rule 79    unop -> not
Rule 80    unop -> HASH
Rule 81    tableconstructor -> LCURLY fieldlist RCURLY
Rule 82    tableconstructor -> LCURLY RCURLY
Rule 83    fieldlist -> field fieldseplist fieldsep
Rule 84    fieldlist -> field fieldseplist
Rule 85    fieldseplist -> fieldseplist fieldsep field
Rule 86    fieldseplist -> empty
Rule 87    field -> LSQUARE exp RSQUARE EQUALS exp
Rule 88    field -> names EQUALS exp
Rule 89    field -> exp
Rule 90    fieldsep -> COMMA
Rule 91    fieldsep -> SEMI
Rule 92    names -> ID
Rule 93    names -> RESID

Terminals, with rules where they appear

CHECKEQ              : 65
COLON                : 30
COMMA                : 14 15 15 26 34 36 45 90
DBLDOTS              : 69
DIVIDE               : 58
EQUALS               : 8 14 15 18 87 88
FLOAT                : 73
GE                   : 63
GT                   : 62
HASH                 : 80
HEX                  : 74
ID                   : 92
INTEGER              : 72
LCURLY               : 81 82
LE                   : 61
LPAREN               : 21 22 77
LSQUARE              : 42 87
LT                   : 60
MINUS                : 56 78
MODULO               : 68
NE                   : 64
NEWLINE              : 
PLUS                 : 55
POWER                : 59
RCURLY               : 81 82
RESID                : 93
RPAREN               : 21 22 77
RSQUARE              : 42 87
SDOT                 : 32 43
SEMI                 : 3 5 91
STRING               : 51
TDASH                : 
TIMES                : 57
TRPLDOTS             : 25 26 52
and                  : 66
break                : 29
do                   : 9 10 14 15 16
else                 : 12
elseif               : 38
end                  : 9 10 12 13 14 15 16 21 22
error                : 
false                : 48
for                  : 14 15 16
function             : 19 20 53
if                   : 12 13
in                   : 16
local                : 17 18 20
nil                  : 47
not                  : 79
or                   : 67
repeat               : 11
return               : 27 28
then                 : 12 13 38
true                 : 49
until                : 11
while                : 10

Nonterminals, with rules where they appear

Number               : 50
block                : 9 10 11 12 12 13 14 15 16 21 22 38
chunk                : 1 2 3 4 5
comid                : 36 44
comtrp               : 24
comvar               : 34 40
dotid                : 30 31 32
empty                : 6 33 35 37 39 86
exp                  : 10 11 12 13 14 14 15 15 15 38 42 45 46 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 71 77 87 87 88 89
explist              : 8 16 18 27 45
field                : 83 84 85
fieldlist            : 81
fieldsep             : 83 85
fieldseplist         : 83 84 85
funcbody             : 19 20
funcname             : 19
ifblock              : 12 13 38
laststat             : 2 3
namelist             : 16 17 18 23 24
names                : 14 15 20 30 31 32 36 41 43 44 88
parlist              : 22
prefixexp            : 42 43 54
sdash                : 7 0
stat                 : 4 5
tableconstructor     : 70
unop                 : 71
var                  : 34 40 76
varlist              : 8

Parsing method: LALR

state 0

    (0) S' -> . sdash
    (1) sdash -> . chunk
    (2) sdash -> . chunk laststat
    (3) sdash -> . chunk laststat SEMI
    (4) chunk -> . chunk stat
    (5) chunk -> . chunk stat SEMI
    (6) chunk -> . empty
    (75) empty -> .

    return          reduce using rule 75 (empty -> .)
    break           reduce using rule 75 (empty -> .)
    do              reduce using rule 75 (empty -> .)
    while           reduce using rule 75 (empty -> .)
    repeat          reduce using rule 75 (empty -> .)
    if              reduce using rule 75 (empty -> .)
    for             reduce using rule 75 (empty -> .)
    local           reduce using rule 75 (empty -> .)
    function        reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    RESID           reduce using rule 75 (empty -> .)
    LPAREN          reduce using rule 75 (empty -> .)
    $end            reduce using rule 75 (empty -> .)

    chunk                          shift and go to state 1
    empty                          shift and go to state 3
    sdash                          shift and go to state 2

state 1

    (1) sdash -> chunk .
    (2) sdash -> chunk . laststat
    (3) sdash -> chunk . laststat SEMI
    (4) chunk -> chunk . stat
    (5) chunk -> chunk . stat SEMI
    (27) laststat -> . return explist
    (28) laststat -> . return
    (29) laststat -> . break
    (8) stat -> . varlist EQUALS explist
    (9) stat -> . do block end
    (10) stat -> . while exp do block end
    (11) stat -> . repeat block until exp
    (12) stat -> . if exp then block ifblock else block end
    (13) stat -> . if exp then block ifblock end
    (14) stat -> . for names EQUALS exp COMMA exp do block end
    (15) stat -> . for names EQUALS exp COMMA exp COMMA exp do block end
    (16) stat -> . for namelist in explist do block end
    (17) stat -> . local namelist
    (18) stat -> . local namelist EQUALS explist
    (19) stat -> . function funcname funcbody
    (20) stat -> . local function names funcbody
    (40) varlist -> . var comvar
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN

    else            reduce using rule 1 (sdash -> chunk .)
    end             reduce using rule 1 (sdash -> chunk .)
    elseif          reduce using rule 1 (sdash -> chunk .)
    until           reduce using rule 1 (sdash -> chunk .)
    $end            reduce using rule 1 (sdash -> chunk .)
    return          shift and go to state 18
    break           shift and go to state 19
    do              shift and go to state 15
    while           shift and go to state 21
    repeat          shift and go to state 17
    if              shift and go to state 7
    for             shift and go to state 9
    local           shift and go to state 13
    function        shift and go to state 14
    ID              shift and go to state 20
    RESID           shift and go to state 4
    LPAREN          shift and go to state 5

    prefixexp                      shift and go to state 8
    stat                           shift and go to state 16
    varlist                        shift and go to state 10
    laststat                       shift and go to state 11
    names                          shift and go to state 6
    var                            shift and go to state 12

state 2

    (0) S' -> sdash .



state 3

    (6) chunk -> empty .

    return          reduce using rule 6 (chunk -> empty .)
    break           reduce using rule 6 (chunk -> empty .)
    do              reduce using rule 6 (chunk -> empty .)
    while           reduce using rule 6 (chunk -> empty .)
    repeat          reduce using rule 6 (chunk -> empty .)
    if              reduce using rule 6 (chunk -> empty .)
    for             reduce using rule 6 (chunk -> empty .)
    local           reduce using rule 6 (chunk -> empty .)
    function        reduce using rule 6 (chunk -> empty .)
    ID              reduce using rule 6 (chunk -> empty .)
    RESID           reduce using rule 6 (chunk -> empty .)
    LPAREN          reduce using rule 6 (chunk -> empty .)
    else            reduce using rule 6 (chunk -> empty .)
    end             reduce using rule 6 (chunk -> empty .)
    elseif          reduce using rule 6 (chunk -> empty .)
    until           reduce using rule 6 (chunk -> empty .)
    $end            reduce using rule 6 (chunk -> empty .)


state 4

    (93) names -> RESID .

    SDOT            reduce using rule 93 (names -> RESID .)
    COLON           reduce using rule 93 (names -> RESID .)
    LPAREN          reduce using rule 93 (names -> RESID .)
    LSQUARE         reduce using rule 93 (names -> RESID .)
    PLUS            reduce using rule 93 (names -> RESID .)
    MINUS           reduce using rule 93 (names -> RESID .)
    TIMES           reduce using rule 93 (names -> RESID .)
    DIVIDE          reduce using rule 93 (names -> RESID .)
    POWER           reduce using rule 93 (names -> RESID .)
    LT              reduce using rule 93 (names -> RESID .)
    LE              reduce using rule 93 (names -> RESID .)
    GT              reduce using rule 93 (names -> RESID .)
    GE              reduce using rule 93 (names -> RESID .)
    NE              reduce using rule 93 (names -> RESID .)
    CHECKEQ         reduce using rule 93 (names -> RESID .)
    and             reduce using rule 93 (names -> RESID .)
    or              reduce using rule 93 (names -> RESID .)
    MODULO          reduce using rule 93 (names -> RESID .)
    DBLDOTS         reduce using rule 93 (names -> RESID .)
    RPAREN          reduce using rule 93 (names -> RESID .)
    then            reduce using rule 93 (names -> RESID .)
    COMMA           reduce using rule 93 (names -> RESID .)
    SEMI            reduce using rule 93 (names -> RESID .)
    $end            reduce using rule 93 (names -> RESID .)
    end             reduce using rule 93 (names -> RESID .)
    until           reduce using rule 93 (names -> RESID .)
    else            reduce using rule 93 (names -> RESID .)
    elseif          reduce using rule 93 (names -> RESID .)
    do              reduce using rule 93 (names -> RESID .)
    RCURLY          reduce using rule 93 (names -> RESID .)
    RSQUARE         reduce using rule 93 (names -> RESID .)
    return          reduce using rule 93 (names -> RESID .)
    break           reduce using rule 93 (names -> RESID .)
    while           reduce using rule 93 (names -> RESID .)
    repeat          reduce using rule 93 (names -> RESID .)
    if              reduce using rule 93 (names -> RESID .)
    for             reduce using rule 93 (names -> RESID .)
    local           reduce using rule 93 (names -> RESID .)
    function        reduce using rule 93 (names -> RESID .)
    ID              reduce using rule 93 (names -> RESID .)
    RESID           reduce using rule 93 (names -> RESID .)
    EQUALS          reduce using rule 93 (names -> RESID .)
    in              reduce using rule 93 (names -> RESID .)


state 5

    (77) prefixexp -> LPAREN . exp RPAREN
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 38
    var                            shift and go to state 29
    names                          shift and go to state 6

state 6

    (41) var -> names .

    LSQUARE         reduce using rule 41 (var -> names .)
    SDOT            reduce using rule 41 (var -> names .)
    PLUS            reduce using rule 41 (var -> names .)
    MINUS           reduce using rule 41 (var -> names .)
    TIMES           reduce using rule 41 (var -> names .)
    DIVIDE          reduce using rule 41 (var -> names .)
    POWER           reduce using rule 41 (var -> names .)
    LT              reduce using rule 41 (var -> names .)
    LE              reduce using rule 41 (var -> names .)
    GT              reduce using rule 41 (var -> names .)
    GE              reduce using rule 41 (var -> names .)
    NE              reduce using rule 41 (var -> names .)
    CHECKEQ         reduce using rule 41 (var -> names .)
    and             reduce using rule 41 (var -> names .)
    or              reduce using rule 41 (var -> names .)
    MODULO          reduce using rule 41 (var -> names .)
    DBLDOTS         reduce using rule 41 (var -> names .)
    RPAREN          reduce using rule 41 (var -> names .)
    then            reduce using rule 41 (var -> names .)
    COMMA           reduce using rule 41 (var -> names .)
    SEMI            reduce using rule 41 (var -> names .)
    $end            reduce using rule 41 (var -> names .)
    end             reduce using rule 41 (var -> names .)
    until           reduce using rule 41 (var -> names .)
    else            reduce using rule 41 (var -> names .)
    elseif          reduce using rule 41 (var -> names .)
    do              reduce using rule 41 (var -> names .)
    RCURLY          reduce using rule 41 (var -> names .)
    RSQUARE         reduce using rule 41 (var -> names .)
    return          reduce using rule 41 (var -> names .)
    break           reduce using rule 41 (var -> names .)
    while           reduce using rule 41 (var -> names .)
    repeat          reduce using rule 41 (var -> names .)
    if              reduce using rule 41 (var -> names .)
    for             reduce using rule 41 (var -> names .)
    local           reduce using rule 41 (var -> names .)
    function        reduce using rule 41 (var -> names .)
    ID              reduce using rule 41 (var -> names .)
    RESID           reduce using rule 41 (var -> names .)
    LPAREN          reduce using rule 41 (var -> names .)
    EQUALS          reduce using rule 41 (var -> names .)


state 7

    (12) stat -> if . exp then block ifblock else block end
    (13) stat -> if . exp then block ifblock end
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 41
    var                            shift and go to state 29
    names                          shift and go to state 6

state 8

    (42) var -> prefixexp . LSQUARE exp RSQUARE
    (43) var -> prefixexp . SDOT names

    LSQUARE         shift and go to state 42
    SDOT            shift and go to state 43


state 9

    (14) stat -> for . names EQUALS exp COMMA exp do block end
    (15) stat -> for . names EQUALS exp COMMA exp COMMA exp do block end
    (16) stat -> for . namelist in explist do block end
    (92) names -> . ID
    (93) names -> . RESID
    (44) namelist -> . names comid

    ID              shift and go to state 20
    RESID           shift and go to state 4

    namelist                       shift and go to state 44
    names                          shift and go to state 45

state 10

    (8) stat -> varlist . EQUALS explist

    EQUALS          shift and go to state 46


state 11

    (2) sdash -> chunk laststat .
    (3) sdash -> chunk laststat . SEMI

    else            reduce using rule 2 (sdash -> chunk laststat .)
    end             reduce using rule 2 (sdash -> chunk laststat .)
    elseif          reduce using rule 2 (sdash -> chunk laststat .)
    until           reduce using rule 2 (sdash -> chunk laststat .)
    $end            reduce using rule 2 (sdash -> chunk laststat .)
    SEMI            shift and go to state 47


state 12

    (40) varlist -> var . comvar
    (76) prefixexp -> var .
    (34) comvar -> . COMMA var comvar
    (35) comvar -> . empty
    (75) empty -> .

    LSQUARE         reduce using rule 76 (prefixexp -> var .)
    SDOT            reduce using rule 76 (prefixexp -> var .)
    COMMA           shift and go to state 48
    EQUALS          reduce using rule 75 (empty -> .)

    comvar                         shift and go to state 49
    empty                          shift and go to state 50

state 13

    (17) stat -> local . namelist
    (18) stat -> local . namelist EQUALS explist
    (20) stat -> local . function names funcbody
    (44) namelist -> . names comid
    (92) names -> . ID
    (93) names -> . RESID

    function        shift and go to state 51
    ID              shift and go to state 20
    RESID           shift and go to state 4

    namelist                       shift and go to state 52
    names                          shift and go to state 53

state 14

    (19) stat -> function . funcname funcbody
    (30) funcname -> . names dotid COLON
    (31) funcname -> . names dotid
    (92) names -> . ID
    (93) names -> . RESID

    ID              shift and go to state 20
    RESID           shift and go to state 4

    names                          shift and go to state 55
    funcname                       shift and go to state 54

state 15

    (9) stat -> do . block end
    (7) block -> . sdash
    (1) sdash -> . chunk
    (2) sdash -> . chunk laststat
    (3) sdash -> . chunk laststat SEMI
    (4) chunk -> . chunk stat
    (5) chunk -> . chunk stat SEMI
    (6) chunk -> . empty
    (75) empty -> .

    return          reduce using rule 75 (empty -> .)
    break           reduce using rule 75 (empty -> .)
    do              reduce using rule 75 (empty -> .)
    while           reduce using rule 75 (empty -> .)
    repeat          reduce using rule 75 (empty -> .)
    if              reduce using rule 75 (empty -> .)
    for             reduce using rule 75 (empty -> .)
    local           reduce using rule 75 (empty -> .)
    function        reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    RESID           reduce using rule 75 (empty -> .)
    LPAREN          reduce using rule 75 (empty -> .)
    end             reduce using rule 75 (empty -> .)

    chunk                          shift and go to state 1
    empty                          shift and go to state 3
    block                          shift and go to state 56
    sdash                          shift and go to state 57

state 16

    (4) chunk -> chunk stat .
    (5) chunk -> chunk stat . SEMI

    return          reduce using rule 4 (chunk -> chunk stat .)
    break           reduce using rule 4 (chunk -> chunk stat .)
    do              reduce using rule 4 (chunk -> chunk stat .)
    while           reduce using rule 4 (chunk -> chunk stat .)
    repeat          reduce using rule 4 (chunk -> chunk stat .)
    if              reduce using rule 4 (chunk -> chunk stat .)
    for             reduce using rule 4 (chunk -> chunk stat .)
    local           reduce using rule 4 (chunk -> chunk stat .)
    function        reduce using rule 4 (chunk -> chunk stat .)
    ID              reduce using rule 4 (chunk -> chunk stat .)
    RESID           reduce using rule 4 (chunk -> chunk stat .)
    LPAREN          reduce using rule 4 (chunk -> chunk stat .)
    else            reduce using rule 4 (chunk -> chunk stat .)
    end             reduce using rule 4 (chunk -> chunk stat .)
    elseif          reduce using rule 4 (chunk -> chunk stat .)
    until           reduce using rule 4 (chunk -> chunk stat .)
    $end            reduce using rule 4 (chunk -> chunk stat .)
    SEMI            shift and go to state 58


state 17

    (11) stat -> repeat . block until exp
    (7) block -> . sdash
    (1) sdash -> . chunk
    (2) sdash -> . chunk laststat
    (3) sdash -> . chunk laststat SEMI
    (4) chunk -> . chunk stat
    (5) chunk -> . chunk stat SEMI
    (6) chunk -> . empty
    (75) empty -> .

    return          reduce using rule 75 (empty -> .)
    break           reduce using rule 75 (empty -> .)
    do              reduce using rule 75 (empty -> .)
    while           reduce using rule 75 (empty -> .)
    repeat          reduce using rule 75 (empty -> .)
    if              reduce using rule 75 (empty -> .)
    for             reduce using rule 75 (empty -> .)
    local           reduce using rule 75 (empty -> .)
    function        reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    RESID           reduce using rule 75 (empty -> .)
    LPAREN          reduce using rule 75 (empty -> .)
    until           reduce using rule 75 (empty -> .)

    chunk                          shift and go to state 1
    empty                          shift and go to state 3
    sdash                          shift and go to state 57
    block                          shift and go to state 59

state 18

    (27) laststat -> return . explist
    (28) laststat -> return .
    (45) explist -> . explist COMMA exp
    (46) explist -> . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    SEMI            reduce using rule 28 (laststat -> return .)
    $end            reduce using rule 28 (laststat -> return .)
    end             reduce using rule 28 (laststat -> return .)
    until           reduce using rule 28 (laststat -> return .)
    else            reduce using rule 28 (laststat -> return .)
    elseif          reduce using rule 28 (laststat -> return .)
    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 61
    var                            shift and go to state 29
    explist                        shift and go to state 60
    names                          shift and go to state 6

state 19

    (29) laststat -> break .

    SEMI            reduce using rule 29 (laststat -> break .)
    $end            reduce using rule 29 (laststat -> break .)
    end             reduce using rule 29 (laststat -> break .)
    until           reduce using rule 29 (laststat -> break .)
    else            reduce using rule 29 (laststat -> break .)
    elseif          reduce using rule 29 (laststat -> break .)


state 20

    (92) names -> ID .

    SDOT            reduce using rule 92 (names -> ID .)
    COLON           reduce using rule 92 (names -> ID .)
    LPAREN          reduce using rule 92 (names -> ID .)
    LSQUARE         reduce using rule 92 (names -> ID .)
    PLUS            reduce using rule 92 (names -> ID .)
    MINUS           reduce using rule 92 (names -> ID .)
    TIMES           reduce using rule 92 (names -> ID .)
    DIVIDE          reduce using rule 92 (names -> ID .)
    POWER           reduce using rule 92 (names -> ID .)
    LT              reduce using rule 92 (names -> ID .)
    LE              reduce using rule 92 (names -> ID .)
    GT              reduce using rule 92 (names -> ID .)
    GE              reduce using rule 92 (names -> ID .)
    NE              reduce using rule 92 (names -> ID .)
    CHECKEQ         reduce using rule 92 (names -> ID .)
    and             reduce using rule 92 (names -> ID .)
    or              reduce using rule 92 (names -> ID .)
    MODULO          reduce using rule 92 (names -> ID .)
    DBLDOTS         reduce using rule 92 (names -> ID .)
    RPAREN          reduce using rule 92 (names -> ID .)
    then            reduce using rule 92 (names -> ID .)
    COMMA           reduce using rule 92 (names -> ID .)
    SEMI            reduce using rule 92 (names -> ID .)
    $end            reduce using rule 92 (names -> ID .)
    end             reduce using rule 92 (names -> ID .)
    until           reduce using rule 92 (names -> ID .)
    else            reduce using rule 92 (names -> ID .)
    elseif          reduce using rule 92 (names -> ID .)
    do              reduce using rule 92 (names -> ID .)
    RCURLY          reduce using rule 92 (names -> ID .)
    RSQUARE         reduce using rule 92 (names -> ID .)
    return          reduce using rule 92 (names -> ID .)
    break           reduce using rule 92 (names -> ID .)
    while           reduce using rule 92 (names -> ID .)
    repeat          reduce using rule 92 (names -> ID .)
    if              reduce using rule 92 (names -> ID .)
    for             reduce using rule 92 (names -> ID .)
    local           reduce using rule 92 (names -> ID .)
    function        reduce using rule 92 (names -> ID .)
    ID              reduce using rule 92 (names -> ID .)
    RESID           reduce using rule 92 (names -> ID .)
    EQUALS          reduce using rule 92 (names -> ID .)
    in              reduce using rule 92 (names -> ID .)


state 21

    (10) stat -> while . exp do block end
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 62
    var                            shift and go to state 29
    names                          shift and go to state 6

state 22

    (70) exp -> tableconstructor .

    PLUS            reduce using rule 70 (exp -> tableconstructor .)
    MINUS           reduce using rule 70 (exp -> tableconstructor .)
    TIMES           reduce using rule 70 (exp -> tableconstructor .)
    DIVIDE          reduce using rule 70 (exp -> tableconstructor .)
    POWER           reduce using rule 70 (exp -> tableconstructor .)
    LT              reduce using rule 70 (exp -> tableconstructor .)
    LE              reduce using rule 70 (exp -> tableconstructor .)
    GT              reduce using rule 70 (exp -> tableconstructor .)
    GE              reduce using rule 70 (exp -> tableconstructor .)
    NE              reduce using rule 70 (exp -> tableconstructor .)
    CHECKEQ         reduce using rule 70 (exp -> tableconstructor .)
    and             reduce using rule 70 (exp -> tableconstructor .)
    or              reduce using rule 70 (exp -> tableconstructor .)
    MODULO          reduce using rule 70 (exp -> tableconstructor .)
    DBLDOTS         reduce using rule 70 (exp -> tableconstructor .)
    do              reduce using rule 70 (exp -> tableconstructor .)
    COMMA           reduce using rule 70 (exp -> tableconstructor .)
    SEMI            reduce using rule 70 (exp -> tableconstructor .)
    RCURLY          reduce using rule 70 (exp -> tableconstructor .)
    RPAREN          reduce using rule 70 (exp -> tableconstructor .)
    then            reduce using rule 70 (exp -> tableconstructor .)
    $end            reduce using rule 70 (exp -> tableconstructor .)
    end             reduce using rule 70 (exp -> tableconstructor .)
    until           reduce using rule 70 (exp -> tableconstructor .)
    else            reduce using rule 70 (exp -> tableconstructor .)
    elseif          reduce using rule 70 (exp -> tableconstructor .)
    RSQUARE         reduce using rule 70 (exp -> tableconstructor .)
    return          reduce using rule 70 (exp -> tableconstructor .)
    break           reduce using rule 70 (exp -> tableconstructor .)
    while           reduce using rule 70 (exp -> tableconstructor .)
    repeat          reduce using rule 70 (exp -> tableconstructor .)
    if              reduce using rule 70 (exp -> tableconstructor .)
    for             reduce using rule 70 (exp -> tableconstructor .)
    local           reduce using rule 70 (exp -> tableconstructor .)
    function        reduce using rule 70 (exp -> tableconstructor .)
    ID              reduce using rule 70 (exp -> tableconstructor .)
    RESID           reduce using rule 70 (exp -> tableconstructor .)
    LPAREN          reduce using rule 70 (exp -> tableconstructor .)


state 23

    (48) exp -> false .

    PLUS            reduce using rule 48 (exp -> false .)
    MINUS           reduce using rule 48 (exp -> false .)
    TIMES           reduce using rule 48 (exp -> false .)
    DIVIDE          reduce using rule 48 (exp -> false .)
    POWER           reduce using rule 48 (exp -> false .)
    LT              reduce using rule 48 (exp -> false .)
    LE              reduce using rule 48 (exp -> false .)
    GT              reduce using rule 48 (exp -> false .)
    GE              reduce using rule 48 (exp -> false .)
    NE              reduce using rule 48 (exp -> false .)
    CHECKEQ         reduce using rule 48 (exp -> false .)
    and             reduce using rule 48 (exp -> false .)
    or              reduce using rule 48 (exp -> false .)
    MODULO          reduce using rule 48 (exp -> false .)
    DBLDOTS         reduce using rule 48 (exp -> false .)
    do              reduce using rule 48 (exp -> false .)
    COMMA           reduce using rule 48 (exp -> false .)
    SEMI            reduce using rule 48 (exp -> false .)
    RCURLY          reduce using rule 48 (exp -> false .)
    RPAREN          reduce using rule 48 (exp -> false .)
    then            reduce using rule 48 (exp -> false .)
    $end            reduce using rule 48 (exp -> false .)
    end             reduce using rule 48 (exp -> false .)
    until           reduce using rule 48 (exp -> false .)
    else            reduce using rule 48 (exp -> false .)
    elseif          reduce using rule 48 (exp -> false .)
    RSQUARE         reduce using rule 48 (exp -> false .)
    return          reduce using rule 48 (exp -> false .)
    break           reduce using rule 48 (exp -> false .)
    while           reduce using rule 48 (exp -> false .)
    repeat          reduce using rule 48 (exp -> false .)
    if              reduce using rule 48 (exp -> false .)
    for             reduce using rule 48 (exp -> false .)
    local           reduce using rule 48 (exp -> false .)
    function        reduce using rule 48 (exp -> false .)
    ID              reduce using rule 48 (exp -> false .)
    RESID           reduce using rule 48 (exp -> false .)
    LPAREN          reduce using rule 48 (exp -> false .)


state 24

    (81) tableconstructor -> LCURLY . fieldlist RCURLY
    (82) tableconstructor -> LCURLY . RCURLY
    (83) fieldlist -> . field fieldseplist fieldsep
    (84) fieldlist -> . field fieldseplist
    (87) field -> . LSQUARE exp RSQUARE EQUALS exp
    (88) field -> . names EQUALS exp
    (89) field -> . exp
    (92) names -> . ID
    (93) names -> . RESID
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names

    RCURLY          shift and go to state 64
    LSQUARE         shift and go to state 68
    ID              shift and go to state 20
    RESID           shift and go to state 4
    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    field                          shift and go to state 65
    unop                           shift and go to state 39
    fieldlist                      shift and go to state 66
    exp                            shift and go to state 67
    var                            shift and go to state 29
    names                          shift and go to state 63

state 25

    (80) unop -> HASH .

    nil             reduce using rule 80 (unop -> HASH .)
    false           reduce using rule 80 (unop -> HASH .)
    true            reduce using rule 80 (unop -> HASH .)
    STRING          reduce using rule 80 (unop -> HASH .)
    TRPLDOTS        reduce using rule 80 (unop -> HASH .)
    function        reduce using rule 80 (unop -> HASH .)
    INTEGER         reduce using rule 80 (unop -> HASH .)
    FLOAT           reduce using rule 80 (unop -> HASH .)
    HEX             reduce using rule 80 (unop -> HASH .)
    LPAREN          reduce using rule 80 (unop -> HASH .)
    LCURLY          reduce using rule 80 (unop -> HASH .)
    MINUS           reduce using rule 80 (unop -> HASH .)
    not             reduce using rule 80 (unop -> HASH .)
    HASH            reduce using rule 80 (unop -> HASH .)
    ID              reduce using rule 80 (unop -> HASH .)
    RESID           reduce using rule 80 (unop -> HASH .)


state 26

    (78) unop -> MINUS .

    nil             reduce using rule 78 (unop -> MINUS .)
    false           reduce using rule 78 (unop -> MINUS .)
    true            reduce using rule 78 (unop -> MINUS .)
    STRING          reduce using rule 78 (unop -> MINUS .)
    TRPLDOTS        reduce using rule 78 (unop -> MINUS .)
    function        reduce using rule 78 (unop -> MINUS .)
    INTEGER         reduce using rule 78 (unop -> MINUS .)
    FLOAT           reduce using rule 78 (unop -> MINUS .)
    HEX             reduce using rule 78 (unop -> MINUS .)
    LPAREN          reduce using rule 78 (unop -> MINUS .)
    LCURLY          reduce using rule 78 (unop -> MINUS .)
    MINUS           reduce using rule 78 (unop -> MINUS .)
    not             reduce using rule 78 (unop -> MINUS .)
    HASH            reduce using rule 78 (unop -> MINUS .)
    ID              reduce using rule 78 (unop -> MINUS .)
    RESID           reduce using rule 78 (unop -> MINUS .)


state 27

    (51) exp -> STRING .

    PLUS            reduce using rule 51 (exp -> STRING .)
    MINUS           reduce using rule 51 (exp -> STRING .)
    TIMES           reduce using rule 51 (exp -> STRING .)
    DIVIDE          reduce using rule 51 (exp -> STRING .)
    POWER           reduce using rule 51 (exp -> STRING .)
    LT              reduce using rule 51 (exp -> STRING .)
    LE              reduce using rule 51 (exp -> STRING .)
    GT              reduce using rule 51 (exp -> STRING .)
    GE              reduce using rule 51 (exp -> STRING .)
    NE              reduce using rule 51 (exp -> STRING .)
    CHECKEQ         reduce using rule 51 (exp -> STRING .)
    and             reduce using rule 51 (exp -> STRING .)
    or              reduce using rule 51 (exp -> STRING .)
    MODULO          reduce using rule 51 (exp -> STRING .)
    DBLDOTS         reduce using rule 51 (exp -> STRING .)
    do              reduce using rule 51 (exp -> STRING .)
    COMMA           reduce using rule 51 (exp -> STRING .)
    SEMI            reduce using rule 51 (exp -> STRING .)
    RCURLY          reduce using rule 51 (exp -> STRING .)
    RPAREN          reduce using rule 51 (exp -> STRING .)
    then            reduce using rule 51 (exp -> STRING .)
    $end            reduce using rule 51 (exp -> STRING .)
    end             reduce using rule 51 (exp -> STRING .)
    until           reduce using rule 51 (exp -> STRING .)
    else            reduce using rule 51 (exp -> STRING .)
    elseif          reduce using rule 51 (exp -> STRING .)
    RSQUARE         reduce using rule 51 (exp -> STRING .)
    return          reduce using rule 51 (exp -> STRING .)
    break           reduce using rule 51 (exp -> STRING .)
    while           reduce using rule 51 (exp -> STRING .)
    repeat          reduce using rule 51 (exp -> STRING .)
    if              reduce using rule 51 (exp -> STRING .)
    for             reduce using rule 51 (exp -> STRING .)
    local           reduce using rule 51 (exp -> STRING .)
    function        reduce using rule 51 (exp -> STRING .)
    ID              reduce using rule 51 (exp -> STRING .)
    RESID           reduce using rule 51 (exp -> STRING .)
    LPAREN          reduce using rule 51 (exp -> STRING .)


state 28

    (54) exp -> prefixexp .
    (42) var -> prefixexp . LSQUARE exp RSQUARE
    (43) var -> prefixexp . SDOT names

    PLUS            reduce using rule 54 (exp -> prefixexp .)
    MINUS           reduce using rule 54 (exp -> prefixexp .)
    TIMES           reduce using rule 54 (exp -> prefixexp .)
    DIVIDE          reduce using rule 54 (exp -> prefixexp .)
    POWER           reduce using rule 54 (exp -> prefixexp .)
    LT              reduce using rule 54 (exp -> prefixexp .)
    LE              reduce using rule 54 (exp -> prefixexp .)
    GT              reduce using rule 54 (exp -> prefixexp .)
    GE              reduce using rule 54 (exp -> prefixexp .)
    NE              reduce using rule 54 (exp -> prefixexp .)
    CHECKEQ         reduce using rule 54 (exp -> prefixexp .)
    and             reduce using rule 54 (exp -> prefixexp .)
    or              reduce using rule 54 (exp -> prefixexp .)
    MODULO          reduce using rule 54 (exp -> prefixexp .)
    DBLDOTS         reduce using rule 54 (exp -> prefixexp .)
    do              reduce using rule 54 (exp -> prefixexp .)
    COMMA           reduce using rule 54 (exp -> prefixexp .)
    SEMI            reduce using rule 54 (exp -> prefixexp .)
    RCURLY          reduce using rule 54 (exp -> prefixexp .)
    RPAREN          reduce using rule 54 (exp -> prefixexp .)
    then            reduce using rule 54 (exp -> prefixexp .)
    $end            reduce using rule 54 (exp -> prefixexp .)
    end             reduce using rule 54 (exp -> prefixexp .)
    until           reduce using rule 54 (exp -> prefixexp .)
    else            reduce using rule 54 (exp -> prefixexp .)
    elseif          reduce using rule 54 (exp -> prefixexp .)
    RSQUARE         reduce using rule 54 (exp -> prefixexp .)
    return          reduce using rule 54 (exp -> prefixexp .)
    break           reduce using rule 54 (exp -> prefixexp .)
    while           reduce using rule 54 (exp -> prefixexp .)
    repeat          reduce using rule 54 (exp -> prefixexp .)
    if              reduce using rule 54 (exp -> prefixexp .)
    for             reduce using rule 54 (exp -> prefixexp .)
    local           reduce using rule 54 (exp -> prefixexp .)
    function        reduce using rule 54 (exp -> prefixexp .)
    ID              reduce using rule 54 (exp -> prefixexp .)
    RESID           reduce using rule 54 (exp -> prefixexp .)
    LPAREN          reduce using rule 54 (exp -> prefixexp .)
    LSQUARE         shift and go to state 42
    SDOT            shift and go to state 43


state 29

    (76) prefixexp -> var .

    LSQUARE         reduce using rule 76 (prefixexp -> var .)
    SDOT            reduce using rule 76 (prefixexp -> var .)
    RPAREN          reduce using rule 76 (prefixexp -> var .)
    PLUS            reduce using rule 76 (prefixexp -> var .)
    MINUS           reduce using rule 76 (prefixexp -> var .)
    TIMES           reduce using rule 76 (prefixexp -> var .)
    DIVIDE          reduce using rule 76 (prefixexp -> var .)
    POWER           reduce using rule 76 (prefixexp -> var .)
    LT              reduce using rule 76 (prefixexp -> var .)
    LE              reduce using rule 76 (prefixexp -> var .)
    GT              reduce using rule 76 (prefixexp -> var .)
    GE              reduce using rule 76 (prefixexp -> var .)
    NE              reduce using rule 76 (prefixexp -> var .)
    CHECKEQ         reduce using rule 76 (prefixexp -> var .)
    and             reduce using rule 76 (prefixexp -> var .)
    or              reduce using rule 76 (prefixexp -> var .)
    MODULO          reduce using rule 76 (prefixexp -> var .)
    DBLDOTS         reduce using rule 76 (prefixexp -> var .)
    COMMA           reduce using rule 76 (prefixexp -> var .)
    SEMI            reduce using rule 76 (prefixexp -> var .)
    RCURLY          reduce using rule 76 (prefixexp -> var .)
    then            reduce using rule 76 (prefixexp -> var .)
    $end            reduce using rule 76 (prefixexp -> var .)
    end             reduce using rule 76 (prefixexp -> var .)
    until           reduce using rule 76 (prefixexp -> var .)
    else            reduce using rule 76 (prefixexp -> var .)
    elseif          reduce using rule 76 (prefixexp -> var .)
    do              reduce using rule 76 (prefixexp -> var .)
    RSQUARE         reduce using rule 76 (prefixexp -> var .)
    return          reduce using rule 76 (prefixexp -> var .)
    break           reduce using rule 76 (prefixexp -> var .)
    while           reduce using rule 76 (prefixexp -> var .)
    repeat          reduce using rule 76 (prefixexp -> var .)
    if              reduce using rule 76 (prefixexp -> var .)
    for             reduce using rule 76 (prefixexp -> var .)
    local           reduce using rule 76 (prefixexp -> var .)
    function        reduce using rule 76 (prefixexp -> var .)
    ID              reduce using rule 76 (prefixexp -> var .)
    RESID           reduce using rule 76 (prefixexp -> var .)
    LPAREN          reduce using rule 76 (prefixexp -> var .)


state 30

    (72) Number -> INTEGER .

    PLUS            reduce using rule 72 (Number -> INTEGER .)
    MINUS           reduce using rule 72 (Number -> INTEGER .)
    TIMES           reduce using rule 72 (Number -> INTEGER .)
    DIVIDE          reduce using rule 72 (Number -> INTEGER .)
    POWER           reduce using rule 72 (Number -> INTEGER .)
    LT              reduce using rule 72 (Number -> INTEGER .)
    LE              reduce using rule 72 (Number -> INTEGER .)
    GT              reduce using rule 72 (Number -> INTEGER .)
    GE              reduce using rule 72 (Number -> INTEGER .)
    NE              reduce using rule 72 (Number -> INTEGER .)
    CHECKEQ         reduce using rule 72 (Number -> INTEGER .)
    and             reduce using rule 72 (Number -> INTEGER .)
    or              reduce using rule 72 (Number -> INTEGER .)
    MODULO          reduce using rule 72 (Number -> INTEGER .)
    DBLDOTS         reduce using rule 72 (Number -> INTEGER .)
    do              reduce using rule 72 (Number -> INTEGER .)
    COMMA           reduce using rule 72 (Number -> INTEGER .)
    SEMI            reduce using rule 72 (Number -> INTEGER .)
    $end            reduce using rule 72 (Number -> INTEGER .)
    end             reduce using rule 72 (Number -> INTEGER .)
    until           reduce using rule 72 (Number -> INTEGER .)
    else            reduce using rule 72 (Number -> INTEGER .)
    elseif          reduce using rule 72 (Number -> INTEGER .)
    return          reduce using rule 72 (Number -> INTEGER .)
    break           reduce using rule 72 (Number -> INTEGER .)
    while           reduce using rule 72 (Number -> INTEGER .)
    repeat          reduce using rule 72 (Number -> INTEGER .)
    if              reduce using rule 72 (Number -> INTEGER .)
    for             reduce using rule 72 (Number -> INTEGER .)
    local           reduce using rule 72 (Number -> INTEGER .)
    function        reduce using rule 72 (Number -> INTEGER .)
    ID              reduce using rule 72 (Number -> INTEGER .)
    RESID           reduce using rule 72 (Number -> INTEGER .)
    LPAREN          reduce using rule 72 (Number -> INTEGER .)
    RPAREN          reduce using rule 72 (Number -> INTEGER .)
    then            reduce using rule 72 (Number -> INTEGER .)
    RCURLY          reduce using rule 72 (Number -> INTEGER .)
    RSQUARE         reduce using rule 72 (Number -> INTEGER .)


state 31

    (53) exp -> function .

    PLUS            reduce using rule 53 (exp -> function .)
    MINUS           reduce using rule 53 (exp -> function .)
    TIMES           reduce using rule 53 (exp -> function .)
    DIVIDE          reduce using rule 53 (exp -> function .)
    POWER           reduce using rule 53 (exp -> function .)
    LT              reduce using rule 53 (exp -> function .)
    LE              reduce using rule 53 (exp -> function .)
    GT              reduce using rule 53 (exp -> function .)
    GE              reduce using rule 53 (exp -> function .)
    NE              reduce using rule 53 (exp -> function .)
    CHECKEQ         reduce using rule 53 (exp -> function .)
    and             reduce using rule 53 (exp -> function .)
    or              reduce using rule 53 (exp -> function .)
    MODULO          reduce using rule 53 (exp -> function .)
    DBLDOTS         reduce using rule 53 (exp -> function .)
    do              reduce using rule 53 (exp -> function .)
    COMMA           reduce using rule 53 (exp -> function .)
    SEMI            reduce using rule 53 (exp -> function .)
    RCURLY          reduce using rule 53 (exp -> function .)
    RPAREN          reduce using rule 53 (exp -> function .)
    then            reduce using rule 53 (exp -> function .)
    $end            reduce using rule 53 (exp -> function .)
    end             reduce using rule 53 (exp -> function .)
    until           reduce using rule 53 (exp -> function .)
    else            reduce using rule 53 (exp -> function .)
    elseif          reduce using rule 53 (exp -> function .)
    RSQUARE         reduce using rule 53 (exp -> function .)
    return          reduce using rule 53 (exp -> function .)
    break           reduce using rule 53 (exp -> function .)
    while           reduce using rule 53 (exp -> function .)
    repeat          reduce using rule 53 (exp -> function .)
    if              reduce using rule 53 (exp -> function .)
    for             reduce using rule 53 (exp -> function .)
    local           reduce using rule 53 (exp -> function .)
    function        reduce using rule 53 (exp -> function .)
    ID              reduce using rule 53 (exp -> function .)
    RESID           reduce using rule 53 (exp -> function .)
    LPAREN          reduce using rule 53 (exp -> function .)


state 32

    (47) exp -> nil .

    PLUS            reduce using rule 47 (exp -> nil .)
    MINUS           reduce using rule 47 (exp -> nil .)
    TIMES           reduce using rule 47 (exp -> nil .)
    DIVIDE          reduce using rule 47 (exp -> nil .)
    POWER           reduce using rule 47 (exp -> nil .)
    LT              reduce using rule 47 (exp -> nil .)
    LE              reduce using rule 47 (exp -> nil .)
    GT              reduce using rule 47 (exp -> nil .)
    GE              reduce using rule 47 (exp -> nil .)
    NE              reduce using rule 47 (exp -> nil .)
    CHECKEQ         reduce using rule 47 (exp -> nil .)
    and             reduce using rule 47 (exp -> nil .)
    or              reduce using rule 47 (exp -> nil .)
    MODULO          reduce using rule 47 (exp -> nil .)
    DBLDOTS         reduce using rule 47 (exp -> nil .)
    do              reduce using rule 47 (exp -> nil .)
    COMMA           reduce using rule 47 (exp -> nil .)
    SEMI            reduce using rule 47 (exp -> nil .)
    RCURLY          reduce using rule 47 (exp -> nil .)
    RPAREN          reduce using rule 47 (exp -> nil .)
    then            reduce using rule 47 (exp -> nil .)
    $end            reduce using rule 47 (exp -> nil .)
    end             reduce using rule 47 (exp -> nil .)
    until           reduce using rule 47 (exp -> nil .)
    else            reduce using rule 47 (exp -> nil .)
    elseif          reduce using rule 47 (exp -> nil .)
    RSQUARE         reduce using rule 47 (exp -> nil .)
    return          reduce using rule 47 (exp -> nil .)
    break           reduce using rule 47 (exp -> nil .)
    while           reduce using rule 47 (exp -> nil .)
    repeat          reduce using rule 47 (exp -> nil .)
    if              reduce using rule 47 (exp -> nil .)
    for             reduce using rule 47 (exp -> nil .)
    local           reduce using rule 47 (exp -> nil .)
    function        reduce using rule 47 (exp -> nil .)
    ID              reduce using rule 47 (exp -> nil .)
    RESID           reduce using rule 47 (exp -> nil .)
    LPAREN          reduce using rule 47 (exp -> nil .)


state 33

    (74) Number -> HEX .

    PLUS            reduce using rule 74 (Number -> HEX .)
    MINUS           reduce using rule 74 (Number -> HEX .)
    TIMES           reduce using rule 74 (Number -> HEX .)
    DIVIDE          reduce using rule 74 (Number -> HEX .)
    POWER           reduce using rule 74 (Number -> HEX .)
    LT              reduce using rule 74 (Number -> HEX .)
    LE              reduce using rule 74 (Number -> HEX .)
    GT              reduce using rule 74 (Number -> HEX .)
    GE              reduce using rule 74 (Number -> HEX .)
    NE              reduce using rule 74 (Number -> HEX .)
    CHECKEQ         reduce using rule 74 (Number -> HEX .)
    and             reduce using rule 74 (Number -> HEX .)
    or              reduce using rule 74 (Number -> HEX .)
    MODULO          reduce using rule 74 (Number -> HEX .)
    DBLDOTS         reduce using rule 74 (Number -> HEX .)
    do              reduce using rule 74 (Number -> HEX .)
    COMMA           reduce using rule 74 (Number -> HEX .)
    SEMI            reduce using rule 74 (Number -> HEX .)
    $end            reduce using rule 74 (Number -> HEX .)
    end             reduce using rule 74 (Number -> HEX .)
    until           reduce using rule 74 (Number -> HEX .)
    else            reduce using rule 74 (Number -> HEX .)
    elseif          reduce using rule 74 (Number -> HEX .)
    return          reduce using rule 74 (Number -> HEX .)
    break           reduce using rule 74 (Number -> HEX .)
    while           reduce using rule 74 (Number -> HEX .)
    repeat          reduce using rule 74 (Number -> HEX .)
    if              reduce using rule 74 (Number -> HEX .)
    for             reduce using rule 74 (Number -> HEX .)
    local           reduce using rule 74 (Number -> HEX .)
    function        reduce using rule 74 (Number -> HEX .)
    ID              reduce using rule 74 (Number -> HEX .)
    RESID           reduce using rule 74 (Number -> HEX .)
    LPAREN          reduce using rule 74 (Number -> HEX .)
    RPAREN          reduce using rule 74 (Number -> HEX .)
    then            reduce using rule 74 (Number -> HEX .)
    RCURLY          reduce using rule 74 (Number -> HEX .)
    RSQUARE         reduce using rule 74 (Number -> HEX .)


state 34

    (79) unop -> not .

    nil             reduce using rule 79 (unop -> not .)
    false           reduce using rule 79 (unop -> not .)
    true            reduce using rule 79 (unop -> not .)
    STRING          reduce using rule 79 (unop -> not .)
    TRPLDOTS        reduce using rule 79 (unop -> not .)
    function        reduce using rule 79 (unop -> not .)
    INTEGER         reduce using rule 79 (unop -> not .)
    FLOAT           reduce using rule 79 (unop -> not .)
    HEX             reduce using rule 79 (unop -> not .)
    LPAREN          reduce using rule 79 (unop -> not .)
    LCURLY          reduce using rule 79 (unop -> not .)
    MINUS           reduce using rule 79 (unop -> not .)
    not             reduce using rule 79 (unop -> not .)
    HASH            reduce using rule 79 (unop -> not .)
    ID              reduce using rule 79 (unop -> not .)
    RESID           reduce using rule 79 (unop -> not .)


state 35

    (49) exp -> true .

    PLUS            reduce using rule 49 (exp -> true .)
    MINUS           reduce using rule 49 (exp -> true .)
    TIMES           reduce using rule 49 (exp -> true .)
    DIVIDE          reduce using rule 49 (exp -> true .)
    POWER           reduce using rule 49 (exp -> true .)
    LT              reduce using rule 49 (exp -> true .)
    LE              reduce using rule 49 (exp -> true .)
    GT              reduce using rule 49 (exp -> true .)
    GE              reduce using rule 49 (exp -> true .)
    NE              reduce using rule 49 (exp -> true .)
    CHECKEQ         reduce using rule 49 (exp -> true .)
    and             reduce using rule 49 (exp -> true .)
    or              reduce using rule 49 (exp -> true .)
    MODULO          reduce using rule 49 (exp -> true .)
    DBLDOTS         reduce using rule 49 (exp -> true .)
    do              reduce using rule 49 (exp -> true .)
    COMMA           reduce using rule 49 (exp -> true .)
    SEMI            reduce using rule 49 (exp -> true .)
    RCURLY          reduce using rule 49 (exp -> true .)
    RPAREN          reduce using rule 49 (exp -> true .)
    then            reduce using rule 49 (exp -> true .)
    $end            reduce using rule 49 (exp -> true .)
    end             reduce using rule 49 (exp -> true .)
    until           reduce using rule 49 (exp -> true .)
    else            reduce using rule 49 (exp -> true .)
    elseif          reduce using rule 49 (exp -> true .)
    RSQUARE         reduce using rule 49 (exp -> true .)
    return          reduce using rule 49 (exp -> true .)
    break           reduce using rule 49 (exp -> true .)
    while           reduce using rule 49 (exp -> true .)
    repeat          reduce using rule 49 (exp -> true .)
    if              reduce using rule 49 (exp -> true .)
    for             reduce using rule 49 (exp -> true .)
    local           reduce using rule 49 (exp -> true .)
    function        reduce using rule 49 (exp -> true .)
    ID              reduce using rule 49 (exp -> true .)
    RESID           reduce using rule 49 (exp -> true .)
    LPAREN          reduce using rule 49 (exp -> true .)


state 36

    (73) Number -> FLOAT .

    PLUS            reduce using rule 73 (Number -> FLOAT .)
    MINUS           reduce using rule 73 (Number -> FLOAT .)
    TIMES           reduce using rule 73 (Number -> FLOAT .)
    DIVIDE          reduce using rule 73 (Number -> FLOAT .)
    POWER           reduce using rule 73 (Number -> FLOAT .)
    LT              reduce using rule 73 (Number -> FLOAT .)
    LE              reduce using rule 73 (Number -> FLOAT .)
    GT              reduce using rule 73 (Number -> FLOAT .)
    GE              reduce using rule 73 (Number -> FLOAT .)
    NE              reduce using rule 73 (Number -> FLOAT .)
    CHECKEQ         reduce using rule 73 (Number -> FLOAT .)
    and             reduce using rule 73 (Number -> FLOAT .)
    or              reduce using rule 73 (Number -> FLOAT .)
    MODULO          reduce using rule 73 (Number -> FLOAT .)
    DBLDOTS         reduce using rule 73 (Number -> FLOAT .)
    do              reduce using rule 73 (Number -> FLOAT .)
    COMMA           reduce using rule 73 (Number -> FLOAT .)
    SEMI            reduce using rule 73 (Number -> FLOAT .)
    $end            reduce using rule 73 (Number -> FLOAT .)
    end             reduce using rule 73 (Number -> FLOAT .)
    until           reduce using rule 73 (Number -> FLOAT .)
    else            reduce using rule 73 (Number -> FLOAT .)
    elseif          reduce using rule 73 (Number -> FLOAT .)
    return          reduce using rule 73 (Number -> FLOAT .)
    break           reduce using rule 73 (Number -> FLOAT .)
    while           reduce using rule 73 (Number -> FLOAT .)
    repeat          reduce using rule 73 (Number -> FLOAT .)
    if              reduce using rule 73 (Number -> FLOAT .)
    for             reduce using rule 73 (Number -> FLOAT .)
    local           reduce using rule 73 (Number -> FLOAT .)
    function        reduce using rule 73 (Number -> FLOAT .)
    ID              reduce using rule 73 (Number -> FLOAT .)
    RESID           reduce using rule 73 (Number -> FLOAT .)
    LPAREN          reduce using rule 73 (Number -> FLOAT .)
    RPAREN          reduce using rule 73 (Number -> FLOAT .)
    then            reduce using rule 73 (Number -> FLOAT .)
    RCURLY          reduce using rule 73 (Number -> FLOAT .)
    RSQUARE         reduce using rule 73 (Number -> FLOAT .)


state 37

    (50) exp -> Number .

    PLUS            reduce using rule 50 (exp -> Number .)
    MINUS           reduce using rule 50 (exp -> Number .)
    TIMES           reduce using rule 50 (exp -> Number .)
    DIVIDE          reduce using rule 50 (exp -> Number .)
    POWER           reduce using rule 50 (exp -> Number .)
    LT              reduce using rule 50 (exp -> Number .)
    LE              reduce using rule 50 (exp -> Number .)
    GT              reduce using rule 50 (exp -> Number .)
    GE              reduce using rule 50 (exp -> Number .)
    NE              reduce using rule 50 (exp -> Number .)
    CHECKEQ         reduce using rule 50 (exp -> Number .)
    and             reduce using rule 50 (exp -> Number .)
    or              reduce using rule 50 (exp -> Number .)
    MODULO          reduce using rule 50 (exp -> Number .)
    DBLDOTS         reduce using rule 50 (exp -> Number .)
    do              reduce using rule 50 (exp -> Number .)
    COMMA           reduce using rule 50 (exp -> Number .)
    SEMI            reduce using rule 50 (exp -> Number .)
    RCURLY          reduce using rule 50 (exp -> Number .)
    RPAREN          reduce using rule 50 (exp -> Number .)
    then            reduce using rule 50 (exp -> Number .)
    $end            reduce using rule 50 (exp -> Number .)
    end             reduce using rule 50 (exp -> Number .)
    until           reduce using rule 50 (exp -> Number .)
    else            reduce using rule 50 (exp -> Number .)
    elseif          reduce using rule 50 (exp -> Number .)
    RSQUARE         reduce using rule 50 (exp -> Number .)
    return          reduce using rule 50 (exp -> Number .)
    break           reduce using rule 50 (exp -> Number .)
    while           reduce using rule 50 (exp -> Number .)
    repeat          reduce using rule 50 (exp -> Number .)
    if              reduce using rule 50 (exp -> Number .)
    for             reduce using rule 50 (exp -> Number .)
    local           reduce using rule 50 (exp -> Number .)
    function        reduce using rule 50 (exp -> Number .)
    ID              reduce using rule 50 (exp -> Number .)
    RESID           reduce using rule 50 (exp -> Number .)
    LPAREN          reduce using rule 50 (exp -> Number .)


state 38

    (77) prefixexp -> LPAREN exp . RPAREN
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    RPAREN          shift and go to state 71
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    LT              shift and go to state 77
    LE              shift and go to state 70
    GT              shift and go to state 78
    GE              shift and go to state 74
    NE              shift and go to state 83
    CHECKEQ         shift and go to state 76
    and             shift and go to state 69
    or              shift and go to state 73
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81


state 39

    (71) exp -> unop . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    unop                           shift and go to state 39
    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    exp                            shift and go to state 85
    var                            shift and go to state 29
    names                          shift and go to state 6

state 40

    (52) exp -> TRPLDOTS .

    PLUS            reduce using rule 52 (exp -> TRPLDOTS .)
    MINUS           reduce using rule 52 (exp -> TRPLDOTS .)
    TIMES           reduce using rule 52 (exp -> TRPLDOTS .)
    DIVIDE          reduce using rule 52 (exp -> TRPLDOTS .)
    POWER           reduce using rule 52 (exp -> TRPLDOTS .)
    LT              reduce using rule 52 (exp -> TRPLDOTS .)
    LE              reduce using rule 52 (exp -> TRPLDOTS .)
    GT              reduce using rule 52 (exp -> TRPLDOTS .)
    GE              reduce using rule 52 (exp -> TRPLDOTS .)
    NE              reduce using rule 52 (exp -> TRPLDOTS .)
    CHECKEQ         reduce using rule 52 (exp -> TRPLDOTS .)
    and             reduce using rule 52 (exp -> TRPLDOTS .)
    or              reduce using rule 52 (exp -> TRPLDOTS .)
    MODULO          reduce using rule 52 (exp -> TRPLDOTS .)
    DBLDOTS         reduce using rule 52 (exp -> TRPLDOTS .)
    do              reduce using rule 52 (exp -> TRPLDOTS .)
    COMMA           reduce using rule 52 (exp -> TRPLDOTS .)
    SEMI            reduce using rule 52 (exp -> TRPLDOTS .)
    RCURLY          reduce using rule 52 (exp -> TRPLDOTS .)
    RPAREN          reduce using rule 52 (exp -> TRPLDOTS .)
    then            reduce using rule 52 (exp -> TRPLDOTS .)
    $end            reduce using rule 52 (exp -> TRPLDOTS .)
    end             reduce using rule 52 (exp -> TRPLDOTS .)
    until           reduce using rule 52 (exp -> TRPLDOTS .)
    else            reduce using rule 52 (exp -> TRPLDOTS .)
    elseif          reduce using rule 52 (exp -> TRPLDOTS .)
    RSQUARE         reduce using rule 52 (exp -> TRPLDOTS .)
    return          reduce using rule 52 (exp -> TRPLDOTS .)
    break           reduce using rule 52 (exp -> TRPLDOTS .)
    while           reduce using rule 52 (exp -> TRPLDOTS .)
    repeat          reduce using rule 52 (exp -> TRPLDOTS .)
    if              reduce using rule 52 (exp -> TRPLDOTS .)
    for             reduce using rule 52 (exp -> TRPLDOTS .)
    local           reduce using rule 52 (exp -> TRPLDOTS .)
    function        reduce using rule 52 (exp -> TRPLDOTS .)
    ID              reduce using rule 52 (exp -> TRPLDOTS .)
    RESID           reduce using rule 52 (exp -> TRPLDOTS .)
    LPAREN          reduce using rule 52 (exp -> TRPLDOTS .)


state 41

    (12) stat -> if exp . then block ifblock else block end
    (13) stat -> if exp . then block ifblock end
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    then            shift and go to state 86
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    LT              shift and go to state 77
    LE              shift and go to state 70
    GT              shift and go to state 78
    GE              shift and go to state 74
    NE              shift and go to state 83
    CHECKEQ         shift and go to state 76
    and             shift and go to state 69
    or              shift and go to state 73
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81


state 42

    (42) var -> prefixexp LSQUARE . exp RSQUARE
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 87
    var                            shift and go to state 29
    names                          shift and go to state 6

state 43

    (43) var -> prefixexp SDOT . names
    (92) names -> . ID
    (93) names -> . RESID

    ID              shift and go to state 20
    RESID           shift and go to state 4

    names                          shift and go to state 88

state 44

    (16) stat -> for namelist . in explist do block end

    in              shift and go to state 89


state 45

    (14) stat -> for names . EQUALS exp COMMA exp do block end
    (15) stat -> for names . EQUALS exp COMMA exp COMMA exp do block end
    (44) namelist -> names . comid
    (36) comid -> . COMMA names comid
    (37) comid -> . empty
    (75) empty -> .

    EQUALS          shift and go to state 90
    COMMA           shift and go to state 92
    in              reduce using rule 75 (empty -> .)

    empty                          shift and go to state 91
    comid                          shift and go to state 93

state 46

    (8) stat -> varlist EQUALS . explist
    (45) explist -> . explist COMMA exp
    (46) explist -> . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 61
    var                            shift and go to state 29
    explist                        shift and go to state 94
    names                          shift and go to state 6

state 47

    (3) sdash -> chunk laststat SEMI .

    else            reduce using rule 3 (sdash -> chunk laststat SEMI .)
    end             reduce using rule 3 (sdash -> chunk laststat SEMI .)
    elseif          reduce using rule 3 (sdash -> chunk laststat SEMI .)
    until           reduce using rule 3 (sdash -> chunk laststat SEMI .)
    $end            reduce using rule 3 (sdash -> chunk laststat SEMI .)


state 48

    (34) comvar -> COMMA . var comvar
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN

    ID              shift and go to state 20
    RESID           shift and go to state 4
    LPAREN          shift and go to state 5

    var                            shift and go to state 95
    prefixexp                      shift and go to state 8
    names                          shift and go to state 6

state 49

    (40) varlist -> var comvar .

    EQUALS          reduce using rule 40 (varlist -> var comvar .)


state 50

    (35) comvar -> empty .

    EQUALS          reduce using rule 35 (comvar -> empty .)


state 51

    (20) stat -> local function . names funcbody
    (92) names -> . ID
    (93) names -> . RESID

    ID              shift and go to state 20
    RESID           shift and go to state 4

    names                          shift and go to state 96

state 52

    (17) stat -> local namelist .
    (18) stat -> local namelist . EQUALS explist

    SEMI            reduce using rule 17 (stat -> local namelist .)
    return          reduce using rule 17 (stat -> local namelist .)
    break           reduce using rule 17 (stat -> local namelist .)
    do              reduce using rule 17 (stat -> local namelist .)
    while           reduce using rule 17 (stat -> local namelist .)
    repeat          reduce using rule 17 (stat -> local namelist .)
    if              reduce using rule 17 (stat -> local namelist .)
    for             reduce using rule 17 (stat -> local namelist .)
    local           reduce using rule 17 (stat -> local namelist .)
    function        reduce using rule 17 (stat -> local namelist .)
    ID              reduce using rule 17 (stat -> local namelist .)
    RESID           reduce using rule 17 (stat -> local namelist .)
    LPAREN          reduce using rule 17 (stat -> local namelist .)
    $end            reduce using rule 17 (stat -> local namelist .)
    end             reduce using rule 17 (stat -> local namelist .)
    until           reduce using rule 17 (stat -> local namelist .)
    else            reduce using rule 17 (stat -> local namelist .)
    elseif          reduce using rule 17 (stat -> local namelist .)
    EQUALS          shift and go to state 97


state 53

    (44) namelist -> names . comid
    (36) comid -> . COMMA names comid
    (37) comid -> . empty
    (75) empty -> .

    COMMA           shift and go to state 92
    EQUALS          reduce using rule 75 (empty -> .)
    SEMI            reduce using rule 75 (empty -> .)
    return          reduce using rule 75 (empty -> .)
    break           reduce using rule 75 (empty -> .)
    do              reduce using rule 75 (empty -> .)
    while           reduce using rule 75 (empty -> .)
    repeat          reduce using rule 75 (empty -> .)
    if              reduce using rule 75 (empty -> .)
    for             reduce using rule 75 (empty -> .)
    local           reduce using rule 75 (empty -> .)
    function        reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    RESID           reduce using rule 75 (empty -> .)
    LPAREN          reduce using rule 75 (empty -> .)
    $end            reduce using rule 75 (empty -> .)
    end             reduce using rule 75 (empty -> .)
    until           reduce using rule 75 (empty -> .)
    else            reduce using rule 75 (empty -> .)
    elseif          reduce using rule 75 (empty -> .)
    RPAREN          reduce using rule 75 (empty -> .)

  ! COMMA           [ reduce using rule 75 (empty -> .) ]

    empty                          shift and go to state 91
    comid                          shift and go to state 93

state 54

    (19) stat -> function funcname . funcbody
    (21) funcbody -> . LPAREN RPAREN block end
    (22) funcbody -> . LPAREN parlist RPAREN block end

    LPAREN          shift and go to state 99

    funcbody                       shift and go to state 98

state 55

    (30) funcname -> names . dotid COLON
    (31) funcname -> names . dotid
    (32) dotid -> . SDOT names dotid
    (33) dotid -> . empty
    (75) empty -> .

    SDOT            shift and go to state 100
    COLON           reduce using rule 75 (empty -> .)
    LPAREN          reduce using rule 75 (empty -> .)

    dotid                          shift and go to state 101
    empty                          shift and go to state 102

state 56

    (9) stat -> do block . end

    end             shift and go to state 103


state 57

    (7) block -> sdash .

    end             reduce using rule 7 (block -> sdash .)
    else            reduce using rule 7 (block -> sdash .)
    elseif          reduce using rule 7 (block -> sdash .)
    until           reduce using rule 7 (block -> sdash .)


state 58

    (5) chunk -> chunk stat SEMI .

    return          reduce using rule 5 (chunk -> chunk stat SEMI .)
    break           reduce using rule 5 (chunk -> chunk stat SEMI .)
    do              reduce using rule 5 (chunk -> chunk stat SEMI .)
    while           reduce using rule 5 (chunk -> chunk stat SEMI .)
    repeat          reduce using rule 5 (chunk -> chunk stat SEMI .)
    if              reduce using rule 5 (chunk -> chunk stat SEMI .)
    for             reduce using rule 5 (chunk -> chunk stat SEMI .)
    local           reduce using rule 5 (chunk -> chunk stat SEMI .)
    function        reduce using rule 5 (chunk -> chunk stat SEMI .)
    ID              reduce using rule 5 (chunk -> chunk stat SEMI .)
    RESID           reduce using rule 5 (chunk -> chunk stat SEMI .)
    LPAREN          reduce using rule 5 (chunk -> chunk stat SEMI .)
    else            reduce using rule 5 (chunk -> chunk stat SEMI .)
    end             reduce using rule 5 (chunk -> chunk stat SEMI .)
    elseif          reduce using rule 5 (chunk -> chunk stat SEMI .)
    until           reduce using rule 5 (chunk -> chunk stat SEMI .)
    $end            reduce using rule 5 (chunk -> chunk stat SEMI .)


state 59

    (11) stat -> repeat block . until exp

    until           shift and go to state 104


state 60

    (27) laststat -> return explist .
    (45) explist -> explist . COMMA exp

    SEMI            reduce using rule 27 (laststat -> return explist .)
    $end            reduce using rule 27 (laststat -> return explist .)
    end             reduce using rule 27 (laststat -> return explist .)
    until           reduce using rule 27 (laststat -> return explist .)
    else            reduce using rule 27 (laststat -> return explist .)
    elseif          reduce using rule 27 (laststat -> return explist .)
    COMMA           shift and go to state 105


state 61

    (46) explist -> exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    COMMA           reduce using rule 46 (explist -> exp .)
    SEMI            reduce using rule 46 (explist -> exp .)
    $end            reduce using rule 46 (explist -> exp .)
    end             reduce using rule 46 (explist -> exp .)
    until           reduce using rule 46 (explist -> exp .)
    else            reduce using rule 46 (explist -> exp .)
    elseif          reduce using rule 46 (explist -> exp .)
    return          reduce using rule 46 (explist -> exp .)
    break           reduce using rule 46 (explist -> exp .)
    do              reduce using rule 46 (explist -> exp .)
    while           reduce using rule 46 (explist -> exp .)
    repeat          reduce using rule 46 (explist -> exp .)
    if              reduce using rule 46 (explist -> exp .)
    for             reduce using rule 46 (explist -> exp .)
    local           reduce using rule 46 (explist -> exp .)
    function        reduce using rule 46 (explist -> exp .)
    ID              reduce using rule 46 (explist -> exp .)
    RESID           reduce using rule 46 (explist -> exp .)
    LPAREN          reduce using rule 46 (explist -> exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    LT              shift and go to state 77
    LE              shift and go to state 70
    GT              shift and go to state 78
    GE              shift and go to state 74
    NE              shift and go to state 83
    CHECKEQ         shift and go to state 76
    and             shift and go to state 69
    or              shift and go to state 73
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81


state 62

    (10) stat -> while exp . do block end
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    do              shift and go to state 106
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    LT              shift and go to state 77
    LE              shift and go to state 70
    GT              shift and go to state 78
    GE              shift and go to state 74
    NE              shift and go to state 83
    CHECKEQ         shift and go to state 76
    and             shift and go to state 69
    or              shift and go to state 73
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81


state 63

    (88) field -> names . EQUALS exp
    (41) var -> names .

    EQUALS          shift and go to state 107
    LSQUARE         reduce using rule 41 (var -> names .)
    SDOT            reduce using rule 41 (var -> names .)
    PLUS            reduce using rule 41 (var -> names .)
    MINUS           reduce using rule 41 (var -> names .)
    TIMES           reduce using rule 41 (var -> names .)
    DIVIDE          reduce using rule 41 (var -> names .)
    POWER           reduce using rule 41 (var -> names .)
    LT              reduce using rule 41 (var -> names .)
    LE              reduce using rule 41 (var -> names .)
    GT              reduce using rule 41 (var -> names .)
    GE              reduce using rule 41 (var -> names .)
    NE              reduce using rule 41 (var -> names .)
    CHECKEQ         reduce using rule 41 (var -> names .)
    and             reduce using rule 41 (var -> names .)
    or              reduce using rule 41 (var -> names .)
    MODULO          reduce using rule 41 (var -> names .)
    DBLDOTS         reduce using rule 41 (var -> names .)
    COMMA           reduce using rule 41 (var -> names .)
    SEMI            reduce using rule 41 (var -> names .)
    RCURLY          reduce using rule 41 (var -> names .)


state 64

    (82) tableconstructor -> LCURLY RCURLY .

    PLUS            reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    MINUS           reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    TIMES           reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    DIVIDE          reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    POWER           reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    LT              reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    LE              reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    GT              reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    GE              reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    NE              reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    CHECKEQ         reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    and             reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    or              reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    MODULO          reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    DBLDOTS         reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    RPAREN          reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    then            reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    COMMA           reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    SEMI            reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    $end            reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    end             reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    until           reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    else            reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    elseif          reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    do              reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    RCURLY          reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    RSQUARE         reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    return          reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    break           reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    while           reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    repeat          reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    if              reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    for             reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    local           reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    function        reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    ID              reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    RESID           reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)
    LPAREN          reduce using rule 82 (tableconstructor -> LCURLY RCURLY .)


state 65

    (83) fieldlist -> field . fieldseplist fieldsep
    (84) fieldlist -> field . fieldseplist
    (85) fieldseplist -> . fieldseplist fieldsep field
    (86) fieldseplist -> . empty
    (75) empty -> .

    COMMA           reduce using rule 75 (empty -> .)
    SEMI            reduce using rule 75 (empty -> .)
    RCURLY          reduce using rule 75 (empty -> .)

    fieldseplist                   shift and go to state 108
    empty                          shift and go to state 109

state 66

    (81) tableconstructor -> LCURLY fieldlist . RCURLY

    RCURLY          shift and go to state 110


state 67

    (89) field -> exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    COMMA           reduce using rule 89 (field -> exp .)
    SEMI            reduce using rule 89 (field -> exp .)
    RCURLY          reduce using rule 89 (field -> exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    LT              shift and go to state 77
    LE              shift and go to state 70
    GT              shift and go to state 78
    GE              shift and go to state 74
    NE              shift and go to state 83
    CHECKEQ         shift and go to state 76
    and             shift and go to state 69
    or              shift and go to state 73
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81


state 68

    (87) field -> LSQUARE . exp RSQUARE EQUALS exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 111
    var                            shift and go to state 29
    names                          shift and go to state 6

state 69

    (66) exp -> exp and . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 112
    var                            shift and go to state 29
    names                          shift and go to state 6

state 70

    (61) exp -> exp LE . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 113
    var                            shift and go to state 29
    names                          shift and go to state 6

state 71

    (77) prefixexp -> LPAREN exp RPAREN .

    LSQUARE         reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    SDOT            reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    POWER           reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    LE              reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    GE              reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    CHECKEQ         reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    and             reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    or              reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    MODULO          reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    DBLDOTS         reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    SEMI            reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    RCURLY          reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    then            reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    $end            reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    end             reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    until           reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    else            reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    elseif          reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    do              reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    RSQUARE         reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    return          reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    break           reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    while           reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    repeat          reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    if              reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    for             reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    local           reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    function        reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    RESID           reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 77 (prefixexp -> LPAREN exp RPAREN .)


state 72

    (59) exp -> exp POWER . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 114
    var                            shift and go to state 29
    names                          shift and go to state 6

state 73

    (67) exp -> exp or . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 115
    var                            shift and go to state 29
    names                          shift and go to state 6

state 74

    (63) exp -> exp GE . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 116
    var                            shift and go to state 29
    names                          shift and go to state 6

state 75

    (57) exp -> exp TIMES . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 117
    var                            shift and go to state 29
    names                          shift and go to state 6

state 76

    (65) exp -> exp CHECKEQ . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 118
    var                            shift and go to state 29
    names                          shift and go to state 6

state 77

    (60) exp -> exp LT . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 119
    var                            shift and go to state 29
    names                          shift and go to state 6

state 78

    (62) exp -> exp GT . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 120
    var                            shift and go to state 29
    names                          shift and go to state 6

state 79

    (55) exp -> exp PLUS . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 121
    var                            shift and go to state 29
    names                          shift and go to state 6

state 80

    (68) exp -> exp MODULO . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 122
    var                            shift and go to state 29
    names                          shift and go to state 6

state 81

    (69) exp -> exp DBLDOTS . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 123
    var                            shift and go to state 29
    names                          shift and go to state 6

state 82

    (56) exp -> exp MINUS . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 124
    var                            shift and go to state 29
    names                          shift and go to state 6

state 83

    (64) exp -> exp NE . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 125
    var                            shift and go to state 29
    names                          shift and go to state 6

state 84

    (58) exp -> exp DIVIDE . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 126
    var                            shift and go to state 29
    names                          shift and go to state 6

state 85

    (71) exp -> unop exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    PLUS            reduce using rule 71 (exp -> unop exp .)
    MINUS           reduce using rule 71 (exp -> unop exp .)
    TIMES           reduce using rule 71 (exp -> unop exp .)
    DIVIDE          reduce using rule 71 (exp -> unop exp .)
    LT              reduce using rule 71 (exp -> unop exp .)
    LE              reduce using rule 71 (exp -> unop exp .)
    GT              reduce using rule 71 (exp -> unop exp .)
    GE              reduce using rule 71 (exp -> unop exp .)
    NE              reduce using rule 71 (exp -> unop exp .)
    CHECKEQ         reduce using rule 71 (exp -> unop exp .)
    and             reduce using rule 71 (exp -> unop exp .)
    or              reduce using rule 71 (exp -> unop exp .)
    MODULO          reduce using rule 71 (exp -> unop exp .)
    DBLDOTS         reduce using rule 71 (exp -> unop exp .)
    do              reduce using rule 71 (exp -> unop exp .)
    COMMA           reduce using rule 71 (exp -> unop exp .)
    SEMI            reduce using rule 71 (exp -> unop exp .)
    RCURLY          reduce using rule 71 (exp -> unop exp .)
    RPAREN          reduce using rule 71 (exp -> unop exp .)
    then            reduce using rule 71 (exp -> unop exp .)
    $end            reduce using rule 71 (exp -> unop exp .)
    end             reduce using rule 71 (exp -> unop exp .)
    until           reduce using rule 71 (exp -> unop exp .)
    else            reduce using rule 71 (exp -> unop exp .)
    elseif          reduce using rule 71 (exp -> unop exp .)
    RSQUARE         reduce using rule 71 (exp -> unop exp .)
    return          reduce using rule 71 (exp -> unop exp .)
    break           reduce using rule 71 (exp -> unop exp .)
    while           reduce using rule 71 (exp -> unop exp .)
    repeat          reduce using rule 71 (exp -> unop exp .)
    if              reduce using rule 71 (exp -> unop exp .)
    for             reduce using rule 71 (exp -> unop exp .)
    local           reduce using rule 71 (exp -> unop exp .)
    function        reduce using rule 71 (exp -> unop exp .)
    ID              reduce using rule 71 (exp -> unop exp .)
    RESID           reduce using rule 71 (exp -> unop exp .)
    LPAREN          reduce using rule 71 (exp -> unop exp .)
    POWER           shift and go to state 72

  ! POWER           [ reduce using rule 71 (exp -> unop exp .) ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 82 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! LT              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 74 ]
  ! NE              [ shift and go to state 83 ]
  ! CHECKEQ         [ shift and go to state 76 ]
  ! and             [ shift and go to state 69 ]
  ! or              [ shift and go to state 73 ]
  ! MODULO          [ shift and go to state 80 ]
  ! DBLDOTS         [ shift and go to state 81 ]


state 86

    (12) stat -> if exp then . block ifblock else block end
    (13) stat -> if exp then . block ifblock end
    (7) block -> . sdash
    (1) sdash -> . chunk
    (2) sdash -> . chunk laststat
    (3) sdash -> . chunk laststat SEMI
    (4) chunk -> . chunk stat
    (5) chunk -> . chunk stat SEMI
    (6) chunk -> . empty
    (75) empty -> .

    return          reduce using rule 75 (empty -> .)
    break           reduce using rule 75 (empty -> .)
    do              reduce using rule 75 (empty -> .)
    while           reduce using rule 75 (empty -> .)
    repeat          reduce using rule 75 (empty -> .)
    if              reduce using rule 75 (empty -> .)
    for             reduce using rule 75 (empty -> .)
    local           reduce using rule 75 (empty -> .)
    function        reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    RESID           reduce using rule 75 (empty -> .)
    LPAREN          reduce using rule 75 (empty -> .)
    else            reduce using rule 75 (empty -> .)
    end             reduce using rule 75 (empty -> .)
    elseif          reduce using rule 75 (empty -> .)

    chunk                          shift and go to state 1
    empty                          shift and go to state 3
    block                          shift and go to state 127
    sdash                          shift and go to state 57

state 87

    (42) var -> prefixexp LSQUARE exp . RSQUARE
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    RSQUARE         shift and go to state 128
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    LT              shift and go to state 77
    LE              shift and go to state 70
    GT              shift and go to state 78
    GE              shift and go to state 74
    NE              shift and go to state 83
    CHECKEQ         shift and go to state 76
    and             shift and go to state 69
    or              shift and go to state 73
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81


state 88

    (43) var -> prefixexp SDOT names .

    LSQUARE         reduce using rule 43 (var -> prefixexp SDOT names .)
    SDOT            reduce using rule 43 (var -> prefixexp SDOT names .)
    PLUS            reduce using rule 43 (var -> prefixexp SDOT names .)
    MINUS           reduce using rule 43 (var -> prefixexp SDOT names .)
    TIMES           reduce using rule 43 (var -> prefixexp SDOT names .)
    DIVIDE          reduce using rule 43 (var -> prefixexp SDOT names .)
    POWER           reduce using rule 43 (var -> prefixexp SDOT names .)
    LT              reduce using rule 43 (var -> prefixexp SDOT names .)
    LE              reduce using rule 43 (var -> prefixexp SDOT names .)
    GT              reduce using rule 43 (var -> prefixexp SDOT names .)
    GE              reduce using rule 43 (var -> prefixexp SDOT names .)
    NE              reduce using rule 43 (var -> prefixexp SDOT names .)
    CHECKEQ         reduce using rule 43 (var -> prefixexp SDOT names .)
    and             reduce using rule 43 (var -> prefixexp SDOT names .)
    or              reduce using rule 43 (var -> prefixexp SDOT names .)
    MODULO          reduce using rule 43 (var -> prefixexp SDOT names .)
    DBLDOTS         reduce using rule 43 (var -> prefixexp SDOT names .)
    RPAREN          reduce using rule 43 (var -> prefixexp SDOT names .)
    then            reduce using rule 43 (var -> prefixexp SDOT names .)
    COMMA           reduce using rule 43 (var -> prefixexp SDOT names .)
    SEMI            reduce using rule 43 (var -> prefixexp SDOT names .)
    $end            reduce using rule 43 (var -> prefixexp SDOT names .)
    end             reduce using rule 43 (var -> prefixexp SDOT names .)
    until           reduce using rule 43 (var -> prefixexp SDOT names .)
    else            reduce using rule 43 (var -> prefixexp SDOT names .)
    elseif          reduce using rule 43 (var -> prefixexp SDOT names .)
    do              reduce using rule 43 (var -> prefixexp SDOT names .)
    RCURLY          reduce using rule 43 (var -> prefixexp SDOT names .)
    RSQUARE         reduce using rule 43 (var -> prefixexp SDOT names .)
    return          reduce using rule 43 (var -> prefixexp SDOT names .)
    break           reduce using rule 43 (var -> prefixexp SDOT names .)
    while           reduce using rule 43 (var -> prefixexp SDOT names .)
    repeat          reduce using rule 43 (var -> prefixexp SDOT names .)
    if              reduce using rule 43 (var -> prefixexp SDOT names .)
    for             reduce using rule 43 (var -> prefixexp SDOT names .)
    local           reduce using rule 43 (var -> prefixexp SDOT names .)
    function        reduce using rule 43 (var -> prefixexp SDOT names .)
    ID              reduce using rule 43 (var -> prefixexp SDOT names .)
    RESID           reduce using rule 43 (var -> prefixexp SDOT names .)
    LPAREN          reduce using rule 43 (var -> prefixexp SDOT names .)
    EQUALS          reduce using rule 43 (var -> prefixexp SDOT names .)


state 89

    (16) stat -> for namelist in . explist do block end
    (45) explist -> . explist COMMA exp
    (46) explist -> . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 61
    var                            shift and go to state 29
    explist                        shift and go to state 129
    names                          shift and go to state 6

state 90

    (14) stat -> for names EQUALS . exp COMMA exp do block end
    (15) stat -> for names EQUALS . exp COMMA exp COMMA exp do block end
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    names                          shift and go to state 6
    exp                            shift and go to state 130
    var                            shift and go to state 29

state 91

    (37) comid -> empty .

    in              reduce using rule 37 (comid -> empty .)
    EQUALS          reduce using rule 37 (comid -> empty .)
    SEMI            reduce using rule 37 (comid -> empty .)
    return          reduce using rule 37 (comid -> empty .)
    break           reduce using rule 37 (comid -> empty .)
    do              reduce using rule 37 (comid -> empty .)
    while           reduce using rule 37 (comid -> empty .)
    repeat          reduce using rule 37 (comid -> empty .)
    if              reduce using rule 37 (comid -> empty .)
    for             reduce using rule 37 (comid -> empty .)
    local           reduce using rule 37 (comid -> empty .)
    function        reduce using rule 37 (comid -> empty .)
    ID              reduce using rule 37 (comid -> empty .)
    RESID           reduce using rule 37 (comid -> empty .)
    LPAREN          reduce using rule 37 (comid -> empty .)
    $end            reduce using rule 37 (comid -> empty .)
    end             reduce using rule 37 (comid -> empty .)
    until           reduce using rule 37 (comid -> empty .)
    else            reduce using rule 37 (comid -> empty .)
    elseif          reduce using rule 37 (comid -> empty .)
    COMMA           reduce using rule 37 (comid -> empty .)
    RPAREN          reduce using rule 37 (comid -> empty .)


state 92

    (36) comid -> COMMA . names comid
    (92) names -> . ID
    (93) names -> . RESID

    ID              shift and go to state 20
    RESID           shift and go to state 4

    names                          shift and go to state 131

state 93

    (44) namelist -> names comid .

    COMMA           reduce using rule 44 (namelist -> names comid .)
    RPAREN          reduce using rule 44 (namelist -> names comid .)
    in              reduce using rule 44 (namelist -> names comid .)
    EQUALS          reduce using rule 44 (namelist -> names comid .)
    SEMI            reduce using rule 44 (namelist -> names comid .)
    return          reduce using rule 44 (namelist -> names comid .)
    break           reduce using rule 44 (namelist -> names comid .)
    do              reduce using rule 44 (namelist -> names comid .)
    while           reduce using rule 44 (namelist -> names comid .)
    repeat          reduce using rule 44 (namelist -> names comid .)
    if              reduce using rule 44 (namelist -> names comid .)
    for             reduce using rule 44 (namelist -> names comid .)
    local           reduce using rule 44 (namelist -> names comid .)
    function        reduce using rule 44 (namelist -> names comid .)
    ID              reduce using rule 44 (namelist -> names comid .)
    RESID           reduce using rule 44 (namelist -> names comid .)
    LPAREN          reduce using rule 44 (namelist -> names comid .)
    $end            reduce using rule 44 (namelist -> names comid .)
    end             reduce using rule 44 (namelist -> names comid .)
    until           reduce using rule 44 (namelist -> names comid .)
    else            reduce using rule 44 (namelist -> names comid .)
    elseif          reduce using rule 44 (namelist -> names comid .)


state 94

    (8) stat -> varlist EQUALS explist .
    (45) explist -> explist . COMMA exp

    SEMI            reduce using rule 8 (stat -> varlist EQUALS explist .)
    return          reduce using rule 8 (stat -> varlist EQUALS explist .)
    break           reduce using rule 8 (stat -> varlist EQUALS explist .)
    do              reduce using rule 8 (stat -> varlist EQUALS explist .)
    while           reduce using rule 8 (stat -> varlist EQUALS explist .)
    repeat          reduce using rule 8 (stat -> varlist EQUALS explist .)
    if              reduce using rule 8 (stat -> varlist EQUALS explist .)
    for             reduce using rule 8 (stat -> varlist EQUALS explist .)
    local           reduce using rule 8 (stat -> varlist EQUALS explist .)
    function        reduce using rule 8 (stat -> varlist EQUALS explist .)
    ID              reduce using rule 8 (stat -> varlist EQUALS explist .)
    RESID           reduce using rule 8 (stat -> varlist EQUALS explist .)
    LPAREN          reduce using rule 8 (stat -> varlist EQUALS explist .)
    $end            reduce using rule 8 (stat -> varlist EQUALS explist .)
    end             reduce using rule 8 (stat -> varlist EQUALS explist .)
    until           reduce using rule 8 (stat -> varlist EQUALS explist .)
    else            reduce using rule 8 (stat -> varlist EQUALS explist .)
    elseif          reduce using rule 8 (stat -> varlist EQUALS explist .)
    COMMA           shift and go to state 105


state 95

    (34) comvar -> COMMA var . comvar
    (76) prefixexp -> var .
    (34) comvar -> . COMMA var comvar
    (35) comvar -> . empty
    (75) empty -> .

    LSQUARE         reduce using rule 76 (prefixexp -> var .)
    SDOT            reduce using rule 76 (prefixexp -> var .)
    COMMA           shift and go to state 48
    EQUALS          reduce using rule 75 (empty -> .)

    comvar                         shift and go to state 132
    empty                          shift and go to state 50

state 96

    (20) stat -> local function names . funcbody
    (21) funcbody -> . LPAREN RPAREN block end
    (22) funcbody -> . LPAREN parlist RPAREN block end

    LPAREN          shift and go to state 99

    funcbody                       shift and go to state 133

state 97

    (18) stat -> local namelist EQUALS . explist
    (45) explist -> . explist COMMA exp
    (46) explist -> . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 61
    var                            shift and go to state 29
    explist                        shift and go to state 134
    names                          shift and go to state 6

state 98

    (19) stat -> function funcname funcbody .

    SEMI            reduce using rule 19 (stat -> function funcname funcbody .)
    return          reduce using rule 19 (stat -> function funcname funcbody .)
    break           reduce using rule 19 (stat -> function funcname funcbody .)
    do              reduce using rule 19 (stat -> function funcname funcbody .)
    while           reduce using rule 19 (stat -> function funcname funcbody .)
    repeat          reduce using rule 19 (stat -> function funcname funcbody .)
    if              reduce using rule 19 (stat -> function funcname funcbody .)
    for             reduce using rule 19 (stat -> function funcname funcbody .)
    local           reduce using rule 19 (stat -> function funcname funcbody .)
    function        reduce using rule 19 (stat -> function funcname funcbody .)
    ID              reduce using rule 19 (stat -> function funcname funcbody .)
    RESID           reduce using rule 19 (stat -> function funcname funcbody .)
    LPAREN          reduce using rule 19 (stat -> function funcname funcbody .)
    $end            reduce using rule 19 (stat -> function funcname funcbody .)
    end             reduce using rule 19 (stat -> function funcname funcbody .)
    until           reduce using rule 19 (stat -> function funcname funcbody .)
    else            reduce using rule 19 (stat -> function funcname funcbody .)
    elseif          reduce using rule 19 (stat -> function funcname funcbody .)


state 99

    (21) funcbody -> LPAREN . RPAREN block end
    (22) funcbody -> LPAREN . parlist RPAREN block end
    (23) parlist -> . namelist
    (24) parlist -> . namelist comtrp
    (25) parlist -> . TRPLDOTS
    (44) namelist -> . names comid
    (92) names -> . ID
    (93) names -> . RESID

    RPAREN          shift and go to state 138
    TRPLDOTS        shift and go to state 136
    ID              shift and go to state 20
    RESID           shift and go to state 4

    namelist                       shift and go to state 135
    parlist                        shift and go to state 137
    names                          shift and go to state 53

state 100

    (32) dotid -> SDOT . names dotid
    (92) names -> . ID
    (93) names -> . RESID

    ID              shift and go to state 20
    RESID           shift and go to state 4

    names                          shift and go to state 139

state 101

    (30) funcname -> names dotid . COLON
    (31) funcname -> names dotid .

    COLON           shift and go to state 140
    LPAREN          reduce using rule 31 (funcname -> names dotid .)


state 102

    (33) dotid -> empty .

    COLON           reduce using rule 33 (dotid -> empty .)
    LPAREN          reduce using rule 33 (dotid -> empty .)


state 103

    (9) stat -> do block end .

    SEMI            reduce using rule 9 (stat -> do block end .)
    return          reduce using rule 9 (stat -> do block end .)
    break           reduce using rule 9 (stat -> do block end .)
    do              reduce using rule 9 (stat -> do block end .)
    while           reduce using rule 9 (stat -> do block end .)
    repeat          reduce using rule 9 (stat -> do block end .)
    if              reduce using rule 9 (stat -> do block end .)
    for             reduce using rule 9 (stat -> do block end .)
    local           reduce using rule 9 (stat -> do block end .)
    function        reduce using rule 9 (stat -> do block end .)
    ID              reduce using rule 9 (stat -> do block end .)
    RESID           reduce using rule 9 (stat -> do block end .)
    LPAREN          reduce using rule 9 (stat -> do block end .)
    $end            reduce using rule 9 (stat -> do block end .)
    end             reduce using rule 9 (stat -> do block end .)
    until           reduce using rule 9 (stat -> do block end .)
    else            reduce using rule 9 (stat -> do block end .)
    elseif          reduce using rule 9 (stat -> do block end .)


state 104

    (11) stat -> repeat block until . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 141
    var                            shift and go to state 29
    names                          shift and go to state 6

state 105

    (45) explist -> explist COMMA . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 142
    var                            shift and go to state 29
    names                          shift and go to state 6

state 106

    (10) stat -> while exp do . block end
    (7) block -> . sdash
    (1) sdash -> . chunk
    (2) sdash -> . chunk laststat
    (3) sdash -> . chunk laststat SEMI
    (4) chunk -> . chunk stat
    (5) chunk -> . chunk stat SEMI
    (6) chunk -> . empty
    (75) empty -> .

    return          reduce using rule 75 (empty -> .)
    break           reduce using rule 75 (empty -> .)
    do              reduce using rule 75 (empty -> .)
    while           reduce using rule 75 (empty -> .)
    repeat          reduce using rule 75 (empty -> .)
    if              reduce using rule 75 (empty -> .)
    for             reduce using rule 75 (empty -> .)
    local           reduce using rule 75 (empty -> .)
    function        reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    RESID           reduce using rule 75 (empty -> .)
    LPAREN          reduce using rule 75 (empty -> .)
    end             reduce using rule 75 (empty -> .)

    chunk                          shift and go to state 1
    empty                          shift and go to state 3
    sdash                          shift and go to state 57
    block                          shift and go to state 143

state 107

    (88) field -> names EQUALS . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    names                          shift and go to state 6
    exp                            shift and go to state 144
    var                            shift and go to state 29

state 108

    (83) fieldlist -> field fieldseplist . fieldsep
    (84) fieldlist -> field fieldseplist .
    (85) fieldseplist -> fieldseplist . fieldsep field
    (90) fieldsep -> . COMMA
    (91) fieldsep -> . SEMI

    RCURLY          reduce using rule 84 (fieldlist -> field fieldseplist .)
    COMMA           shift and go to state 146
    SEMI            shift and go to state 147

    fieldsep                       shift and go to state 145

state 109

    (86) fieldseplist -> empty .

    COMMA           reduce using rule 86 (fieldseplist -> empty .)
    SEMI            reduce using rule 86 (fieldseplist -> empty .)
    RCURLY          reduce using rule 86 (fieldseplist -> empty .)


state 110

    (81) tableconstructor -> LCURLY fieldlist RCURLY .

    PLUS            reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    MINUS           reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    TIMES           reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    DIVIDE          reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    POWER           reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    LT              reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    LE              reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    GT              reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    GE              reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    NE              reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    CHECKEQ         reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    and             reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    or              reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    MODULO          reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    DBLDOTS         reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    RPAREN          reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    then            reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    COMMA           reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    SEMI            reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    $end            reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    end             reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    until           reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    else            reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    elseif          reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    do              reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    RCURLY          reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    RSQUARE         reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    return          reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    break           reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    while           reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    repeat          reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    if              reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    for             reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    local           reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    function        reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    ID              reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    RESID           reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)
    LPAREN          reduce using rule 81 (tableconstructor -> LCURLY fieldlist RCURLY .)


state 111

    (87) field -> LSQUARE exp . RSQUARE EQUALS exp
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    RSQUARE         shift and go to state 148
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    LT              shift and go to state 77
    LE              shift and go to state 70
    GT              shift and go to state 78
    GE              shift and go to state 74
    NE              shift and go to state 83
    CHECKEQ         shift and go to state 76
    and             shift and go to state 69
    or              shift and go to state 73
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81


state 112

    (66) exp -> exp and exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    LT              reduce using rule 66 (exp -> exp and exp .)
    LE              reduce using rule 66 (exp -> exp and exp .)
    GT              reduce using rule 66 (exp -> exp and exp .)
    GE              reduce using rule 66 (exp -> exp and exp .)
    NE              reduce using rule 66 (exp -> exp and exp .)
    CHECKEQ         reduce using rule 66 (exp -> exp and exp .)
    and             reduce using rule 66 (exp -> exp and exp .)
    or              reduce using rule 66 (exp -> exp and exp .)
    do              reduce using rule 66 (exp -> exp and exp .)
    COMMA           reduce using rule 66 (exp -> exp and exp .)
    SEMI            reduce using rule 66 (exp -> exp and exp .)
    RCURLY          reduce using rule 66 (exp -> exp and exp .)
    RPAREN          reduce using rule 66 (exp -> exp and exp .)
    then            reduce using rule 66 (exp -> exp and exp .)
    $end            reduce using rule 66 (exp -> exp and exp .)
    end             reduce using rule 66 (exp -> exp and exp .)
    until           reduce using rule 66 (exp -> exp and exp .)
    else            reduce using rule 66 (exp -> exp and exp .)
    elseif          reduce using rule 66 (exp -> exp and exp .)
    RSQUARE         reduce using rule 66 (exp -> exp and exp .)
    return          reduce using rule 66 (exp -> exp and exp .)
    break           reduce using rule 66 (exp -> exp and exp .)
    while           reduce using rule 66 (exp -> exp and exp .)
    repeat          reduce using rule 66 (exp -> exp and exp .)
    if              reduce using rule 66 (exp -> exp and exp .)
    for             reduce using rule 66 (exp -> exp and exp .)
    local           reduce using rule 66 (exp -> exp and exp .)
    function        reduce using rule 66 (exp -> exp and exp .)
    ID              reduce using rule 66 (exp -> exp and exp .)
    RESID           reduce using rule 66 (exp -> exp and exp .)
    LPAREN          reduce using rule 66 (exp -> exp and exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81

  ! PLUS            [ reduce using rule 66 (exp -> exp and exp .) ]
  ! MINUS           [ reduce using rule 66 (exp -> exp and exp .) ]
  ! TIMES           [ reduce using rule 66 (exp -> exp and exp .) ]
  ! DIVIDE          [ reduce using rule 66 (exp -> exp and exp .) ]
  ! POWER           [ reduce using rule 66 (exp -> exp and exp .) ]
  ! MODULO          [ reduce using rule 66 (exp -> exp and exp .) ]
  ! DBLDOTS         [ reduce using rule 66 (exp -> exp and exp .) ]
  ! LT              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 74 ]
  ! NE              [ shift and go to state 83 ]
  ! CHECKEQ         [ shift and go to state 76 ]
  ! and             [ shift and go to state 69 ]
  ! or              [ shift and go to state 73 ]


state 113

    (61) exp -> exp LE exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    LT              reduce using rule 61 (exp -> exp LE exp .)
    LE              reduce using rule 61 (exp -> exp LE exp .)
    GT              reduce using rule 61 (exp -> exp LE exp .)
    GE              reduce using rule 61 (exp -> exp LE exp .)
    NE              reduce using rule 61 (exp -> exp LE exp .)
    CHECKEQ         reduce using rule 61 (exp -> exp LE exp .)
    and             reduce using rule 61 (exp -> exp LE exp .)
    or              reduce using rule 61 (exp -> exp LE exp .)
    do              reduce using rule 61 (exp -> exp LE exp .)
    COMMA           reduce using rule 61 (exp -> exp LE exp .)
    SEMI            reduce using rule 61 (exp -> exp LE exp .)
    RCURLY          reduce using rule 61 (exp -> exp LE exp .)
    RPAREN          reduce using rule 61 (exp -> exp LE exp .)
    then            reduce using rule 61 (exp -> exp LE exp .)
    $end            reduce using rule 61 (exp -> exp LE exp .)
    end             reduce using rule 61 (exp -> exp LE exp .)
    until           reduce using rule 61 (exp -> exp LE exp .)
    else            reduce using rule 61 (exp -> exp LE exp .)
    elseif          reduce using rule 61 (exp -> exp LE exp .)
    RSQUARE         reduce using rule 61 (exp -> exp LE exp .)
    return          reduce using rule 61 (exp -> exp LE exp .)
    break           reduce using rule 61 (exp -> exp LE exp .)
    while           reduce using rule 61 (exp -> exp LE exp .)
    repeat          reduce using rule 61 (exp -> exp LE exp .)
    if              reduce using rule 61 (exp -> exp LE exp .)
    for             reduce using rule 61 (exp -> exp LE exp .)
    local           reduce using rule 61 (exp -> exp LE exp .)
    function        reduce using rule 61 (exp -> exp LE exp .)
    ID              reduce using rule 61 (exp -> exp LE exp .)
    RESID           reduce using rule 61 (exp -> exp LE exp .)
    LPAREN          reduce using rule 61 (exp -> exp LE exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81

  ! PLUS            [ reduce using rule 61 (exp -> exp LE exp .) ]
  ! MINUS           [ reduce using rule 61 (exp -> exp LE exp .) ]
  ! TIMES           [ reduce using rule 61 (exp -> exp LE exp .) ]
  ! DIVIDE          [ reduce using rule 61 (exp -> exp LE exp .) ]
  ! POWER           [ reduce using rule 61 (exp -> exp LE exp .) ]
  ! MODULO          [ reduce using rule 61 (exp -> exp LE exp .) ]
  ! DBLDOTS         [ reduce using rule 61 (exp -> exp LE exp .) ]
  ! LT              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 74 ]
  ! NE              [ shift and go to state 83 ]
  ! CHECKEQ         [ shift and go to state 76 ]
  ! and             [ shift and go to state 69 ]
  ! or              [ shift and go to state 73 ]


state 114

    (59) exp -> exp POWER exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    PLUS            reduce using rule 59 (exp -> exp POWER exp .)
    MINUS           reduce using rule 59 (exp -> exp POWER exp .)
    TIMES           reduce using rule 59 (exp -> exp POWER exp .)
    DIVIDE          reduce using rule 59 (exp -> exp POWER exp .)
    LT              reduce using rule 59 (exp -> exp POWER exp .)
    LE              reduce using rule 59 (exp -> exp POWER exp .)
    GT              reduce using rule 59 (exp -> exp POWER exp .)
    GE              reduce using rule 59 (exp -> exp POWER exp .)
    NE              reduce using rule 59 (exp -> exp POWER exp .)
    CHECKEQ         reduce using rule 59 (exp -> exp POWER exp .)
    and             reduce using rule 59 (exp -> exp POWER exp .)
    or              reduce using rule 59 (exp -> exp POWER exp .)
    MODULO          reduce using rule 59 (exp -> exp POWER exp .)
    DBLDOTS         reduce using rule 59 (exp -> exp POWER exp .)
    do              reduce using rule 59 (exp -> exp POWER exp .)
    COMMA           reduce using rule 59 (exp -> exp POWER exp .)
    SEMI            reduce using rule 59 (exp -> exp POWER exp .)
    RCURLY          reduce using rule 59 (exp -> exp POWER exp .)
    RPAREN          reduce using rule 59 (exp -> exp POWER exp .)
    then            reduce using rule 59 (exp -> exp POWER exp .)
    $end            reduce using rule 59 (exp -> exp POWER exp .)
    end             reduce using rule 59 (exp -> exp POWER exp .)
    until           reduce using rule 59 (exp -> exp POWER exp .)
    else            reduce using rule 59 (exp -> exp POWER exp .)
    elseif          reduce using rule 59 (exp -> exp POWER exp .)
    RSQUARE         reduce using rule 59 (exp -> exp POWER exp .)
    return          reduce using rule 59 (exp -> exp POWER exp .)
    break           reduce using rule 59 (exp -> exp POWER exp .)
    while           reduce using rule 59 (exp -> exp POWER exp .)
    repeat          reduce using rule 59 (exp -> exp POWER exp .)
    if              reduce using rule 59 (exp -> exp POWER exp .)
    for             reduce using rule 59 (exp -> exp POWER exp .)
    local           reduce using rule 59 (exp -> exp POWER exp .)
    function        reduce using rule 59 (exp -> exp POWER exp .)
    ID              reduce using rule 59 (exp -> exp POWER exp .)
    RESID           reduce using rule 59 (exp -> exp POWER exp .)
    LPAREN          reduce using rule 59 (exp -> exp POWER exp .)
    POWER           shift and go to state 72

  ! POWER           [ reduce using rule 59 (exp -> exp POWER exp .) ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 82 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! LT              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 74 ]
  ! NE              [ shift and go to state 83 ]
  ! CHECKEQ         [ shift and go to state 76 ]
  ! and             [ shift and go to state 69 ]
  ! or              [ shift and go to state 73 ]
  ! MODULO          [ shift and go to state 80 ]
  ! DBLDOTS         [ shift and go to state 81 ]


state 115

    (67) exp -> exp or exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    LT              reduce using rule 67 (exp -> exp or exp .)
    LE              reduce using rule 67 (exp -> exp or exp .)
    GT              reduce using rule 67 (exp -> exp or exp .)
    GE              reduce using rule 67 (exp -> exp or exp .)
    NE              reduce using rule 67 (exp -> exp or exp .)
    CHECKEQ         reduce using rule 67 (exp -> exp or exp .)
    and             reduce using rule 67 (exp -> exp or exp .)
    or              reduce using rule 67 (exp -> exp or exp .)
    do              reduce using rule 67 (exp -> exp or exp .)
    COMMA           reduce using rule 67 (exp -> exp or exp .)
    SEMI            reduce using rule 67 (exp -> exp or exp .)
    RCURLY          reduce using rule 67 (exp -> exp or exp .)
    RPAREN          reduce using rule 67 (exp -> exp or exp .)
    then            reduce using rule 67 (exp -> exp or exp .)
    $end            reduce using rule 67 (exp -> exp or exp .)
    end             reduce using rule 67 (exp -> exp or exp .)
    until           reduce using rule 67 (exp -> exp or exp .)
    else            reduce using rule 67 (exp -> exp or exp .)
    elseif          reduce using rule 67 (exp -> exp or exp .)
    RSQUARE         reduce using rule 67 (exp -> exp or exp .)
    return          reduce using rule 67 (exp -> exp or exp .)
    break           reduce using rule 67 (exp -> exp or exp .)
    while           reduce using rule 67 (exp -> exp or exp .)
    repeat          reduce using rule 67 (exp -> exp or exp .)
    if              reduce using rule 67 (exp -> exp or exp .)
    for             reduce using rule 67 (exp -> exp or exp .)
    local           reduce using rule 67 (exp -> exp or exp .)
    function        reduce using rule 67 (exp -> exp or exp .)
    ID              reduce using rule 67 (exp -> exp or exp .)
    RESID           reduce using rule 67 (exp -> exp or exp .)
    LPAREN          reduce using rule 67 (exp -> exp or exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81

  ! PLUS            [ reduce using rule 67 (exp -> exp or exp .) ]
  ! MINUS           [ reduce using rule 67 (exp -> exp or exp .) ]
  ! TIMES           [ reduce using rule 67 (exp -> exp or exp .) ]
  ! DIVIDE          [ reduce using rule 67 (exp -> exp or exp .) ]
  ! POWER           [ reduce using rule 67 (exp -> exp or exp .) ]
  ! MODULO          [ reduce using rule 67 (exp -> exp or exp .) ]
  ! DBLDOTS         [ reduce using rule 67 (exp -> exp or exp .) ]
  ! LT              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 74 ]
  ! NE              [ shift and go to state 83 ]
  ! CHECKEQ         [ shift and go to state 76 ]
  ! and             [ shift and go to state 69 ]
  ! or              [ shift and go to state 73 ]


state 116

    (63) exp -> exp GE exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    LT              reduce using rule 63 (exp -> exp GE exp .)
    LE              reduce using rule 63 (exp -> exp GE exp .)
    GT              reduce using rule 63 (exp -> exp GE exp .)
    GE              reduce using rule 63 (exp -> exp GE exp .)
    NE              reduce using rule 63 (exp -> exp GE exp .)
    CHECKEQ         reduce using rule 63 (exp -> exp GE exp .)
    and             reduce using rule 63 (exp -> exp GE exp .)
    or              reduce using rule 63 (exp -> exp GE exp .)
    do              reduce using rule 63 (exp -> exp GE exp .)
    COMMA           reduce using rule 63 (exp -> exp GE exp .)
    SEMI            reduce using rule 63 (exp -> exp GE exp .)
    RCURLY          reduce using rule 63 (exp -> exp GE exp .)
    RPAREN          reduce using rule 63 (exp -> exp GE exp .)
    then            reduce using rule 63 (exp -> exp GE exp .)
    $end            reduce using rule 63 (exp -> exp GE exp .)
    end             reduce using rule 63 (exp -> exp GE exp .)
    until           reduce using rule 63 (exp -> exp GE exp .)
    else            reduce using rule 63 (exp -> exp GE exp .)
    elseif          reduce using rule 63 (exp -> exp GE exp .)
    RSQUARE         reduce using rule 63 (exp -> exp GE exp .)
    return          reduce using rule 63 (exp -> exp GE exp .)
    break           reduce using rule 63 (exp -> exp GE exp .)
    while           reduce using rule 63 (exp -> exp GE exp .)
    repeat          reduce using rule 63 (exp -> exp GE exp .)
    if              reduce using rule 63 (exp -> exp GE exp .)
    for             reduce using rule 63 (exp -> exp GE exp .)
    local           reduce using rule 63 (exp -> exp GE exp .)
    function        reduce using rule 63 (exp -> exp GE exp .)
    ID              reduce using rule 63 (exp -> exp GE exp .)
    RESID           reduce using rule 63 (exp -> exp GE exp .)
    LPAREN          reduce using rule 63 (exp -> exp GE exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81

  ! PLUS            [ reduce using rule 63 (exp -> exp GE exp .) ]
  ! MINUS           [ reduce using rule 63 (exp -> exp GE exp .) ]
  ! TIMES           [ reduce using rule 63 (exp -> exp GE exp .) ]
  ! DIVIDE          [ reduce using rule 63 (exp -> exp GE exp .) ]
  ! POWER           [ reduce using rule 63 (exp -> exp GE exp .) ]
  ! MODULO          [ reduce using rule 63 (exp -> exp GE exp .) ]
  ! DBLDOTS         [ reduce using rule 63 (exp -> exp GE exp .) ]
  ! LT              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 74 ]
  ! NE              [ shift and go to state 83 ]
  ! CHECKEQ         [ shift and go to state 76 ]
  ! and             [ shift and go to state 69 ]
  ! or              [ shift and go to state 73 ]


state 117

    (57) exp -> exp TIMES exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    PLUS            reduce using rule 57 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 57 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 57 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 57 (exp -> exp TIMES exp .)
    LT              reduce using rule 57 (exp -> exp TIMES exp .)
    LE              reduce using rule 57 (exp -> exp TIMES exp .)
    GT              reduce using rule 57 (exp -> exp TIMES exp .)
    GE              reduce using rule 57 (exp -> exp TIMES exp .)
    NE              reduce using rule 57 (exp -> exp TIMES exp .)
    CHECKEQ         reduce using rule 57 (exp -> exp TIMES exp .)
    and             reduce using rule 57 (exp -> exp TIMES exp .)
    or              reduce using rule 57 (exp -> exp TIMES exp .)
    MODULO          reduce using rule 57 (exp -> exp TIMES exp .)
    DBLDOTS         reduce using rule 57 (exp -> exp TIMES exp .)
    do              reduce using rule 57 (exp -> exp TIMES exp .)
    COMMA           reduce using rule 57 (exp -> exp TIMES exp .)
    SEMI            reduce using rule 57 (exp -> exp TIMES exp .)
    RCURLY          reduce using rule 57 (exp -> exp TIMES exp .)
    RPAREN          reduce using rule 57 (exp -> exp TIMES exp .)
    then            reduce using rule 57 (exp -> exp TIMES exp .)
    $end            reduce using rule 57 (exp -> exp TIMES exp .)
    end             reduce using rule 57 (exp -> exp TIMES exp .)
    until           reduce using rule 57 (exp -> exp TIMES exp .)
    else            reduce using rule 57 (exp -> exp TIMES exp .)
    elseif          reduce using rule 57 (exp -> exp TIMES exp .)
    RSQUARE         reduce using rule 57 (exp -> exp TIMES exp .)
    return          reduce using rule 57 (exp -> exp TIMES exp .)
    break           reduce using rule 57 (exp -> exp TIMES exp .)
    while           reduce using rule 57 (exp -> exp TIMES exp .)
    repeat          reduce using rule 57 (exp -> exp TIMES exp .)
    if              reduce using rule 57 (exp -> exp TIMES exp .)
    for             reduce using rule 57 (exp -> exp TIMES exp .)
    local           reduce using rule 57 (exp -> exp TIMES exp .)
    function        reduce using rule 57 (exp -> exp TIMES exp .)
    ID              reduce using rule 57 (exp -> exp TIMES exp .)
    RESID           reduce using rule 57 (exp -> exp TIMES exp .)
    LPAREN          reduce using rule 57 (exp -> exp TIMES exp .)
    POWER           shift and go to state 72

  ! POWER           [ reduce using rule 57 (exp -> exp TIMES exp .) ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 82 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! LT              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 74 ]
  ! NE              [ shift and go to state 83 ]
  ! CHECKEQ         [ shift and go to state 76 ]
  ! and             [ shift and go to state 69 ]
  ! or              [ shift and go to state 73 ]
  ! MODULO          [ shift and go to state 80 ]
  ! DBLDOTS         [ shift and go to state 81 ]


state 118

    (65) exp -> exp CHECKEQ exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    LT              reduce using rule 65 (exp -> exp CHECKEQ exp .)
    LE              reduce using rule 65 (exp -> exp CHECKEQ exp .)
    GT              reduce using rule 65 (exp -> exp CHECKEQ exp .)
    GE              reduce using rule 65 (exp -> exp CHECKEQ exp .)
    NE              reduce using rule 65 (exp -> exp CHECKEQ exp .)
    CHECKEQ         reduce using rule 65 (exp -> exp CHECKEQ exp .)
    and             reduce using rule 65 (exp -> exp CHECKEQ exp .)
    or              reduce using rule 65 (exp -> exp CHECKEQ exp .)
    do              reduce using rule 65 (exp -> exp CHECKEQ exp .)
    COMMA           reduce using rule 65 (exp -> exp CHECKEQ exp .)
    SEMI            reduce using rule 65 (exp -> exp CHECKEQ exp .)
    RCURLY          reduce using rule 65 (exp -> exp CHECKEQ exp .)
    RPAREN          reduce using rule 65 (exp -> exp CHECKEQ exp .)
    then            reduce using rule 65 (exp -> exp CHECKEQ exp .)
    $end            reduce using rule 65 (exp -> exp CHECKEQ exp .)
    end             reduce using rule 65 (exp -> exp CHECKEQ exp .)
    until           reduce using rule 65 (exp -> exp CHECKEQ exp .)
    else            reduce using rule 65 (exp -> exp CHECKEQ exp .)
    elseif          reduce using rule 65 (exp -> exp CHECKEQ exp .)
    RSQUARE         reduce using rule 65 (exp -> exp CHECKEQ exp .)
    return          reduce using rule 65 (exp -> exp CHECKEQ exp .)
    break           reduce using rule 65 (exp -> exp CHECKEQ exp .)
    while           reduce using rule 65 (exp -> exp CHECKEQ exp .)
    repeat          reduce using rule 65 (exp -> exp CHECKEQ exp .)
    if              reduce using rule 65 (exp -> exp CHECKEQ exp .)
    for             reduce using rule 65 (exp -> exp CHECKEQ exp .)
    local           reduce using rule 65 (exp -> exp CHECKEQ exp .)
    function        reduce using rule 65 (exp -> exp CHECKEQ exp .)
    ID              reduce using rule 65 (exp -> exp CHECKEQ exp .)
    RESID           reduce using rule 65 (exp -> exp CHECKEQ exp .)
    LPAREN          reduce using rule 65 (exp -> exp CHECKEQ exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81

  ! PLUS            [ reduce using rule 65 (exp -> exp CHECKEQ exp .) ]
  ! MINUS           [ reduce using rule 65 (exp -> exp CHECKEQ exp .) ]
  ! TIMES           [ reduce using rule 65 (exp -> exp CHECKEQ exp .) ]
  ! DIVIDE          [ reduce using rule 65 (exp -> exp CHECKEQ exp .) ]
  ! POWER           [ reduce using rule 65 (exp -> exp CHECKEQ exp .) ]
  ! MODULO          [ reduce using rule 65 (exp -> exp CHECKEQ exp .) ]
  ! DBLDOTS         [ reduce using rule 65 (exp -> exp CHECKEQ exp .) ]
  ! LT              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 74 ]
  ! NE              [ shift and go to state 83 ]
  ! CHECKEQ         [ shift and go to state 76 ]
  ! and             [ shift and go to state 69 ]
  ! or              [ shift and go to state 73 ]


state 119

    (60) exp -> exp LT exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    LT              reduce using rule 60 (exp -> exp LT exp .)
    LE              reduce using rule 60 (exp -> exp LT exp .)
    GT              reduce using rule 60 (exp -> exp LT exp .)
    GE              reduce using rule 60 (exp -> exp LT exp .)
    NE              reduce using rule 60 (exp -> exp LT exp .)
    CHECKEQ         reduce using rule 60 (exp -> exp LT exp .)
    and             reduce using rule 60 (exp -> exp LT exp .)
    or              reduce using rule 60 (exp -> exp LT exp .)
    do              reduce using rule 60 (exp -> exp LT exp .)
    COMMA           reduce using rule 60 (exp -> exp LT exp .)
    SEMI            reduce using rule 60 (exp -> exp LT exp .)
    RCURLY          reduce using rule 60 (exp -> exp LT exp .)
    RPAREN          reduce using rule 60 (exp -> exp LT exp .)
    then            reduce using rule 60 (exp -> exp LT exp .)
    $end            reduce using rule 60 (exp -> exp LT exp .)
    end             reduce using rule 60 (exp -> exp LT exp .)
    until           reduce using rule 60 (exp -> exp LT exp .)
    else            reduce using rule 60 (exp -> exp LT exp .)
    elseif          reduce using rule 60 (exp -> exp LT exp .)
    RSQUARE         reduce using rule 60 (exp -> exp LT exp .)
    return          reduce using rule 60 (exp -> exp LT exp .)
    break           reduce using rule 60 (exp -> exp LT exp .)
    while           reduce using rule 60 (exp -> exp LT exp .)
    repeat          reduce using rule 60 (exp -> exp LT exp .)
    if              reduce using rule 60 (exp -> exp LT exp .)
    for             reduce using rule 60 (exp -> exp LT exp .)
    local           reduce using rule 60 (exp -> exp LT exp .)
    function        reduce using rule 60 (exp -> exp LT exp .)
    ID              reduce using rule 60 (exp -> exp LT exp .)
    RESID           reduce using rule 60 (exp -> exp LT exp .)
    LPAREN          reduce using rule 60 (exp -> exp LT exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81

  ! PLUS            [ reduce using rule 60 (exp -> exp LT exp .) ]
  ! MINUS           [ reduce using rule 60 (exp -> exp LT exp .) ]
  ! TIMES           [ reduce using rule 60 (exp -> exp LT exp .) ]
  ! DIVIDE          [ reduce using rule 60 (exp -> exp LT exp .) ]
  ! POWER           [ reduce using rule 60 (exp -> exp LT exp .) ]
  ! MODULO          [ reduce using rule 60 (exp -> exp LT exp .) ]
  ! DBLDOTS         [ reduce using rule 60 (exp -> exp LT exp .) ]
  ! LT              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 74 ]
  ! NE              [ shift and go to state 83 ]
  ! CHECKEQ         [ shift and go to state 76 ]
  ! and             [ shift and go to state 69 ]
  ! or              [ shift and go to state 73 ]


state 120

    (62) exp -> exp GT exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    LT              reduce using rule 62 (exp -> exp GT exp .)
    LE              reduce using rule 62 (exp -> exp GT exp .)
    GT              reduce using rule 62 (exp -> exp GT exp .)
    GE              reduce using rule 62 (exp -> exp GT exp .)
    NE              reduce using rule 62 (exp -> exp GT exp .)
    CHECKEQ         reduce using rule 62 (exp -> exp GT exp .)
    and             reduce using rule 62 (exp -> exp GT exp .)
    or              reduce using rule 62 (exp -> exp GT exp .)
    do              reduce using rule 62 (exp -> exp GT exp .)
    COMMA           reduce using rule 62 (exp -> exp GT exp .)
    SEMI            reduce using rule 62 (exp -> exp GT exp .)
    RCURLY          reduce using rule 62 (exp -> exp GT exp .)
    RPAREN          reduce using rule 62 (exp -> exp GT exp .)
    then            reduce using rule 62 (exp -> exp GT exp .)
    $end            reduce using rule 62 (exp -> exp GT exp .)
    end             reduce using rule 62 (exp -> exp GT exp .)
    until           reduce using rule 62 (exp -> exp GT exp .)
    else            reduce using rule 62 (exp -> exp GT exp .)
    elseif          reduce using rule 62 (exp -> exp GT exp .)
    RSQUARE         reduce using rule 62 (exp -> exp GT exp .)
    return          reduce using rule 62 (exp -> exp GT exp .)
    break           reduce using rule 62 (exp -> exp GT exp .)
    while           reduce using rule 62 (exp -> exp GT exp .)
    repeat          reduce using rule 62 (exp -> exp GT exp .)
    if              reduce using rule 62 (exp -> exp GT exp .)
    for             reduce using rule 62 (exp -> exp GT exp .)
    local           reduce using rule 62 (exp -> exp GT exp .)
    function        reduce using rule 62 (exp -> exp GT exp .)
    ID              reduce using rule 62 (exp -> exp GT exp .)
    RESID           reduce using rule 62 (exp -> exp GT exp .)
    LPAREN          reduce using rule 62 (exp -> exp GT exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81

  ! PLUS            [ reduce using rule 62 (exp -> exp GT exp .) ]
  ! MINUS           [ reduce using rule 62 (exp -> exp GT exp .) ]
  ! TIMES           [ reduce using rule 62 (exp -> exp GT exp .) ]
  ! DIVIDE          [ reduce using rule 62 (exp -> exp GT exp .) ]
  ! POWER           [ reduce using rule 62 (exp -> exp GT exp .) ]
  ! MODULO          [ reduce using rule 62 (exp -> exp GT exp .) ]
  ! DBLDOTS         [ reduce using rule 62 (exp -> exp GT exp .) ]
  ! LT              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 74 ]
  ! NE              [ shift and go to state 83 ]
  ! CHECKEQ         [ shift and go to state 76 ]
  ! and             [ shift and go to state 69 ]
  ! or              [ shift and go to state 73 ]


state 121

    (55) exp -> exp PLUS exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    PLUS            reduce using rule 55 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 55 (exp -> exp PLUS exp .)
    LT              reduce using rule 55 (exp -> exp PLUS exp .)
    LE              reduce using rule 55 (exp -> exp PLUS exp .)
    GT              reduce using rule 55 (exp -> exp PLUS exp .)
    GE              reduce using rule 55 (exp -> exp PLUS exp .)
    NE              reduce using rule 55 (exp -> exp PLUS exp .)
    CHECKEQ         reduce using rule 55 (exp -> exp PLUS exp .)
    and             reduce using rule 55 (exp -> exp PLUS exp .)
    or              reduce using rule 55 (exp -> exp PLUS exp .)
    DBLDOTS         reduce using rule 55 (exp -> exp PLUS exp .)
    do              reduce using rule 55 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 55 (exp -> exp PLUS exp .)
    SEMI            reduce using rule 55 (exp -> exp PLUS exp .)
    RCURLY          reduce using rule 55 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 55 (exp -> exp PLUS exp .)
    then            reduce using rule 55 (exp -> exp PLUS exp .)
    $end            reduce using rule 55 (exp -> exp PLUS exp .)
    end             reduce using rule 55 (exp -> exp PLUS exp .)
    until           reduce using rule 55 (exp -> exp PLUS exp .)
    else            reduce using rule 55 (exp -> exp PLUS exp .)
    elseif          reduce using rule 55 (exp -> exp PLUS exp .)
    RSQUARE         reduce using rule 55 (exp -> exp PLUS exp .)
    return          reduce using rule 55 (exp -> exp PLUS exp .)
    break           reduce using rule 55 (exp -> exp PLUS exp .)
    while           reduce using rule 55 (exp -> exp PLUS exp .)
    repeat          reduce using rule 55 (exp -> exp PLUS exp .)
    if              reduce using rule 55 (exp -> exp PLUS exp .)
    for             reduce using rule 55 (exp -> exp PLUS exp .)
    local           reduce using rule 55 (exp -> exp PLUS exp .)
    function        reduce using rule 55 (exp -> exp PLUS exp .)
    ID              reduce using rule 55 (exp -> exp PLUS exp .)
    RESID           reduce using rule 55 (exp -> exp PLUS exp .)
    LPAREN          reduce using rule 55 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    MODULO          shift and go to state 80

  ! TIMES           [ reduce using rule 55 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 55 (exp -> exp PLUS exp .) ]
  ! POWER           [ reduce using rule 55 (exp -> exp PLUS exp .) ]
  ! MODULO          [ reduce using rule 55 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 82 ]
  ! LT              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 74 ]
  ! NE              [ shift and go to state 83 ]
  ! CHECKEQ         [ shift and go to state 76 ]
  ! and             [ shift and go to state 69 ]
  ! or              [ shift and go to state 73 ]
  ! DBLDOTS         [ shift and go to state 81 ]


state 122

    (68) exp -> exp MODULO exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    PLUS            reduce using rule 68 (exp -> exp MODULO exp .)
    MINUS           reduce using rule 68 (exp -> exp MODULO exp .)
    TIMES           reduce using rule 68 (exp -> exp MODULO exp .)
    DIVIDE          reduce using rule 68 (exp -> exp MODULO exp .)
    LT              reduce using rule 68 (exp -> exp MODULO exp .)
    LE              reduce using rule 68 (exp -> exp MODULO exp .)
    GT              reduce using rule 68 (exp -> exp MODULO exp .)
    GE              reduce using rule 68 (exp -> exp MODULO exp .)
    NE              reduce using rule 68 (exp -> exp MODULO exp .)
    CHECKEQ         reduce using rule 68 (exp -> exp MODULO exp .)
    and             reduce using rule 68 (exp -> exp MODULO exp .)
    or              reduce using rule 68 (exp -> exp MODULO exp .)
    MODULO          reduce using rule 68 (exp -> exp MODULO exp .)
    DBLDOTS         reduce using rule 68 (exp -> exp MODULO exp .)
    do              reduce using rule 68 (exp -> exp MODULO exp .)
    COMMA           reduce using rule 68 (exp -> exp MODULO exp .)
    SEMI            reduce using rule 68 (exp -> exp MODULO exp .)
    RCURLY          reduce using rule 68 (exp -> exp MODULO exp .)
    RPAREN          reduce using rule 68 (exp -> exp MODULO exp .)
    then            reduce using rule 68 (exp -> exp MODULO exp .)
    $end            reduce using rule 68 (exp -> exp MODULO exp .)
    end             reduce using rule 68 (exp -> exp MODULO exp .)
    until           reduce using rule 68 (exp -> exp MODULO exp .)
    else            reduce using rule 68 (exp -> exp MODULO exp .)
    elseif          reduce using rule 68 (exp -> exp MODULO exp .)
    RSQUARE         reduce using rule 68 (exp -> exp MODULO exp .)
    return          reduce using rule 68 (exp -> exp MODULO exp .)
    break           reduce using rule 68 (exp -> exp MODULO exp .)
    while           reduce using rule 68 (exp -> exp MODULO exp .)
    repeat          reduce using rule 68 (exp -> exp MODULO exp .)
    if              reduce using rule 68 (exp -> exp MODULO exp .)
    for             reduce using rule 68 (exp -> exp MODULO exp .)
    local           reduce using rule 68 (exp -> exp MODULO exp .)
    function        reduce using rule 68 (exp -> exp MODULO exp .)
    ID              reduce using rule 68 (exp -> exp MODULO exp .)
    RESID           reduce using rule 68 (exp -> exp MODULO exp .)
    LPAREN          reduce using rule 68 (exp -> exp MODULO exp .)
    POWER           shift and go to state 72

  ! POWER           [ reduce using rule 68 (exp -> exp MODULO exp .) ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 82 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! LT              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 74 ]
  ! NE              [ shift and go to state 83 ]
  ! CHECKEQ         [ shift and go to state 76 ]
  ! and             [ shift and go to state 69 ]
  ! or              [ shift and go to state 73 ]
  ! MODULO          [ shift and go to state 80 ]
  ! DBLDOTS         [ shift and go to state 81 ]


state 123

    (69) exp -> exp DBLDOTS exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    LT              reduce using rule 69 (exp -> exp DBLDOTS exp .)
    LE              reduce using rule 69 (exp -> exp DBLDOTS exp .)
    GT              reduce using rule 69 (exp -> exp DBLDOTS exp .)
    GE              reduce using rule 69 (exp -> exp DBLDOTS exp .)
    NE              reduce using rule 69 (exp -> exp DBLDOTS exp .)
    CHECKEQ         reduce using rule 69 (exp -> exp DBLDOTS exp .)
    and             reduce using rule 69 (exp -> exp DBLDOTS exp .)
    or              reduce using rule 69 (exp -> exp DBLDOTS exp .)
    do              reduce using rule 69 (exp -> exp DBLDOTS exp .)
    COMMA           reduce using rule 69 (exp -> exp DBLDOTS exp .)
    SEMI            reduce using rule 69 (exp -> exp DBLDOTS exp .)
    RCURLY          reduce using rule 69 (exp -> exp DBLDOTS exp .)
    RPAREN          reduce using rule 69 (exp -> exp DBLDOTS exp .)
    then            reduce using rule 69 (exp -> exp DBLDOTS exp .)
    $end            reduce using rule 69 (exp -> exp DBLDOTS exp .)
    end             reduce using rule 69 (exp -> exp DBLDOTS exp .)
    until           reduce using rule 69 (exp -> exp DBLDOTS exp .)
    else            reduce using rule 69 (exp -> exp DBLDOTS exp .)
    elseif          reduce using rule 69 (exp -> exp DBLDOTS exp .)
    RSQUARE         reduce using rule 69 (exp -> exp DBLDOTS exp .)
    return          reduce using rule 69 (exp -> exp DBLDOTS exp .)
    break           reduce using rule 69 (exp -> exp DBLDOTS exp .)
    while           reduce using rule 69 (exp -> exp DBLDOTS exp .)
    repeat          reduce using rule 69 (exp -> exp DBLDOTS exp .)
    if              reduce using rule 69 (exp -> exp DBLDOTS exp .)
    for             reduce using rule 69 (exp -> exp DBLDOTS exp .)
    local           reduce using rule 69 (exp -> exp DBLDOTS exp .)
    function        reduce using rule 69 (exp -> exp DBLDOTS exp .)
    ID              reduce using rule 69 (exp -> exp DBLDOTS exp .)
    RESID           reduce using rule 69 (exp -> exp DBLDOTS exp .)
    LPAREN          reduce using rule 69 (exp -> exp DBLDOTS exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81

  ! PLUS            [ reduce using rule 69 (exp -> exp DBLDOTS exp .) ]
  ! MINUS           [ reduce using rule 69 (exp -> exp DBLDOTS exp .) ]
  ! TIMES           [ reduce using rule 69 (exp -> exp DBLDOTS exp .) ]
  ! DIVIDE          [ reduce using rule 69 (exp -> exp DBLDOTS exp .) ]
  ! POWER           [ reduce using rule 69 (exp -> exp DBLDOTS exp .) ]
  ! MODULO          [ reduce using rule 69 (exp -> exp DBLDOTS exp .) ]
  ! DBLDOTS         [ reduce using rule 69 (exp -> exp DBLDOTS exp .) ]
  ! LT              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 74 ]
  ! NE              [ shift and go to state 83 ]
  ! CHECKEQ         [ shift and go to state 76 ]
  ! and             [ shift and go to state 69 ]
  ! or              [ shift and go to state 73 ]


state 124

    (56) exp -> exp MINUS exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    PLUS            reduce using rule 56 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 56 (exp -> exp MINUS exp .)
    LT              reduce using rule 56 (exp -> exp MINUS exp .)
    LE              reduce using rule 56 (exp -> exp MINUS exp .)
    GT              reduce using rule 56 (exp -> exp MINUS exp .)
    GE              reduce using rule 56 (exp -> exp MINUS exp .)
    NE              reduce using rule 56 (exp -> exp MINUS exp .)
    CHECKEQ         reduce using rule 56 (exp -> exp MINUS exp .)
    and             reduce using rule 56 (exp -> exp MINUS exp .)
    or              reduce using rule 56 (exp -> exp MINUS exp .)
    DBLDOTS         reduce using rule 56 (exp -> exp MINUS exp .)
    do              reduce using rule 56 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 56 (exp -> exp MINUS exp .)
    SEMI            reduce using rule 56 (exp -> exp MINUS exp .)
    RCURLY          reduce using rule 56 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 56 (exp -> exp MINUS exp .)
    then            reduce using rule 56 (exp -> exp MINUS exp .)
    $end            reduce using rule 56 (exp -> exp MINUS exp .)
    end             reduce using rule 56 (exp -> exp MINUS exp .)
    until           reduce using rule 56 (exp -> exp MINUS exp .)
    else            reduce using rule 56 (exp -> exp MINUS exp .)
    elseif          reduce using rule 56 (exp -> exp MINUS exp .)
    RSQUARE         reduce using rule 56 (exp -> exp MINUS exp .)
    return          reduce using rule 56 (exp -> exp MINUS exp .)
    break           reduce using rule 56 (exp -> exp MINUS exp .)
    while           reduce using rule 56 (exp -> exp MINUS exp .)
    repeat          reduce using rule 56 (exp -> exp MINUS exp .)
    if              reduce using rule 56 (exp -> exp MINUS exp .)
    for             reduce using rule 56 (exp -> exp MINUS exp .)
    local           reduce using rule 56 (exp -> exp MINUS exp .)
    function        reduce using rule 56 (exp -> exp MINUS exp .)
    ID              reduce using rule 56 (exp -> exp MINUS exp .)
    RESID           reduce using rule 56 (exp -> exp MINUS exp .)
    LPAREN          reduce using rule 56 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    MODULO          shift and go to state 80

  ! TIMES           [ reduce using rule 56 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 56 (exp -> exp MINUS exp .) ]
  ! POWER           [ reduce using rule 56 (exp -> exp MINUS exp .) ]
  ! MODULO          [ reduce using rule 56 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 82 ]
  ! LT              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 74 ]
  ! NE              [ shift and go to state 83 ]
  ! CHECKEQ         [ shift and go to state 76 ]
  ! and             [ shift and go to state 69 ]
  ! or              [ shift and go to state 73 ]
  ! DBLDOTS         [ shift and go to state 81 ]


state 125

    (64) exp -> exp NE exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    LT              reduce using rule 64 (exp -> exp NE exp .)
    LE              reduce using rule 64 (exp -> exp NE exp .)
    GT              reduce using rule 64 (exp -> exp NE exp .)
    GE              reduce using rule 64 (exp -> exp NE exp .)
    NE              reduce using rule 64 (exp -> exp NE exp .)
    CHECKEQ         reduce using rule 64 (exp -> exp NE exp .)
    and             reduce using rule 64 (exp -> exp NE exp .)
    or              reduce using rule 64 (exp -> exp NE exp .)
    do              reduce using rule 64 (exp -> exp NE exp .)
    COMMA           reduce using rule 64 (exp -> exp NE exp .)
    SEMI            reduce using rule 64 (exp -> exp NE exp .)
    RCURLY          reduce using rule 64 (exp -> exp NE exp .)
    RPAREN          reduce using rule 64 (exp -> exp NE exp .)
    then            reduce using rule 64 (exp -> exp NE exp .)
    $end            reduce using rule 64 (exp -> exp NE exp .)
    end             reduce using rule 64 (exp -> exp NE exp .)
    until           reduce using rule 64 (exp -> exp NE exp .)
    else            reduce using rule 64 (exp -> exp NE exp .)
    elseif          reduce using rule 64 (exp -> exp NE exp .)
    RSQUARE         reduce using rule 64 (exp -> exp NE exp .)
    return          reduce using rule 64 (exp -> exp NE exp .)
    break           reduce using rule 64 (exp -> exp NE exp .)
    while           reduce using rule 64 (exp -> exp NE exp .)
    repeat          reduce using rule 64 (exp -> exp NE exp .)
    if              reduce using rule 64 (exp -> exp NE exp .)
    for             reduce using rule 64 (exp -> exp NE exp .)
    local           reduce using rule 64 (exp -> exp NE exp .)
    function        reduce using rule 64 (exp -> exp NE exp .)
    ID              reduce using rule 64 (exp -> exp NE exp .)
    RESID           reduce using rule 64 (exp -> exp NE exp .)
    LPAREN          reduce using rule 64 (exp -> exp NE exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81

  ! PLUS            [ reduce using rule 64 (exp -> exp NE exp .) ]
  ! MINUS           [ reduce using rule 64 (exp -> exp NE exp .) ]
  ! TIMES           [ reduce using rule 64 (exp -> exp NE exp .) ]
  ! DIVIDE          [ reduce using rule 64 (exp -> exp NE exp .) ]
  ! POWER           [ reduce using rule 64 (exp -> exp NE exp .) ]
  ! MODULO          [ reduce using rule 64 (exp -> exp NE exp .) ]
  ! DBLDOTS         [ reduce using rule 64 (exp -> exp NE exp .) ]
  ! LT              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 74 ]
  ! NE              [ shift and go to state 83 ]
  ! CHECKEQ         [ shift and go to state 76 ]
  ! and             [ shift and go to state 69 ]
  ! or              [ shift and go to state 73 ]


state 126

    (58) exp -> exp DIVIDE exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    PLUS            reduce using rule 58 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 58 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 58 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 58 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 58 (exp -> exp DIVIDE exp .)
    LE              reduce using rule 58 (exp -> exp DIVIDE exp .)
    GT              reduce using rule 58 (exp -> exp DIVIDE exp .)
    GE              reduce using rule 58 (exp -> exp DIVIDE exp .)
    NE              reduce using rule 58 (exp -> exp DIVIDE exp .)
    CHECKEQ         reduce using rule 58 (exp -> exp DIVIDE exp .)
    and             reduce using rule 58 (exp -> exp DIVIDE exp .)
    or              reduce using rule 58 (exp -> exp DIVIDE exp .)
    MODULO          reduce using rule 58 (exp -> exp DIVIDE exp .)
    DBLDOTS         reduce using rule 58 (exp -> exp DIVIDE exp .)
    do              reduce using rule 58 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 58 (exp -> exp DIVIDE exp .)
    SEMI            reduce using rule 58 (exp -> exp DIVIDE exp .)
    RCURLY          reduce using rule 58 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 58 (exp -> exp DIVIDE exp .)
    then            reduce using rule 58 (exp -> exp DIVIDE exp .)
    $end            reduce using rule 58 (exp -> exp DIVIDE exp .)
    end             reduce using rule 58 (exp -> exp DIVIDE exp .)
    until           reduce using rule 58 (exp -> exp DIVIDE exp .)
    else            reduce using rule 58 (exp -> exp DIVIDE exp .)
    elseif          reduce using rule 58 (exp -> exp DIVIDE exp .)
    RSQUARE         reduce using rule 58 (exp -> exp DIVIDE exp .)
    return          reduce using rule 58 (exp -> exp DIVIDE exp .)
    break           reduce using rule 58 (exp -> exp DIVIDE exp .)
    while           reduce using rule 58 (exp -> exp DIVIDE exp .)
    repeat          reduce using rule 58 (exp -> exp DIVIDE exp .)
    if              reduce using rule 58 (exp -> exp DIVIDE exp .)
    for             reduce using rule 58 (exp -> exp DIVIDE exp .)
    local           reduce using rule 58 (exp -> exp DIVIDE exp .)
    function        reduce using rule 58 (exp -> exp DIVIDE exp .)
    ID              reduce using rule 58 (exp -> exp DIVIDE exp .)
    RESID           reduce using rule 58 (exp -> exp DIVIDE exp .)
    LPAREN          reduce using rule 58 (exp -> exp DIVIDE exp .)
    POWER           shift and go to state 72

  ! POWER           [ reduce using rule 58 (exp -> exp DIVIDE exp .) ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 82 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! LT              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 74 ]
  ! NE              [ shift and go to state 83 ]
  ! CHECKEQ         [ shift and go to state 76 ]
  ! and             [ shift and go to state 69 ]
  ! or              [ shift and go to state 73 ]
  ! MODULO          [ shift and go to state 80 ]
  ! DBLDOTS         [ shift and go to state 81 ]


state 127

    (12) stat -> if exp then block . ifblock else block end
    (13) stat -> if exp then block . ifblock end
    (38) ifblock -> . ifblock elseif exp then block
    (39) ifblock -> . empty
    (75) empty -> .

    else            reduce using rule 75 (empty -> .)
    end             reduce using rule 75 (empty -> .)
    elseif          reduce using rule 75 (empty -> .)

    empty                          shift and go to state 149
    ifblock                        shift and go to state 150

state 128

    (42) var -> prefixexp LSQUARE exp RSQUARE .

    LSQUARE         reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    SDOT            reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    PLUS            reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    MINUS           reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    TIMES           reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    DIVIDE          reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    POWER           reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    LT              reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    LE              reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    GT              reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    GE              reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    NE              reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    CHECKEQ         reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    and             reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    or              reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    MODULO          reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    DBLDOTS         reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    RPAREN          reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    then            reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    COMMA           reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    SEMI            reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    $end            reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    end             reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    until           reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    else            reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    elseif          reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    do              reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    RCURLY          reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    RSQUARE         reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    return          reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    break           reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    while           reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    repeat          reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    if              reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    for             reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    local           reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    function        reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    ID              reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    RESID           reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    LPAREN          reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)
    EQUALS          reduce using rule 42 (var -> prefixexp LSQUARE exp RSQUARE .)


state 129

    (16) stat -> for namelist in explist . do block end
    (45) explist -> explist . COMMA exp

    do              shift and go to state 151
    COMMA           shift and go to state 105


state 130

    (14) stat -> for names EQUALS exp . COMMA exp do block end
    (15) stat -> for names EQUALS exp . COMMA exp COMMA exp do block end
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    COMMA           shift and go to state 152
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    LT              shift and go to state 77
    LE              shift and go to state 70
    GT              shift and go to state 78
    GE              shift and go to state 74
    NE              shift and go to state 83
    CHECKEQ         shift and go to state 76
    and             shift and go to state 69
    or              shift and go to state 73
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81


state 131

    (36) comid -> COMMA names . comid
    (36) comid -> . COMMA names comid
    (37) comid -> . empty
    (75) empty -> .

    COMMA           shift and go to state 92
    in              reduce using rule 75 (empty -> .)
    EQUALS          reduce using rule 75 (empty -> .)
    SEMI            reduce using rule 75 (empty -> .)
    return          reduce using rule 75 (empty -> .)
    break           reduce using rule 75 (empty -> .)
    do              reduce using rule 75 (empty -> .)
    while           reduce using rule 75 (empty -> .)
    repeat          reduce using rule 75 (empty -> .)
    if              reduce using rule 75 (empty -> .)
    for             reduce using rule 75 (empty -> .)
    local           reduce using rule 75 (empty -> .)
    function        reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    RESID           reduce using rule 75 (empty -> .)
    LPAREN          reduce using rule 75 (empty -> .)
    $end            reduce using rule 75 (empty -> .)
    end             reduce using rule 75 (empty -> .)
    until           reduce using rule 75 (empty -> .)
    else            reduce using rule 75 (empty -> .)
    elseif          reduce using rule 75 (empty -> .)
    RPAREN          reduce using rule 75 (empty -> .)

  ! COMMA           [ reduce using rule 75 (empty -> .) ]

    empty                          shift and go to state 91
    comid                          shift and go to state 153

state 132

    (34) comvar -> COMMA var comvar .

    EQUALS          reduce using rule 34 (comvar -> COMMA var comvar .)


state 133

    (20) stat -> local function names funcbody .

    SEMI            reduce using rule 20 (stat -> local function names funcbody .)
    return          reduce using rule 20 (stat -> local function names funcbody .)
    break           reduce using rule 20 (stat -> local function names funcbody .)
    do              reduce using rule 20 (stat -> local function names funcbody .)
    while           reduce using rule 20 (stat -> local function names funcbody .)
    repeat          reduce using rule 20 (stat -> local function names funcbody .)
    if              reduce using rule 20 (stat -> local function names funcbody .)
    for             reduce using rule 20 (stat -> local function names funcbody .)
    local           reduce using rule 20 (stat -> local function names funcbody .)
    function        reduce using rule 20 (stat -> local function names funcbody .)
    ID              reduce using rule 20 (stat -> local function names funcbody .)
    RESID           reduce using rule 20 (stat -> local function names funcbody .)
    LPAREN          reduce using rule 20 (stat -> local function names funcbody .)
    $end            reduce using rule 20 (stat -> local function names funcbody .)
    end             reduce using rule 20 (stat -> local function names funcbody .)
    until           reduce using rule 20 (stat -> local function names funcbody .)
    else            reduce using rule 20 (stat -> local function names funcbody .)
    elseif          reduce using rule 20 (stat -> local function names funcbody .)


state 134

    (18) stat -> local namelist EQUALS explist .
    (45) explist -> explist . COMMA exp

    SEMI            reduce using rule 18 (stat -> local namelist EQUALS explist .)
    return          reduce using rule 18 (stat -> local namelist EQUALS explist .)
    break           reduce using rule 18 (stat -> local namelist EQUALS explist .)
    do              reduce using rule 18 (stat -> local namelist EQUALS explist .)
    while           reduce using rule 18 (stat -> local namelist EQUALS explist .)
    repeat          reduce using rule 18 (stat -> local namelist EQUALS explist .)
    if              reduce using rule 18 (stat -> local namelist EQUALS explist .)
    for             reduce using rule 18 (stat -> local namelist EQUALS explist .)
    local           reduce using rule 18 (stat -> local namelist EQUALS explist .)
    function        reduce using rule 18 (stat -> local namelist EQUALS explist .)
    ID              reduce using rule 18 (stat -> local namelist EQUALS explist .)
    RESID           reduce using rule 18 (stat -> local namelist EQUALS explist .)
    LPAREN          reduce using rule 18 (stat -> local namelist EQUALS explist .)
    $end            reduce using rule 18 (stat -> local namelist EQUALS explist .)
    end             reduce using rule 18 (stat -> local namelist EQUALS explist .)
    until           reduce using rule 18 (stat -> local namelist EQUALS explist .)
    else            reduce using rule 18 (stat -> local namelist EQUALS explist .)
    elseif          reduce using rule 18 (stat -> local namelist EQUALS explist .)
    COMMA           shift and go to state 105


state 135

    (23) parlist -> namelist .
    (24) parlist -> namelist . comtrp
    (26) comtrp -> . COMMA TRPLDOTS

    RPAREN          reduce using rule 23 (parlist -> namelist .)
    COMMA           shift and go to state 154

    comtrp                         shift and go to state 155

state 136

    (25) parlist -> TRPLDOTS .

    RPAREN          reduce using rule 25 (parlist -> TRPLDOTS .)


state 137

    (22) funcbody -> LPAREN parlist . RPAREN block end

    RPAREN          shift and go to state 156


state 138

    (21) funcbody -> LPAREN RPAREN . block end
    (7) block -> . sdash
    (1) sdash -> . chunk
    (2) sdash -> . chunk laststat
    (3) sdash -> . chunk laststat SEMI
    (4) chunk -> . chunk stat
    (5) chunk -> . chunk stat SEMI
    (6) chunk -> . empty
    (75) empty -> .

    return          reduce using rule 75 (empty -> .)
    break           reduce using rule 75 (empty -> .)
    do              reduce using rule 75 (empty -> .)
    while           reduce using rule 75 (empty -> .)
    repeat          reduce using rule 75 (empty -> .)
    if              reduce using rule 75 (empty -> .)
    for             reduce using rule 75 (empty -> .)
    local           reduce using rule 75 (empty -> .)
    function        reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    RESID           reduce using rule 75 (empty -> .)
    LPAREN          reduce using rule 75 (empty -> .)
    end             reduce using rule 75 (empty -> .)

    chunk                          shift and go to state 1
    empty                          shift and go to state 3
    block                          shift and go to state 157
    sdash                          shift and go to state 57

state 139

    (32) dotid -> SDOT names . dotid
    (32) dotid -> . SDOT names dotid
    (33) dotid -> . empty
    (75) empty -> .

    SDOT            shift and go to state 100
    COLON           reduce using rule 75 (empty -> .)
    LPAREN          reduce using rule 75 (empty -> .)

    dotid                          shift and go to state 158
    empty                          shift and go to state 102

state 140

    (30) funcname -> names dotid COLON .

    LPAREN          reduce using rule 30 (funcname -> names dotid COLON .)


state 141

    (11) stat -> repeat block until exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    SEMI            reduce using rule 11 (stat -> repeat block until exp .)
    return          reduce using rule 11 (stat -> repeat block until exp .)
    break           reduce using rule 11 (stat -> repeat block until exp .)
    do              reduce using rule 11 (stat -> repeat block until exp .)
    while           reduce using rule 11 (stat -> repeat block until exp .)
    repeat          reduce using rule 11 (stat -> repeat block until exp .)
    if              reduce using rule 11 (stat -> repeat block until exp .)
    for             reduce using rule 11 (stat -> repeat block until exp .)
    local           reduce using rule 11 (stat -> repeat block until exp .)
    function        reduce using rule 11 (stat -> repeat block until exp .)
    ID              reduce using rule 11 (stat -> repeat block until exp .)
    RESID           reduce using rule 11 (stat -> repeat block until exp .)
    LPAREN          reduce using rule 11 (stat -> repeat block until exp .)
    $end            reduce using rule 11 (stat -> repeat block until exp .)
    end             reduce using rule 11 (stat -> repeat block until exp .)
    until           reduce using rule 11 (stat -> repeat block until exp .)
    else            reduce using rule 11 (stat -> repeat block until exp .)
    elseif          reduce using rule 11 (stat -> repeat block until exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    LT              shift and go to state 77
    LE              shift and go to state 70
    GT              shift and go to state 78
    GE              shift and go to state 74
    NE              shift and go to state 83
    CHECKEQ         shift and go to state 76
    and             shift and go to state 69
    or              shift and go to state 73
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81


state 142

    (45) explist -> explist COMMA exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    COMMA           reduce using rule 45 (explist -> explist COMMA exp .)
    SEMI            reduce using rule 45 (explist -> explist COMMA exp .)
    $end            reduce using rule 45 (explist -> explist COMMA exp .)
    end             reduce using rule 45 (explist -> explist COMMA exp .)
    until           reduce using rule 45 (explist -> explist COMMA exp .)
    else            reduce using rule 45 (explist -> explist COMMA exp .)
    elseif          reduce using rule 45 (explist -> explist COMMA exp .)
    return          reduce using rule 45 (explist -> explist COMMA exp .)
    break           reduce using rule 45 (explist -> explist COMMA exp .)
    do              reduce using rule 45 (explist -> explist COMMA exp .)
    while           reduce using rule 45 (explist -> explist COMMA exp .)
    repeat          reduce using rule 45 (explist -> explist COMMA exp .)
    if              reduce using rule 45 (explist -> explist COMMA exp .)
    for             reduce using rule 45 (explist -> explist COMMA exp .)
    local           reduce using rule 45 (explist -> explist COMMA exp .)
    function        reduce using rule 45 (explist -> explist COMMA exp .)
    ID              reduce using rule 45 (explist -> explist COMMA exp .)
    RESID           reduce using rule 45 (explist -> explist COMMA exp .)
    LPAREN          reduce using rule 45 (explist -> explist COMMA exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    LT              shift and go to state 77
    LE              shift and go to state 70
    GT              shift and go to state 78
    GE              shift and go to state 74
    NE              shift and go to state 83
    CHECKEQ         shift and go to state 76
    and             shift and go to state 69
    or              shift and go to state 73
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81


state 143

    (10) stat -> while exp do block . end

    end             shift and go to state 159


state 144

    (88) field -> names EQUALS exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    COMMA           reduce using rule 88 (field -> names EQUALS exp .)
    SEMI            reduce using rule 88 (field -> names EQUALS exp .)
    RCURLY          reduce using rule 88 (field -> names EQUALS exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    LT              shift and go to state 77
    LE              shift and go to state 70
    GT              shift and go to state 78
    GE              shift and go to state 74
    NE              shift and go to state 83
    CHECKEQ         shift and go to state 76
    and             shift and go to state 69
    or              shift and go to state 73
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81


state 145

    (83) fieldlist -> field fieldseplist fieldsep .
    (85) fieldseplist -> fieldseplist fieldsep . field
    (87) field -> . LSQUARE exp RSQUARE EQUALS exp
    (88) field -> . names EQUALS exp
    (89) field -> . exp
    (92) names -> . ID
    (93) names -> . RESID
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names

    RCURLY          reduce using rule 83 (fieldlist -> field fieldseplist fieldsep .)
    LSQUARE         shift and go to state 68
    ID              shift and go to state 20
    RESID           shift and go to state 4
    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    field                          shift and go to state 160
    unop                           shift and go to state 39
    names                          shift and go to state 63
    exp                            shift and go to state 67
    var                            shift and go to state 29

state 146

    (90) fieldsep -> COMMA .

    LSQUARE         reduce using rule 90 (fieldsep -> COMMA .)
    ID              reduce using rule 90 (fieldsep -> COMMA .)
    RESID           reduce using rule 90 (fieldsep -> COMMA .)
    nil             reduce using rule 90 (fieldsep -> COMMA .)
    false           reduce using rule 90 (fieldsep -> COMMA .)
    true            reduce using rule 90 (fieldsep -> COMMA .)
    STRING          reduce using rule 90 (fieldsep -> COMMA .)
    TRPLDOTS        reduce using rule 90 (fieldsep -> COMMA .)
    function        reduce using rule 90 (fieldsep -> COMMA .)
    INTEGER         reduce using rule 90 (fieldsep -> COMMA .)
    FLOAT           reduce using rule 90 (fieldsep -> COMMA .)
    HEX             reduce using rule 90 (fieldsep -> COMMA .)
    LPAREN          reduce using rule 90 (fieldsep -> COMMA .)
    LCURLY          reduce using rule 90 (fieldsep -> COMMA .)
    MINUS           reduce using rule 90 (fieldsep -> COMMA .)
    not             reduce using rule 90 (fieldsep -> COMMA .)
    HASH            reduce using rule 90 (fieldsep -> COMMA .)
    RCURLY          reduce using rule 90 (fieldsep -> COMMA .)


state 147

    (91) fieldsep -> SEMI .

    LSQUARE         reduce using rule 91 (fieldsep -> SEMI .)
    ID              reduce using rule 91 (fieldsep -> SEMI .)
    RESID           reduce using rule 91 (fieldsep -> SEMI .)
    nil             reduce using rule 91 (fieldsep -> SEMI .)
    false           reduce using rule 91 (fieldsep -> SEMI .)
    true            reduce using rule 91 (fieldsep -> SEMI .)
    STRING          reduce using rule 91 (fieldsep -> SEMI .)
    TRPLDOTS        reduce using rule 91 (fieldsep -> SEMI .)
    function        reduce using rule 91 (fieldsep -> SEMI .)
    INTEGER         reduce using rule 91 (fieldsep -> SEMI .)
    FLOAT           reduce using rule 91 (fieldsep -> SEMI .)
    HEX             reduce using rule 91 (fieldsep -> SEMI .)
    LPAREN          reduce using rule 91 (fieldsep -> SEMI .)
    LCURLY          reduce using rule 91 (fieldsep -> SEMI .)
    MINUS           reduce using rule 91 (fieldsep -> SEMI .)
    not             reduce using rule 91 (fieldsep -> SEMI .)
    HASH            reduce using rule 91 (fieldsep -> SEMI .)
    RCURLY          reduce using rule 91 (fieldsep -> SEMI .)


state 148

    (87) field -> LSQUARE exp RSQUARE . EQUALS exp

    EQUALS          shift and go to state 161


state 149

    (39) ifblock -> empty .

    else            reduce using rule 39 (ifblock -> empty .)
    end             reduce using rule 39 (ifblock -> empty .)
    elseif          reduce using rule 39 (ifblock -> empty .)


state 150

    (12) stat -> if exp then block ifblock . else block end
    (13) stat -> if exp then block ifblock . end
    (38) ifblock -> ifblock . elseif exp then block

    else            shift and go to state 163
    end             shift and go to state 162
    elseif          shift and go to state 164


state 151

    (16) stat -> for namelist in explist do . block end
    (7) block -> . sdash
    (1) sdash -> . chunk
    (2) sdash -> . chunk laststat
    (3) sdash -> . chunk laststat SEMI
    (4) chunk -> . chunk stat
    (5) chunk -> . chunk stat SEMI
    (6) chunk -> . empty
    (75) empty -> .

    return          reduce using rule 75 (empty -> .)
    break           reduce using rule 75 (empty -> .)
    do              reduce using rule 75 (empty -> .)
    while           reduce using rule 75 (empty -> .)
    repeat          reduce using rule 75 (empty -> .)
    if              reduce using rule 75 (empty -> .)
    for             reduce using rule 75 (empty -> .)
    local           reduce using rule 75 (empty -> .)
    function        reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    RESID           reduce using rule 75 (empty -> .)
    LPAREN          reduce using rule 75 (empty -> .)
    end             reduce using rule 75 (empty -> .)

    chunk                          shift and go to state 1
    empty                          shift and go to state 3
    block                          shift and go to state 165
    sdash                          shift and go to state 57

state 152

    (14) stat -> for names EQUALS exp COMMA . exp do block end
    (15) stat -> for names EQUALS exp COMMA . exp COMMA exp do block end
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    names                          shift and go to state 6
    exp                            shift and go to state 166
    var                            shift and go to state 29

state 153

    (36) comid -> COMMA names comid .

    in              reduce using rule 36 (comid -> COMMA names comid .)
    EQUALS          reduce using rule 36 (comid -> COMMA names comid .)
    SEMI            reduce using rule 36 (comid -> COMMA names comid .)
    return          reduce using rule 36 (comid -> COMMA names comid .)
    break           reduce using rule 36 (comid -> COMMA names comid .)
    do              reduce using rule 36 (comid -> COMMA names comid .)
    while           reduce using rule 36 (comid -> COMMA names comid .)
    repeat          reduce using rule 36 (comid -> COMMA names comid .)
    if              reduce using rule 36 (comid -> COMMA names comid .)
    for             reduce using rule 36 (comid -> COMMA names comid .)
    local           reduce using rule 36 (comid -> COMMA names comid .)
    function        reduce using rule 36 (comid -> COMMA names comid .)
    ID              reduce using rule 36 (comid -> COMMA names comid .)
    RESID           reduce using rule 36 (comid -> COMMA names comid .)
    LPAREN          reduce using rule 36 (comid -> COMMA names comid .)
    $end            reduce using rule 36 (comid -> COMMA names comid .)
    end             reduce using rule 36 (comid -> COMMA names comid .)
    until           reduce using rule 36 (comid -> COMMA names comid .)
    else            reduce using rule 36 (comid -> COMMA names comid .)
    elseif          reduce using rule 36 (comid -> COMMA names comid .)
    COMMA           reduce using rule 36 (comid -> COMMA names comid .)
    RPAREN          reduce using rule 36 (comid -> COMMA names comid .)


state 154

    (26) comtrp -> COMMA . TRPLDOTS

    TRPLDOTS        shift and go to state 167


state 155

    (24) parlist -> namelist comtrp .

    RPAREN          reduce using rule 24 (parlist -> namelist comtrp .)


state 156

    (22) funcbody -> LPAREN parlist RPAREN . block end
    (7) block -> . sdash
    (1) sdash -> . chunk
    (2) sdash -> . chunk laststat
    (3) sdash -> . chunk laststat SEMI
    (4) chunk -> . chunk stat
    (5) chunk -> . chunk stat SEMI
    (6) chunk -> . empty
    (75) empty -> .

    return          reduce using rule 75 (empty -> .)
    break           reduce using rule 75 (empty -> .)
    do              reduce using rule 75 (empty -> .)
    while           reduce using rule 75 (empty -> .)
    repeat          reduce using rule 75 (empty -> .)
    if              reduce using rule 75 (empty -> .)
    for             reduce using rule 75 (empty -> .)
    local           reduce using rule 75 (empty -> .)
    function        reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    RESID           reduce using rule 75 (empty -> .)
    LPAREN          reduce using rule 75 (empty -> .)
    end             reduce using rule 75 (empty -> .)

    chunk                          shift and go to state 1
    empty                          shift and go to state 3
    sdash                          shift and go to state 57
    block                          shift and go to state 168

state 157

    (21) funcbody -> LPAREN RPAREN block . end

    end             shift and go to state 169


state 158

    (32) dotid -> SDOT names dotid .

    COLON           reduce using rule 32 (dotid -> SDOT names dotid .)
    LPAREN          reduce using rule 32 (dotid -> SDOT names dotid .)


state 159

    (10) stat -> while exp do block end .

    SEMI            reduce using rule 10 (stat -> while exp do block end .)
    return          reduce using rule 10 (stat -> while exp do block end .)
    break           reduce using rule 10 (stat -> while exp do block end .)
    do              reduce using rule 10 (stat -> while exp do block end .)
    while           reduce using rule 10 (stat -> while exp do block end .)
    repeat          reduce using rule 10 (stat -> while exp do block end .)
    if              reduce using rule 10 (stat -> while exp do block end .)
    for             reduce using rule 10 (stat -> while exp do block end .)
    local           reduce using rule 10 (stat -> while exp do block end .)
    function        reduce using rule 10 (stat -> while exp do block end .)
    ID              reduce using rule 10 (stat -> while exp do block end .)
    RESID           reduce using rule 10 (stat -> while exp do block end .)
    LPAREN          reduce using rule 10 (stat -> while exp do block end .)
    $end            reduce using rule 10 (stat -> while exp do block end .)
    end             reduce using rule 10 (stat -> while exp do block end .)
    until           reduce using rule 10 (stat -> while exp do block end .)
    else            reduce using rule 10 (stat -> while exp do block end .)
    elseif          reduce using rule 10 (stat -> while exp do block end .)


state 160

    (85) fieldseplist -> fieldseplist fieldsep field .

    COMMA           reduce using rule 85 (fieldseplist -> fieldseplist fieldsep field .)
    SEMI            reduce using rule 85 (fieldseplist -> fieldseplist fieldsep field .)
    RCURLY          reduce using rule 85 (fieldseplist -> fieldseplist fieldsep field .)


state 161

    (87) field -> LSQUARE exp RSQUARE EQUALS . exp
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 170
    var                            shift and go to state 29
    names                          shift and go to state 6

state 162

    (13) stat -> if exp then block ifblock end .

    SEMI            reduce using rule 13 (stat -> if exp then block ifblock end .)
    return          reduce using rule 13 (stat -> if exp then block ifblock end .)
    break           reduce using rule 13 (stat -> if exp then block ifblock end .)
    do              reduce using rule 13 (stat -> if exp then block ifblock end .)
    while           reduce using rule 13 (stat -> if exp then block ifblock end .)
    repeat          reduce using rule 13 (stat -> if exp then block ifblock end .)
    if              reduce using rule 13 (stat -> if exp then block ifblock end .)
    for             reduce using rule 13 (stat -> if exp then block ifblock end .)
    local           reduce using rule 13 (stat -> if exp then block ifblock end .)
    function        reduce using rule 13 (stat -> if exp then block ifblock end .)
    ID              reduce using rule 13 (stat -> if exp then block ifblock end .)
    RESID           reduce using rule 13 (stat -> if exp then block ifblock end .)
    LPAREN          reduce using rule 13 (stat -> if exp then block ifblock end .)
    $end            reduce using rule 13 (stat -> if exp then block ifblock end .)
    end             reduce using rule 13 (stat -> if exp then block ifblock end .)
    until           reduce using rule 13 (stat -> if exp then block ifblock end .)
    else            reduce using rule 13 (stat -> if exp then block ifblock end .)
    elseif          reduce using rule 13 (stat -> if exp then block ifblock end .)


state 163

    (12) stat -> if exp then block ifblock else . block end
    (7) block -> . sdash
    (1) sdash -> . chunk
    (2) sdash -> . chunk laststat
    (3) sdash -> . chunk laststat SEMI
    (4) chunk -> . chunk stat
    (5) chunk -> . chunk stat SEMI
    (6) chunk -> . empty
    (75) empty -> .

    return          reduce using rule 75 (empty -> .)
    break           reduce using rule 75 (empty -> .)
    do              reduce using rule 75 (empty -> .)
    while           reduce using rule 75 (empty -> .)
    repeat          reduce using rule 75 (empty -> .)
    if              reduce using rule 75 (empty -> .)
    for             reduce using rule 75 (empty -> .)
    local           reduce using rule 75 (empty -> .)
    function        reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    RESID           reduce using rule 75 (empty -> .)
    LPAREN          reduce using rule 75 (empty -> .)
    end             reduce using rule 75 (empty -> .)

    chunk                          shift and go to state 1
    empty                          shift and go to state 3
    block                          shift and go to state 171
    sdash                          shift and go to state 57

state 164

    (38) ifblock -> ifblock elseif . exp then block
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    exp                            shift and go to state 172
    var                            shift and go to state 29
    names                          shift and go to state 6

state 165

    (16) stat -> for namelist in explist do block . end

    end             shift and go to state 173


state 166

    (14) stat -> for names EQUALS exp COMMA exp . do block end
    (15) stat -> for names EQUALS exp COMMA exp . COMMA exp do block end
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    do              shift and go to state 175
    COMMA           shift and go to state 174
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    LT              shift and go to state 77
    LE              shift and go to state 70
    GT              shift and go to state 78
    GE              shift and go to state 74
    NE              shift and go to state 83
    CHECKEQ         shift and go to state 76
    and             shift and go to state 69
    or              shift and go to state 73
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81


state 167

    (26) comtrp -> COMMA TRPLDOTS .

    RPAREN          reduce using rule 26 (comtrp -> COMMA TRPLDOTS .)


state 168

    (22) funcbody -> LPAREN parlist RPAREN block . end

    end             shift and go to state 176


state 169

    (21) funcbody -> LPAREN RPAREN block end .

    SEMI            reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)
    return          reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)
    break           reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)
    do              reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)
    while           reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)
    repeat          reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)
    if              reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)
    for             reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)
    local           reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)
    function        reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)
    ID              reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)
    RESID           reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)
    LPAREN          reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)
    $end            reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)
    end             reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)
    until           reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)
    else            reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)
    elseif          reduce using rule 21 (funcbody -> LPAREN RPAREN block end .)


state 170

    (87) field -> LSQUARE exp RSQUARE EQUALS exp .
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    COMMA           reduce using rule 87 (field -> LSQUARE exp RSQUARE EQUALS exp .)
    SEMI            reduce using rule 87 (field -> LSQUARE exp RSQUARE EQUALS exp .)
    RCURLY          reduce using rule 87 (field -> LSQUARE exp RSQUARE EQUALS exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    LT              shift and go to state 77
    LE              shift and go to state 70
    GT              shift and go to state 78
    GE              shift and go to state 74
    NE              shift and go to state 83
    CHECKEQ         shift and go to state 76
    and             shift and go to state 69
    or              shift and go to state 73
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81


state 171

    (12) stat -> if exp then block ifblock else block . end

    end             shift and go to state 177


state 172

    (38) ifblock -> ifblock elseif exp . then block
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    then            shift and go to state 178
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    LT              shift and go to state 77
    LE              shift and go to state 70
    GT              shift and go to state 78
    GE              shift and go to state 74
    NE              shift and go to state 83
    CHECKEQ         shift and go to state 76
    and             shift and go to state 69
    or              shift and go to state 73
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81


state 173

    (16) stat -> for namelist in explist do block end .

    SEMI            reduce using rule 16 (stat -> for namelist in explist do block end .)
    return          reduce using rule 16 (stat -> for namelist in explist do block end .)
    break           reduce using rule 16 (stat -> for namelist in explist do block end .)
    do              reduce using rule 16 (stat -> for namelist in explist do block end .)
    while           reduce using rule 16 (stat -> for namelist in explist do block end .)
    repeat          reduce using rule 16 (stat -> for namelist in explist do block end .)
    if              reduce using rule 16 (stat -> for namelist in explist do block end .)
    for             reduce using rule 16 (stat -> for namelist in explist do block end .)
    local           reduce using rule 16 (stat -> for namelist in explist do block end .)
    function        reduce using rule 16 (stat -> for namelist in explist do block end .)
    ID              reduce using rule 16 (stat -> for namelist in explist do block end .)
    RESID           reduce using rule 16 (stat -> for namelist in explist do block end .)
    LPAREN          reduce using rule 16 (stat -> for namelist in explist do block end .)
    $end            reduce using rule 16 (stat -> for namelist in explist do block end .)
    end             reduce using rule 16 (stat -> for namelist in explist do block end .)
    until           reduce using rule 16 (stat -> for namelist in explist do block end .)
    else            reduce using rule 16 (stat -> for namelist in explist do block end .)
    elseif          reduce using rule 16 (stat -> for namelist in explist do block end .)


state 174

    (15) stat -> for names EQUALS exp COMMA exp COMMA . exp do block end
    (47) exp -> . nil
    (48) exp -> . false
    (49) exp -> . true
    (50) exp -> . Number
    (51) exp -> . STRING
    (52) exp -> . TRPLDOTS
    (53) exp -> . function
    (54) exp -> . prefixexp
    (55) exp -> . exp PLUS exp
    (56) exp -> . exp MINUS exp
    (57) exp -> . exp TIMES exp
    (58) exp -> . exp DIVIDE exp
    (59) exp -> . exp POWER exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp GE exp
    (64) exp -> . exp NE exp
    (65) exp -> . exp CHECKEQ exp
    (66) exp -> . exp and exp
    (67) exp -> . exp or exp
    (68) exp -> . exp MODULO exp
    (69) exp -> . exp DBLDOTS exp
    (70) exp -> . tableconstructor
    (71) exp -> . unop exp
    (72) Number -> . INTEGER
    (73) Number -> . FLOAT
    (74) Number -> . HEX
    (76) prefixexp -> . var
    (77) prefixexp -> . LPAREN exp RPAREN
    (81) tableconstructor -> . LCURLY fieldlist RCURLY
    (82) tableconstructor -> . LCURLY RCURLY
    (78) unop -> . MINUS
    (79) unop -> . not
    (80) unop -> . HASH
    (41) var -> . names
    (42) var -> . prefixexp LSQUARE exp RSQUARE
    (43) var -> . prefixexp SDOT names
    (92) names -> . ID
    (93) names -> . RESID

    nil             shift and go to state 32
    false           shift and go to state 23
    true            shift and go to state 35
    STRING          shift and go to state 27
    TRPLDOTS        shift and go to state 40
    function        shift and go to state 31
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36
    HEX             shift and go to state 33
    LPAREN          shift and go to state 5
    LCURLY          shift and go to state 24
    MINUS           shift and go to state 26
    not             shift and go to state 34
    HASH            shift and go to state 25
    ID              shift and go to state 20
    RESID           shift and go to state 4

    prefixexp                      shift and go to state 28
    tableconstructor               shift and go to state 22
    Number                         shift and go to state 37
    unop                           shift and go to state 39
    names                          shift and go to state 6
    exp                            shift and go to state 179
    var                            shift and go to state 29

state 175

    (14) stat -> for names EQUALS exp COMMA exp do . block end
    (7) block -> . sdash
    (1) sdash -> . chunk
    (2) sdash -> . chunk laststat
    (3) sdash -> . chunk laststat SEMI
    (4) chunk -> . chunk stat
    (5) chunk -> . chunk stat SEMI
    (6) chunk -> . empty
    (75) empty -> .

    return          reduce using rule 75 (empty -> .)
    break           reduce using rule 75 (empty -> .)
    do              reduce using rule 75 (empty -> .)
    while           reduce using rule 75 (empty -> .)
    repeat          reduce using rule 75 (empty -> .)
    if              reduce using rule 75 (empty -> .)
    for             reduce using rule 75 (empty -> .)
    local           reduce using rule 75 (empty -> .)
    function        reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    RESID           reduce using rule 75 (empty -> .)
    LPAREN          reduce using rule 75 (empty -> .)
    end             reduce using rule 75 (empty -> .)

    chunk                          shift and go to state 1
    empty                          shift and go to state 3
    sdash                          shift and go to state 57
    block                          shift and go to state 180

state 176

    (22) funcbody -> LPAREN parlist RPAREN block end .

    SEMI            reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)
    return          reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)
    break           reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)
    do              reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)
    while           reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)
    repeat          reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)
    if              reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)
    for             reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)
    local           reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)
    function        reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)
    ID              reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)
    RESID           reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)
    LPAREN          reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)
    $end            reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)
    end             reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)
    until           reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)
    else            reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)
    elseif          reduce using rule 22 (funcbody -> LPAREN parlist RPAREN block end .)


state 177

    (12) stat -> if exp then block ifblock else block end .

    SEMI            reduce using rule 12 (stat -> if exp then block ifblock else block end .)
    return          reduce using rule 12 (stat -> if exp then block ifblock else block end .)
    break           reduce using rule 12 (stat -> if exp then block ifblock else block end .)
    do              reduce using rule 12 (stat -> if exp then block ifblock else block end .)
    while           reduce using rule 12 (stat -> if exp then block ifblock else block end .)
    repeat          reduce using rule 12 (stat -> if exp then block ifblock else block end .)
    if              reduce using rule 12 (stat -> if exp then block ifblock else block end .)
    for             reduce using rule 12 (stat -> if exp then block ifblock else block end .)
    local           reduce using rule 12 (stat -> if exp then block ifblock else block end .)
    function        reduce using rule 12 (stat -> if exp then block ifblock else block end .)
    ID              reduce using rule 12 (stat -> if exp then block ifblock else block end .)
    RESID           reduce using rule 12 (stat -> if exp then block ifblock else block end .)
    LPAREN          reduce using rule 12 (stat -> if exp then block ifblock else block end .)
    $end            reduce using rule 12 (stat -> if exp then block ifblock else block end .)
    end             reduce using rule 12 (stat -> if exp then block ifblock else block end .)
    until           reduce using rule 12 (stat -> if exp then block ifblock else block end .)
    else            reduce using rule 12 (stat -> if exp then block ifblock else block end .)
    elseif          reduce using rule 12 (stat -> if exp then block ifblock else block end .)


state 178

    (38) ifblock -> ifblock elseif exp then . block
    (7) block -> . sdash
    (1) sdash -> . chunk
    (2) sdash -> . chunk laststat
    (3) sdash -> . chunk laststat SEMI
    (4) chunk -> . chunk stat
    (5) chunk -> . chunk stat SEMI
    (6) chunk -> . empty
    (75) empty -> .

    return          reduce using rule 75 (empty -> .)
    break           reduce using rule 75 (empty -> .)
    do              reduce using rule 75 (empty -> .)
    while           reduce using rule 75 (empty -> .)
    repeat          reduce using rule 75 (empty -> .)
    if              reduce using rule 75 (empty -> .)
    for             reduce using rule 75 (empty -> .)
    local           reduce using rule 75 (empty -> .)
    function        reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    RESID           reduce using rule 75 (empty -> .)
    LPAREN          reduce using rule 75 (empty -> .)
    else            reduce using rule 75 (empty -> .)
    end             reduce using rule 75 (empty -> .)
    elseif          reduce using rule 75 (empty -> .)

    chunk                          shift and go to state 1
    empty                          shift and go to state 3
    block                          shift and go to state 181
    sdash                          shift and go to state 57

state 179

    (15) stat -> for names EQUALS exp COMMA exp COMMA exp . do block end
    (55) exp -> exp . PLUS exp
    (56) exp -> exp . MINUS exp
    (57) exp -> exp . TIMES exp
    (58) exp -> exp . DIVIDE exp
    (59) exp -> exp . POWER exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . GE exp
    (64) exp -> exp . NE exp
    (65) exp -> exp . CHECKEQ exp
    (66) exp -> exp . and exp
    (67) exp -> exp . or exp
    (68) exp -> exp . MODULO exp
    (69) exp -> exp . DBLDOTS exp

    do              shift and go to state 182
    PLUS            shift and go to state 79
    MINUS           shift and go to state 82
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 84
    POWER           shift and go to state 72
    LT              shift and go to state 77
    LE              shift and go to state 70
    GT              shift and go to state 78
    GE              shift and go to state 74
    NE              shift and go to state 83
    CHECKEQ         shift and go to state 76
    and             shift and go to state 69
    or              shift and go to state 73
    MODULO          shift and go to state 80
    DBLDOTS         shift and go to state 81


state 180

    (14) stat -> for names EQUALS exp COMMA exp do block . end

    end             shift and go to state 183


state 181

    (38) ifblock -> ifblock elseif exp then block .

    else            reduce using rule 38 (ifblock -> ifblock elseif exp then block .)
    end             reduce using rule 38 (ifblock -> ifblock elseif exp then block .)
    elseif          reduce using rule 38 (ifblock -> ifblock elseif exp then block .)


state 182

    (15) stat -> for names EQUALS exp COMMA exp COMMA exp do . block end
    (7) block -> . sdash
    (1) sdash -> . chunk
    (2) sdash -> . chunk laststat
    (3) sdash -> . chunk laststat SEMI
    (4) chunk -> . chunk stat
    (5) chunk -> . chunk stat SEMI
    (6) chunk -> . empty
    (75) empty -> .

    return          reduce using rule 75 (empty -> .)
    break           reduce using rule 75 (empty -> .)
    do              reduce using rule 75 (empty -> .)
    while           reduce using rule 75 (empty -> .)
    repeat          reduce using rule 75 (empty -> .)
    if              reduce using rule 75 (empty -> .)
    for             reduce using rule 75 (empty -> .)
    local           reduce using rule 75 (empty -> .)
    function        reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    RESID           reduce using rule 75 (empty -> .)
    LPAREN          reduce using rule 75 (empty -> .)
    end             reduce using rule 75 (empty -> .)

    chunk                          shift and go to state 1
    empty                          shift and go to state 3
    sdash                          shift and go to state 57
    block                          shift and go to state 184

state 183

    (14) stat -> for names EQUALS exp COMMA exp do block end .

    SEMI            reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)
    return          reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)
    break           reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)
    do              reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)
    while           reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)
    repeat          reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)
    if              reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)
    for             reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)
    local           reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)
    function        reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)
    ID              reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)
    RESID           reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)
    LPAREN          reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)
    $end            reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)
    end             reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)
    until           reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)
    else            reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)
    elseif          reduce using rule 14 (stat -> for names EQUALS exp COMMA exp do block end .)


state 184

    (15) stat -> for names EQUALS exp COMMA exp COMMA exp do block . end

    end             shift and go to state 185


state 185

    (15) stat -> for names EQUALS exp COMMA exp COMMA exp do block end .

    SEMI            reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
    return          reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
    break           reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
    do              reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
    while           reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
    repeat          reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
    if              reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
    for             reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
    local           reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
    function        reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
    ID              reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
    RESID           reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
    LPAREN          reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
    $end            reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
    end             reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
    until           reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
    else            reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)
    elseif          reduce using rule 15 (stat -> for names EQUALS exp COMMA exp COMMA exp do block end .)

